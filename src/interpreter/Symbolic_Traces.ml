open JSIL_Syntax
open JSIL_Memory_Model

(* Information generated by the symbolic execution *)

let create_info_node_aux symb_state new_node_number cmd_index cmd_str =
	let heap_str = JSIL_Memory_Print.string_of_shallow_symb_heap (get_heap symb_state) true in
	let store_str = JSIL_Memory_Print.string_of_shallow_symb_store (get_store symb_state) true in
	let pfs_str = JSIL_Memory_Print.string_of_shallow_p_formulae (get_pf symb_state) true in
	let gamma_str = JSIL_Memory_Print.string_of_gamma (get_gamma symb_state) in
	let preds_str = JSIL_Memory_Print.string_of_preds (get_preds symb_state) true in
	let new_node_info =
		{
			heap_str = heap_str;
			store_str = store_str;
			pfs_str = pfs_str;
			gamma_str = gamma_str;
			preds_str = preds_str;
			(* cmd index *)
			cmd_index = cmd_index;
			cmd_str = cmd_str;
			(* node number *)
			node_number = new_node_number
		} in
	new_node_info

(* registering info nodes *)
let register_new_node_aux2 search_info new_node_info =
	let new_node_number = !(search_info.next_node) in
	search_info.next_node := new_node_number + 1;
	Hashtbl.add (search_info.info_nodes) new_node_number new_node_info;
	Hashtbl.replace search_info.info_edges new_node_info.node_number []

let register_new_node_aux search_info new_node_info parent_node_info =
	register_new_node_aux2 search_info new_node_info;
	try
	let parent_children = Hashtbl.find search_info.info_edges parent_node_info.node_number in
	Hashtbl.replace search_info.info_edges parent_node_info.node_number ((new_node_info.node_number) :: parent_children)
	with _ -> Printf.printf "What are you DOING??????\n\n"

let register_new_node search_info new_node_info =
	let parent_node_info = search_info.cur_node_info in
	register_new_node_aux search_info new_node_info parent_node_info


(** Creating info nodes and registering them *)
let create_info_node_aux2 symb_state search_info msg i =
	let new_node_number : int = !(search_info.next_node) in
	let i =
		match i with
		| None -> (-1)
		| Some i -> i in
	let new_node_info = create_info_node_aux symb_state new_node_number i msg in
	register_new_node search_info new_node_info;
	new_node_info


(* creating info nodes from the symbolic execution *)

let create_info_node_from_cmd search_info symb_state cmd i =
	let cmd_str = JSIL_Print.string_of_cmd_aux cmd i false true "" in
	create_info_node_aux2 symb_state search_info cmd_str (Some i)


let create_info_node_from_lcmd search_info symb_state lcmd =
	let cmd_str = JSIL_Print.string_of_logic_command lcmd true in
	create_info_node_aux2 symb_state search_info cmd_str None


let create_info_node_from_post search_info symb_state ret_flag success : unit =
	let msg = ("Postcondition. Ret flag: " ^
		(match ret_flag with
		| Normal -> "NORMAL"
		| Error -> "ERROR")) in
	let symb_state = List.nth symb_state 0 in
	if (success)
		then (create_info_node_aux2 symb_state search_info msg None; ())
		else
			begin
			let new_node_number : int = !(search_info.next_node) in
			let new_node_info : search_info_node = create_info_node_aux symb_state new_node_number (-1) msg in
			register_new_node_aux2 search_info new_node_info
			end


let create_info_node_from_error search_info error_msg =
	let new_node_number : int = !(search_info.next_node) in
	let msg = "ERROR: " ^ (String.escaped error_msg) in
	let new_node_info =
		{
			heap_str = "";
			store_str = "";
			pfs_str = "";
			gamma_str = "";
			preds_str = "";
			(* cmd index *)
			cmd_index = (-2);
			cmd_str = msg;
			(* node number *)
			node_number = new_node_number
		} in
	let parent_node =
		try Hashtbl.find search_info.info_nodes (new_node_number - 1)
			with _ -> raise (Failure "create_info_node_from_error: CORE FAILED") in
	register_new_node_aux search_info new_node_info parent_node;
	new_node_info

let create_info_node_from_invariant search_info symb_state post =
	let msg = if (post) then "Postcondition" else "Invariant" in
	let new_node_number : int = !(search_info.next_node) in
	let new_node_info = create_info_node_aux symb_state new_node_number (-1) msg in
	register_new_node search_info new_node_info;
	new_node_info