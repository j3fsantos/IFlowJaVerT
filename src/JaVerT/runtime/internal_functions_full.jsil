(* ******************
   *** PREDICATES ***
   ****************** *)

(*
 * Predicate: isInternalProperty
 *
 * Resource: None
 *
 *)
pred isInternalProperty (prop) :
    types (prop : $$string_type) * (! (prop == "")) * (s-nth (prop, 0) == "@");

(*
 * Predicate: isNamedProperty
 *
 * Resource: None
 *
 *)
pred isNamedProperty (prop) :
    types (prop : $$string_type) * (! (prop == "")) * (! (s-nth (prop, 0) == "@"));

(*
 * Predicate: DataDescriptor
 *
 * Resource: None
 *
 *)
pred DataDescriptor (d) :
    types (d : $$list_type, #dwrit : $$boolean_type, #denum : $$boolean_type, #dconf : $$boolean_type) *
    (! (#dval == $$empty)) * (d == {{ "d", #dval, #dwrit, #denum, #dconf }});

(*
 * Predicate: AccessorDescriptor
 *
 * Resource: None
 *
 *)
pred AccessorDescriptor (d) :
    types (d : $$list_type, #denum : $$boolean_type, #dconf : $$boolean_type) *
    (d == {{ "a", #dget, #dset, #denum, #dconf }});

(*
 * Predicate: Descriptor
 *
 * Resource: None
 *
 *)
pred Descriptor (d) :
    DataDescriptor (d),
    AccessorDescriptor (d);

(*
 * Predicate: GenericDescriptor
 *
 * Resource: None
 *
 *)
pred GenericDescriptor (d) :
    types (d : $$list_type) * (d == {{ "g", #genum, #gconf, #gval, #gwrit, #gget, #gset }});

(*
 * Predicate: Projection functions for descriptors
 *
 * Resource: None
 *
 *)
pred desc_val (d, v) :
    types (d : $$list_type) * v == l-nth(d, 1);

pred desc_writ (d, v) :
    types (d : $$list_type) * v == l-nth(d, 2);

pred desc_get (d, v) :
    types (d : $$list_type) * v == l-nth(d, 1);

pred desc_set (d, v) :
    types (d : $$list_type) * v == l-nth(d, 2);

pred desc_enum (d, v) :
    types (d : $$list_type) * v == l-nth(d, 3);

pred desc_conf (d, v) :
    types (d : $$list_type) * v == l-nth(d, 4);

(*
 * Predicate: Cell_o(l, prop, X)
 *
 * Resource:
 *      (l, prop)
 *
 * Note: We are not allowing accessor descriptors in the heap yet
 *)
pred Cell_o (l, prop, None) :
    types(l : $$object_type) * isNamedProperty(prop) * ((l, prop) -> None);

pred Cell_o (l, prop, d) :
    types(l : $$object_type) * isNamedProperty(prop) * ((l, prop) -> d) * Descriptor(d);

(*
 * Predicate: IsStringIndex - how do we deal with integers?
 *
 * Resource: None
 *
 *)
pred IsStringIndex(S, prop, i) :
    types(S : $$string_type, prop : $$string_type, i : $$number_type) *
    (prop == num_to_string i) * (0 <=# i) * (i <# s-len S);

(*
 * Predicate: Cell_s(l, prop, _, X, primitiveValue)
 *
 * Resource:
 *      (l, prop)               via Cell_o
 *      (l, "@primitiveValue")
 *
 * Note: Must be used with String objects,
 *       otherwise (l, "@primitiveValue") WILL NOT EXIST OR BE STUPID
 *
 *)
pred Cell_s (l, prop, "None", None, pv) :
     types (l : $$object_type, prop : $$string_type, pv : $$string_type) *
	 Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i));

pred Cell_s (l, prop, "SI", desc, pv) :
     types(l : $$object_type, prop : $$string_type, desc : $$list_type, pv : $$string_type, #i : $$number_type, #v : $$string_type) *
	 Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (desc == {{ "d", #v, $$f, $$t, $$f }}) *  (#v == s-nth(pv, #i)) *
	 (#i == num_to_int (string_to_num prop)) * IsStringIndex(pv, prop, #i);

pred Cell_s (l, prop, "NSI", desc, pv) :
	 types (l : $$object_type, prop : $$string_type, desc : $$list_type, pv : $$string_type, #i : $$number_type) *
	 Cell_o (l, prop, desc) * ((l, "@primitiveValue") -> pv) *
	 (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i)) *
     (! (desc == None));

(*
 * Predicate: ErrorObject(l, pr)
 *
 * Resource:
 *      (l, "@proto")	(l, "@class")	(l, "@extensible")
 *
 *)

pred ErrorObject (l, pr) :
	types (l : $$object_type, pr : $$object_type) *
	((l, "@proto") -> pr) * ((l, "@class") -> "Error") * ((l, "@extensible") -> $$t) * empty_fields(l : "@proto", "@class", "@extensible");

pred isTypeError(l) :
    ErrorObject (l, $lterr_proto);

pred isSyntaxError(l) :
    ErrorObject (l, $lserr_proto);

pred isReferenceError(l) :
    ErrorObject (l, $lrferr_proto);

(*
 * Predicate: isClass(c, X)
 *
 * Resource:
 *      (l, "@class")
 *
 *)
pred isClass (c, "Array")      : types (c : $$string_type) * (c == "Array");
pred isClass (c, "String")     : types (c : $$string_type) * (c == "String");
pred isClass (c, "Non-String") : types (c : $$string_type) * (! (c == "String"));
pred isClass (c, "Non-Array")  : types (c : $$string_type) * (! (c == "Array"));

(*
 * The PI predicate
 *)

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")
 *)
pred Pi (l, prop, lcls, $$undefined, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, #cls : $$string_type, lcls : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@proto") -> $$null) * ((l, "@class") -> #cls) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, None) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ $$f }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, #cls : $$string_type, lcls : $$list_type, d : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@class") -> #cls) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, d) * (! (d == None)) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ $$f }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)

pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, lcls : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@class") -> #cls) * ((l, "@proto") -> #lp) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, None) *
	types(#lcls : $$list_type, #lls : $$list_type, #ltf  : $$list_type, #lpv : $$list_type) *
    Pi (#lp, prop, #lcls, d, #lls, #ltf, #lpv) *
	types(#pcls : $$string_type,  #ocls : $$list_type,
	        #lp : $$object_type,  #ols  : $$list_type,
		   #ptf : $$boolean_type, #otf  : $$list_type,
		   #ppv : $$string_type,  #otv  : $$list_type) *
	(#lcls == #pcls :: #ocls) * (#lls == #lp :: #ols) * (#ltf == #ptf :: #otf) * (#lpv == #ppv :: #otv) *
	(lcls == #cls :: #lcls) * (ls == l :: #lls) * (ltf == $$f :: #ltf) * (lpv == "" :: #lpv);
    
(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, $$undefined, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, #cls : $$string_type, lcls : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@proto") -> $$null) * ((l, "@class") -> #cls) *
    isClass (#cls, "String") * Cell_s (l, prop, "None", None, #pv) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, #cls : $$string_type, lcls : $$list_type, d : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@class") -> #cls) *
	isClass (#cls, "String") * Cell_s (l, prop, "SI", d, #pv) *
	(lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, #cls : $$string_type, lcls : $$list_type, d : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	((l, "@class") -> #cls) *
	isClass (#cls, "String") * Cell_s (l, prop, "NSI", d, #pv) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : $$object_type, prop : $$string_type, lcls : $$list_type, ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
	types(#lp : $$object_type, #cls : $$string_type, #pcls : $$list_type, #lsp : $$list_type, #ltfp : $$list_type, #lpvp : $$list_type) *
	((l, "@class") -> #cls) * ((l, "@proto") -> #lp) * (! (#lp == $$null)) *
	isClass (#cls, "String") * Cell_s (l, prop, "None", None, #pv) *
    Pi (#lp, prop, #pcls, d, #lsp, #ltfp, #lpvp) *
	(lcls == #cls :: #pcls) * (ls == l :: #lsp) * (ltf == $$t :: #ltfp) * (lpv == #pv :: #lpvp) *
    (0 <# l-len #lsp) * (0 <# l-len #ltfp) * (0 <# l-len #lpvp);

(* ***********************
 * CREATE_DEFAULT_OBJECT *
 *************************)

spec create_default_object (l, pr, cl, ext)

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : $$object_type) * (#cl == $$undefined) * (#ext == $$undefined) *
	   empty_fields(#l : ) ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> "Object") * ((#l, "@extensible") -> $$t) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : $$object_type, #cl : $$string_type, #ext : $$boolean_type) *
        empty_fields(#l : ) ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> #cl) * ((#l, "@extensible") -> #ext) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : $$object_type) * (#cl == $$undefined) * (#ext == $$undefined) *
	   ((#l, "@proto") -> $$null) * empty_fields(#l : "@proto") ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> "Object") * ((#l, "@extensible") -> $$t) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : $$object_type, #cl : $$string_type, #ext : $$boolean_type) *
       ((#l, "@proto") -> $$null) * empty_fields(#l : "@proto") ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> #cl) * ((#l, "@extensible") -> #ext) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal

proc create_default_object (l, pr, cl, ext) {

 			goto [cl = $$undefined] scl text;
 	scl:	cl := "Object";
 	text:	goto [ext = $$undefined] sext setall;
 	sext:	ext := $$t;

 	setall:	[l, "@proto"] := pr;
 			[l, "@class"] := cl;
 			[l, "@extensible"] := ext;

 	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

spec create_object_with_call_construct (l, call, construct, len)

    [[ (l == #l) * (call == #call) * (construct == #construct) * (len == #len) *
	   types(#l : $$object_type, #call : $$string_type, #construct: $$string_type, #len : $$number_type) *
       ((#l, "@proto") -> $$null) * empty_fields(#l : "@proto") ]]
    [[ ((#l, "@proto") -> $lfun_proto) * ((#l, "@class") -> "Function") * ((#l, "@extensible") -> $$t) *
	   ((#l, "@scope") -> $$empty) * ((#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) *
	   ((#l, "@call") -> #call) * ((#l, "@construct") -> #construct) *
	   empty_fields(#l : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (call == #call) * (construct == $$empty) * (len == #len) *
	   types(#l : $$object_type, #call : $$string_type, #len : $$number_type) *
       empty_fields (#l : ) ]]
    [[ ((#l, "@proto") -> $lfun_proto) * ((#l, "@class") -> "Function") * ((#l, "@extensible") -> $$t) *
	   ((#l, "@scope") -> $$empty) * ((#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) *
	   ((#l, "@call") -> #call) *
	   empty_fields(#l : "@proto", "@class", "@extensible", "@scope", "length", "@call") *
	   (ret == #l) ]]
    normal;
    
    [[ (l == #l) * (call == #call) * (construct == #construct) * (len == #len) *
	   types(#l : $$object_type, #call : $$string_type, #len : $$number_type, #construct: $$string_type) *
       empty_fields (#l : ) ]]
    [[ ((#l, "@proto") -> $lfun_proto) * ((#l, "@class") -> "Function") * ((#l, "@extensible") -> $$t) *
	   ((#l, "@scope") -> $$empty) * ((#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) *
	   ((#l, "@call") -> #call) * ((#l, "@construct") -> #construct) *
	   empty_fields(#l : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct") *
	   (ret == #l) ]]
    normal

proc create_object_with_call_construct (l, call, construct, len) {

			xret := "create_default_object" (l, $lfun_proto, "Function", $$t);

			[xret, "@scope"] := $$empty;
			[xret, "length"] := {{ "d", len, $$f, $$f, $$f }};
			[xret, "@call"] := call;

			goto [construct = $$empty] rlab cstr;

	cstr:	[xret, "@construct"] := construct;

	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

pred function_object (l, xsc, call, construct, len, prototype) :
	types(l : $$object_type, xsc : $$list_type, call : $$string_type, construct: $$string_type, len : $$number_type, prototype : $$object_type) *
	((l, "@proto") -> $lfun_proto) * ((l, "@class") -> "Function") * ((l, "@extensible") -> $$t) *
	((l, "@scope") -> xsc)  * ((l, "length") -> {{ "d", len, $$f, $$f, $$f }}) *
	((l, "@call")  -> call) * ((l, "@construct") -> construct) *
	((l, "caller") -> {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }}) *
	((l, "arguments") -> {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }}) *
	((l, "prototype") -> {{ "d", prototype, $$t, $$f, $$f }}) *
	empty_fields(l : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct", "caller", "arguments", "prototype");

spec create_function_object (xsc, call, construct, params)
    [[ (xsc == #xsc) * (call == #call) * (construct == #construct) * (params == #params) * 
	   types(#xsc : $$list_type, #call : $$string_type, #construct: $$string_type, #params : $$list_type) ]]
    [[ types(#l : $$object_type, #xsc : $$list_type, #call : $$string_type, #construct: $$string_type, #params : $$list_type, #len : $$number_type, ret : $$object_type) *
	   function_object(ret, #xsc, #call, #construct, #len, prototype) * (#len == l-len #params) *
	   ((prototype, "@proto") -> $lobj_proto) * ((prototype, "@class") -> "Object") * ((prototype, "@extensible") -> $$t) *
	   ((prototype, "constructor") -> {{ "d", ret, $$t, $$f, $$t }} ) *
	   empty_fields(prototype : "@proto", "@class", "@extensible", "constructor") ]]
    normal

proc create_function_object (xsc, call, construct, params) {
			len := l-len (params);
			l := new ();
			l := "create_object_with_call_construct" (l, call, construct, len);

			[l, "@scope"] := xsc; 

			prototype := new ();
			prototype := "create_default_object" (prototype, $lobj_proto, "Object", $$t);
			[prototype, "constructor"] := {{ "d", l, $$t, $$f, $$t }};
			[l, "prototype"] := {{ "d", prototype, $$t, $$f, $$f }};

			(* Strict mode only *)
			[l, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};
			[l, "arguments"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};

			xret := l;

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* ****** *)
(* ERRORS *)
(* ****** *)

spec Error_construct (xsc, vthis, v)

    (* Error constructor without message *)
    [[ (v == $$undefined) * (vthis == #vthis) *
	   types (#vthis : $$object_type) *
       ((#vthis, "@class") -> #cls) * ((#vthis, "@extensible") -> #ext) ]]
    [[ (ret == #vthis) * ((#vthis, "@class") -> "Error") * ((#vthis, "@extensible") -> $$t) ]]
    normal;
    
    (* Error constructor with message of type string *)
    [[ (v == #m) * (vthis == #vthis) *
	   types (#vthis : $$object_type, #m : $$string_type) * 
       ((#vthis, "@class") -> #cls) * ((#vthis, "@extensible") -> #ext) ]]
    [[ (ret == #vthis) * ((#vthis, "@class") -> "Error") * ((#vthis, "@extensible") -> $$t) * ((#vthis, "message") -> {{ "d", #m, $$t, $$f, $$t }}) ]]
    normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;

			[vthis, "@class"] := "Error";
			[vthis, "@extensible"] := $$t;

			goto [v = $$undefined] rlab mess;

	mess:	xerr := "i__toString" (v) with elab;
			[xret, "message"] := {{ "d", xerr, $$t, $$f, $$t }};

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xerr, elab;
};



(* **************
 * i__toBoolean *
 ****************)

spec i__toBoolean (v)

	[[ (v == #v) * types(#v : $$boolean_type) ]]
	[[ (ret == #v) ]]
	normal; 

	[[ (v == 0) ]]
	[[ (ret == $$f) ]]
	normal;

	[[ (v == #v) * types(#v : $$number_type) * (! (#v == 0)) ]]
	[[ (ret == $$t) ]]
	normal		

proc i__toBoolean (v) {
	iu:		goto [v = $$undefined] undef in;
	undef:	xret := $$f;
			goto rlab;

	in:		goto [v = $$null] null ib;
	null:	xret := $$f;
			goto rlab;

	ib:		goto [typeOf(v) = $$boolean_type] bool inum;
	bool:	xret := v;
			goto rlab;

	inum:	goto [typeOf(v) = $$number_type] num is;
	num:	goto [(v = 0) or (not (v = v))] is_f is_t;

	is:		goto [typeOf(v) = $$string_type] str io;
	str:	goto [v = ""] is_f is_t;
			goto rlab;

	io:		goto [typeOf(v) = $$object_type] obj oops;
	obj:	xret := $$t;
			goto rlab;

	is_t:	xret := $$t;
			goto rlab;
	is_f:	xret := $$f;
			goto rlab;

	oops:	xret := "ToBoolean: This should not happen.";

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};


(* ********* *)
(* TYPEERROR *)
(* ********* *)

spec TypeError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lterr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec TypeError (v)

    [[ (v == $$undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError (v) {
			xret := "TypeError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* ************** *)
(* REFERENCEERROR *)
(* ************** *)

spec ReferenceError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lrferr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec ReferenceError (v)

    [[ (v == $$undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError (v) {
			xret := "ReferenceError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* *********** *)
(* SYNTAXERROR *)
(* *********** *)

spec SyntaxError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lserr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec SyntaxError (v)

    [[ (v == $$undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError (v) {
			xret := "SyntaxError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* ****************************************
   *** *** ***   INITIAL HEAP   *** *** ***
   **************************************** *)

pred initialHeapPre () :
    (($lg,      "@class") -> None) * 
    (($lg, 	    "@proto") -> None) * 
    (($lg, "@extensible") -> None) *
    empty_fields ( $lobj_proto : ) * empty_fields ($lfun_proto : ) * empty_fields ($lerr : ) * empty_fields ($lerr_proto : );
    
pred initialHeapPost () :
    (($lg,         "@class") -> "Object")   * (($lg,         "@proto") -> $lobj_proto) * (($lg,         "@extensible") -> $$t) * (($lg,         "Error") -> {{ "d", $lerr, $$t, $$f, $$t }}) * 
	(($lobj_proto, "@class") -> "Object")   * (($lobj_proto, "@proto") -> $$null)      * (($lobj_proto, "@extensible") -> $$t) * empty_fields ( $lobj_proto : "@class", "@proto", "@extensible" ) *
	(($lfun_proto, "@class") -> "Function") * (($lfun_proto, "@proto") -> $lobj_proto) * (($lfun_proto, "@extensible") -> $$t) *
	(($lfun_proto, "@scope") -> $$empty)    * (($lfun_proto, "length") -> {{ "d", 0, $$f, $$f, $$f }}) * (($lfun_proto, "@call") -> "FP_default") * empty_fields($lfun_proto : "@proto", "@class", "@extensible", "@scope", "length", "@call") *	
	(($lerr,       "@class") -> "Function") * (($lerr,       "@proto") -> $lfun_proto) * (($lerr,       "@extensible") -> $$t) *
	(($lerr,       "@scope") -> $$empty)    * (($lerr,       "length") -> {{ "d", 1, $$f, $$f, $$f }}) * (($lerr,       "@call") -> "Error_call") * 
	(($lerr, "@construct") -> "Error_construct") * (($lerr,  "prototype") -> {{ "d", $lerr_proto, $$f, $$f, $$f }}) * empty_fields($lerr : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct", "prototype") *
	(($lerr_proto, "@class") -> "Error")   * (($lerr_proto, "@proto") -> $lobj_proto) * (($lerr_proto, "@extensible") -> $$t) * 
	(($lerr_proto, "message") -> {{ "d", "", $$t, $$f, $$t }}) * empty_fields ($lerr_proto : "@class", "@proto", "@extensible", "message");    

spec setupInitialHeap ()

	[[ initialHeapPre() ]]
	[[ initialHeapPost() * (ret == $$empty) ]]
	normal

proc setupInitialHeap () {

			(* Global object *)

			xret := "create_default_object" ($lg, $lobj_proto, "Object", $$t);

			(* Object.prototype *)

			xret := "create_default_object" ($lobj_proto, $$null, "Object", $$t);

			(* Function.prototype *)
			
			xret := "create_object_with_call_construct" ($lfun_proto, "FP_default", $$empty, 0);
			[$lfun_proto, "@proto"] := $lobj_proto;
			
			(* Error object *)

			xret := "create_object_with_call_construct" ($lerr, "Error_call", "Error_construct", 1);
			[$lg, "Error"] := {{ "d", $lerr, $$t, $$f, $$t }};
			[$lerr, "prototype"] := {{ "d", $lerr_proto, $$f, $$f, $$f }};

			(* Error.prototype *)

			xret := "create_default_object" ($lerr_proto, $lobj_proto, "Error", $$t);
			[$lerr_proto, "message"]     := {{ "d", "", $$t, $$f, $$t }};

	rlab:	xret := $$empty
}
with
{
	ret:	xret, rlab;
};

(* *************************************
   *** *** ***   AUXILIARY   *** *** ***
   ************************************* *)

(* *************************
   *** i__strictEquality ***
   ************************* *)

spec i__strictEquality (v1, v2)

   [[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) ]]
   [[ ret == $$t ]]
   normal;

   [[ (v1 == #v1) * (v2 == #v2) * (! (#v1 == #v2)) ]]
   [[ ret == $$f ]]
   normal

proc i__strictEquality (v1, v2) {
			xret := (v1 = v2);

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* **********************
   *** i__isPrimitive ***
   ********************** *)

spec i__isPrimitive (v)

   [[ v == $$undefined ]]
   [[ ret == $$t ]]
   normal;

   [[ v == $$null ]]
   [[ ret == $$t ]]
   normal;

   [[ types (v : $$number_type) ]]
   [[ (ret == $$t) ]]
   normal;

   [[ types (v : $$boolean_type) ]]
   [[ (ret == $$t) ]]
   normal;

   [[ types (v : $$string_type) ]]
   [[ (ret == $$t) ]]
   normal;

   [[ types (v : $$object_type) ]]
   [[ (ret == $$f) ]]
   normal

proc i__isPrimitive (v) {
			tv := typeOf(v);

	iu:		goto [(v = $$undefined) or (v = $$null) or
	              (typeOf(v) = $$boolean_type) or (typeOf(v) = $$number_type) or
	              (typeOf(v) = $$string_type)] rt rf;

	rt:		xret := $$t;
			goto rlab;

	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* *******************
   *** i__toNumber ***
   ******************* *)

spec i__toNumber (v)

	[[ v == $$t ]]
	[[ types(ret : $$number_type) * (ret == 1) ]]
	normal;

	[[ v == $$f ]]
	[[ types(ret : $$number_type) * (ret == 0) ]]
	normal;

	[[ (v == #v) * types(#v : $$number_type) ]]
	[[ ret == #v ]]
	normal;

	[[ (v == #v) * types(#v : $$string_type) ]]
	[[ types(ret : $$number_type, #v: $$string_type) *
	   (ret == (string_to_num #v)) ]]
	normal

proc i__toNumber (v) {
    iu:		goto [v = $$undefined] undef in;
	undef:	xret := nan;
    		goto rlab;

    in:		goto [v = $$null] null ib;
	null:	xret := 0;
    		goto rlab;

    ib:		goto [typeOf(v) = $$boolean_type] bool inum;
	bool:	goto [v = $$t] is_t is_f;
    is_t:	xret := 1;
    		goto rlab;
    is_f:	xret := 0;
    		goto rlab;

    inum:	goto [typeOf(v) = $$number_type] num is;
    num:	xret := v;
    		goto rlab;

    is:		goto [typeOf(v) = $$string_type] str io;
    str:	xret := string_to_num v;
    		goto rlab;

    io:		goto [typeOf(v) = $$object_type] obj oops;
    obj:	xret := "i__toPrimitive" (v, "Number") with elab;
    		xret := "i__toNumber" (xret);
    		goto rlab;

    oops:	xret := "TypeError" ("ToNumber: This should not happen.");
            goto elab;

    rlab:	skip;
    elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};


(* **********************
   *** i__toPrimitive ***
   ********************** *)

spec i__toPrimitive (v, hint)

    [[ v == $$undefined ]]
    [[ ret == $$undefined ]]
    normal;

    [[ v == $$null ]]
    [[ ret == $$null ]]
    normal;

    [[ (v == #v) * types (#v : $$number_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : $$boolean_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : $$string_type) ]]
	[[ (ret == #v) ]]
	normal

proc i__toPrimitive (v, hint) {
			xret := v;
			tv := typeOf(v);

	iu:		goto [(v = $$undefined) or (v = $$null) or
	              (typeOf(v) = $$boolean_type) or (typeOf(v) = $$number_type) or
	              (typeOf(v) = $$string_type)] rlab is_obj;

	is_obj:	print := "object";
			goto [typeOf(v) = $$object_type] obj oops;
	obj:	xret := "defaultValue" (v, hint) with elab;
			goto rlab;

	oops:	xret := "ToPrimitive: This should not happen.";
			goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************* *)
(* ABSTRACT COMPARISON *)
(* ******************* *)

spec i__abstractComparison (v1, v2, leftFirst)

    [[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * 
       types(#v1 : $$number_type, #v2 : $$number_type, #leftFirst : $$boolean_type) *
       (#v1 <# #v2) ]]
    [[ (ret == $$t) ]]
    normal;
    
    [[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * 
       types(#v1 : $$number_type, #v2 : $$number_type, #leftFirst : $$boolean_type) *
       (#v1 == #v2) ]]
    [[ (ret == $$f) ]]
    normal;

    [[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * 
       types(#v1 : $$number_type, #v2 : $$number_type, #leftFirst : $$boolean_type) *
       (#v2 <# #v1) ]]
    [[ (ret == $$f) ]]
    normal

proc i__abstractComparison (v1, v2, leftFirst) {
			goto [(leftFirst = $$empty) or (leftFirst = $$t)] eleft eright;

	eleft:	xret := "i__toPrimitive" (v1, "Number") with elab;
			px := xret;
			xret := "i__toPrimitive" (v2, "Number") with elab;
			py := xret;
			goto is_str;

	eright:	xret := "i__toPrimitive" (v2, "Number") with elab;
			py := xret;
			xret := "i__toPrimitive" (v1, "Number") with elab;
			px := xret;

	is_str:	goto [(typeOf(px) = $$string_type) and (typeOf(py) = $$string_type)] str num;

	str:	xret := (px <s py);
			goto rlab;

	num:	xret := "i__toNumber" (px) with elab;
			nx := xret;
			xret := "i__toNumber" (py) with elab;
			ny := xret;

			goto [(not (nx = nx)) or (not (ny = ny))] ru eq;

	eq:		goto [nx = ny] rf sl;

	sl:		xret := (nx < ny);
			goto rlab;

	ru:		xret := $$undefined;
			goto rlab;

	rt:		xret := $$t;
			goto rlab;

	rf:		xret := $$f;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};



(* **************** *)
(* ABSTRACTEQUALITY *)
(* **************** *)

spec i__abstractEquality (v1, v2)

	[[ (v1 == $$null) * (v2 == $$null) ]]
    [[ (ret == $$t) ]]
    normal;
    
	[[ types(v1 : $$object_type, v2 : $$null_type) ]]
    [[ (ret == $$f) ]]
    normal

proc i__abstractEquality (v1, v2) {
			tv1 := typeOf(v1);
			tv2 := typeOf(v2);

			goto [(tv1 = tv2)] same diff;

	same:	goto [(tv1 = $$undefined_type) or (tv1 = $$null_type) or
	              (tv1 = $$boolean_type)   or (tv1 = $$number_type) or
	              (tv1 = $$string_type)    or (tv1 = $$object_type)] ieq oops;
	ieq:	xret := (v1 = v2);
			goto rlab;

	diff:	goto [((tv1 = $$undefined_type) and (tv2 = $$null_type)) or
			      ((tv1 = $$null_type) and (tv2 = $$undefined_type))] rt dns;

	dns:	goto [(tv1 = $$number_type) and (tv2 = $$string_type)] tn2 dsn;
	tn2:	xret := "i__toNumber" (v2) with elab;
			xret := "i__abstractEquality" (v1, xret) with elab;
			goto rlab;

	dsn:	goto [(tv1 = $$string_type) and (tv2 = $$number_type)] tn1 s1b;
	tn1:	xret := "i__toNumber" (v1) with elab;
			xret := "i__abstractEquality" (xret, v2) with elab;
			goto rlab;

	s1b:	goto [tv1 = $$boolean_type] tn1 s2b;
	s2b:	goto [tv2 = $$boolean_type] tn2 s2o;

	s2o:	goto [((tv1 = $$number_type) or (tv1 = $$string_type)) and (tv2 = $$object_type)] tp2 s1o;
	tp2:	xret := "i__toPrimitive" (v2) with elab;
			xret := "i__abstractEquality" (v1, xret) with elab;
			goto rlab;

	s1o:	goto [(tv1 = $$object_type) and ((tv2 = $$number_type) or (tv2 = $$string_type))] tp1 rf;
	tp1:	xret := "i__toPrimitive" (v1) with elab;
			xret := "i__abstractEquality" (xret, v2) with elab;
			goto rlab;

	rt:		xret := $$t;
			goto rlab;

	rf:		xret := $$f;
			goto rlab;

	oops:	xret := "AbstractEquality: This should not happen.";
			goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};


(* ********************
   *** i__toInteger ***
   ******************** *)

spec i__toInteger (v)

	[[ (v == #v) *
	   types(#v : $$string_type) ]]
	[[ types(ret : $$number_type, #v: $$string_type) *
	   (ret == num_to_int (string_to_num #v)) ]]
	normal

proc i__toInteger (v) {
			xret := "i__toNumber" (v) with elab;
			xret := num_to_int (xret);

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *******************
   *** i__toString ***
   ******************* *)

spec i__toString (v)

	[[ (v == #v) *
	   types(#v : $$number_type) ]]
	[[ types(ret : $$string_type, #v : $$number_type) *
	   (ret == (num_to_string #v)) ]]
	normal;
	
	[[ (v == #v) * types(#v : $$string_type) ]]
	[[ types(ret : $$string_type) * (ret == #v) ]]
	normal

proc i__toString (v) {
	iu:		goto [v = $$undefined] undef in;
	undef:	xret := "undefined";
			goto rlab;

	in:		goto [v = $$null] null ib;
	null:	xret := "null";
			goto rlab;

	ib:		goto [typeOf(v) = $$boolean_type] bool inum;
	bool:	goto [v = $$t] is_t is_f;
	is_t:	xret := "true";
			goto rlab;
	is_f:	xret := "false";
			goto rlab;

	inum:	goto [typeOf(v) = $$number_type] num is;
	num:	xret := num_to_string v;
			goto rlab;

	is:		goto [typeOf(v) = $$string_type] str io;
	str:	xret := v;
			goto rlab;

	io:		goto [typeOf(v) = $$object_type] obj oops;
	obj:	xret := "i__toPrimitive" (v, "String") with elab;
			xret := "i__toString" (xret) with elab;
			goto rlab;

	oops:	xret := "TypeError" ("ToString: This should not happen.");
            goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************* *)
(* I__ISDATADESCRIPTOR *)
(* ******************* *)

spec i__isDataDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == $$t ]]
    normal;

    (* Accessor descriptor *)
    [[ AccessorDescriptor(desc) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 3) == $$empty) * (l-nth (desc, 4) == $$empty) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, with value *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 3) == $$empty) ]]
    [[ ret == $$t ]]
    normal;

    (* Generic descriptor, with writable *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 4) == $$empty) ]]
    [[ ret == $$t ]]
    normal

proc i__isDataDescriptor (desc) {
			goto [desc = $$undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "d"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	v := l-nth (desc, 3);
			w := l-nth (desc, 4);
			goto [(v = $$empty) and (w = $$empty)] rf rt;
	rt:		xret := $$t;
			goto rlab;
	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* *********************** *)
(* I__ISACCESSORDESCRIPTOR *)
(* *********************** *)

spec i__isAccessorDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 5) == $$empty) * (l-nth (desc, 6) == $$empty) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, with get *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 5) == $$empty) ]]
    [[ ret == $$t ]]
    normal;

    (* Generic descriptor, with set *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 6) == $$empty) ]]
    [[ ret == $$t ]]
    normal

proc i__isAccessorDescriptor (desc) {
			goto [desc = $$undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "a"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	g := l-nth (desc, 5);
			s := l-nth (desc, 6);
			goto [(g = $$empty) and (s = $$empty)] rf rt;
	rt:		xret := $$t;
			goto rlab;
	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* ********************** *)
(* I__ISGENERICDESCRIPTOR *)
(* ********************** *)

spec i__isGenericDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

	(* Data descriptor *)
	[[ DataDescriptor(desc) ]]
	[[ ret == $$f ]]
	normal;
	
	(* Accessor descriptor *)
	[[ AccessorDescriptor(desc) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, no data descriptor components *)
	[[ GenericDescriptor(desc) *
	   (l-nth (desc, 3) == $$empty) * (l-nth (desc, 4) == $$empty) *
	   (l-nth (desc, 5) == $$empty) * (l-nth (desc, 6) == $$empty) ]]
	[[ ret == $$t ]]
	normal;

	(* Generic descriptor, with value *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 3) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with writable *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 4) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 5) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 6) == $$empty)) ]]
	[[ ret == $$f ]]
	normal

proc i__isGenericDescriptor (desc) {
			goto [desc = $$undefined] rf cont;

	cont:	dd := "i__isDataDescriptor" (desc);
			ad := "i__isAccessorDescriptor" (desc);
			xret := not (dd or ad);
			goto rlab;

	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* ******************* *)
(* I__TODATADESCRIPTOR *)
(* ******************* *)

spec i__toDataDescriptor (desc)

    [[ (desc == #desc) * DataDescriptor (#desc) ]]
    [[ (ret == #desc) ]]
    normal

proc i__toDataDescriptor (desc) {
			d := l-nth (desc, 0);
			goto [d = "d"] rd cstr;

	cstr:	goto [d = "a"] ra gen;

	ra:		xret := {{ "d", $$undefined, $$f, l-nth (d, 3), l-nth (d, 4) }};
			goto rlab;

	gen:	e := l-nth (desc, 1);
			c := l-nth (desc, 2);
			v := l-nth (desc, 3);
			w := l-nth (desc, 4);

			goto [e = $$empty] fixe c;
	fixe:	e := $$f;
	c:		goto [c = $$empty] fixc v;
	fixc:	c := $$f;
	v:		goto [v = $$empty] fixv w;
	fixv:	v := $$undefined;
	w:		goto [w = $$empty] fixw fixed;
	fixw:	w := $$f;

	fixed:	xret := {{ "d", v, w, e, c }};
			goto rlab;

	rd:		xret := desc;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* *********************** *)
(* I__TOACCESSORDESCRIPTOR *)
(* *********************** *)

spec i__toAccessorDescriptor (desc)

    [[ (desc == #desc) * AccessorDescriptor (#desc) ]]
    [[ (ret == #desc) ]]
    normal
    
proc i__toAccessorDescriptor (desc) {
			d := l-nth (desc, 0);
			goto [d = "a"] rd cstr;

	cstr:	goto [d = "d"] ac gen;

	ac:		xret := {{ "a", $$undefined, $$undefined, l-nth (d, 3), l-nth (d, 4) }};
			goto rlab;

	gen:	e := l-nth (desc, 1);
			c := l-nth (desc, 2);
			g := l-nth (desc, 5);
			s := l-nth (desc, 6);

			goto [e = $$empty] fixe c;
	fixe:	e := $$f;
	c:		goto [c = $$empty] fixc v;
	fixc:	c := $$f;
	v:		goto [g = $$empty] fixg w;
	fixg:	g := $$undefined;
	w:		goto [s = $$empty] fixs fixed;
	fixs:	s := $$undefined;

	fixed:	xret := {{ "a", g, s, e, c }};
			goto rlab;

	rd:		xret := desc;
	rlab:	skip
}
with
{
	ret: 	xret, rlab;
};

(* ********* *)
(* SAMEVALUE *)
(* ********* *)

spec i__sameValue (v1, v2)

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : $$undefined_type, #v2 : $$undefined_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : $$null_type, #v2 : $$null_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : $$boolean_type, #v2 : $$boolean_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : $$string_type, #v2 : $$string_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : $$object_type, #v2 : $$object_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (! (#v1 == #v2)) ]]
	[[ ret == $$f ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * (! (#v1 == 0)) * types (#v1 : $$number_type, #v2 : $$number_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == 0) * (v2 == 0) * types (v1 : $$number_type, v2 : $$number_type) ]]
	[[ ret == $$t ]]
	normal;

	[[ (v1 == 0) * (v2 == -0) * types (v1 : $$number_type, v2 : $$number_type) ]]
	[[ ret == $$f ]]
	normal;

	[[ (v1 == -0) * (v2 == 0) * types (v1 : $$number_type, v2 : $$number_type) ]]
	[[ ret == $$f ]]
	normal;

	[[ (v1 == -0) * (v2 == -0) * types (v1 : $$number_type, v2 : $$number_type) ]]
	[[ ret == $$t ]]
	normal

proc i__sameValue (v1, v2) {
			xret := (v1 = v2);

			goto [(typeOf(v1) = $$number_type)] test2 rlab;
	test2:	goto [(typeOf(v2) = $$number_type)] inan1 rlab;

	inan1:	goto [(not (v1 = v1))] inan2 zero1;
	inan2:	goto [(not (v2 = v2))] rt    zero1;
	zero1:	goto [v1 = 0] zero2 rlab;
	zero2:	goto [v2 = 0] fix   rlab;

	fix:	sv1 := m_sgn (v1);
			sv2 := m_sgn (v2);

			xret := (sv1 = sv2);
			goto rlab;

	rt:		xret := $$t;

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* ********************* *)
(* CHECKASSIGNMENTERRORS *)
(* ********************* *)

spec i__checkAssignmentErrors (v)

    [[ v == $$undefined ]]
    [[ ret == $$t ]]
    normal;

    [[ v == $$null ]]
    [[ ret == $$t ]]
    normal;

	[[ types (v : $$number_type) ]]
	[[ (ret == $$t) ]]
	normal;

    [[ types (v : $$boolean_type) ]]
    [[ ret == $$t ]]
    normal;

    [[ types (v : $$string_type) ]]
    [[ ret == $$t ]]
    normal;

    [[ types (v : $$object_type) ]]
    [[ ret == $$t ]]
    normal;

    [[ (v == #v) * types (#v : $$list_type) * (#v == {{ "v", #l, #prop }}) * types(#l : $$object_type, #prop : $$string_type) *
	   (! (#prop == "eval")) * (! (#prop == "arguments"))]]
    [[ ret == $$t ]]
    normal;

    [[ (v == #v) * types (#v : $$list_type, #l : $$object_type) * (#v == {{ "v", #l, "eval" }}) ]]
    [[ isSyntaxError(ret) ]]
    error;

    [[ (v == #v) * types (#v : $$list_type, #l : $$object_type) * (#v == {{ "v", #l, "arguments" }}) ]]
    [[ isSyntaxError(ret) ]]
    error;

    [[ (v == #v) * types (#v : $$list_type, #base : $$object_type, #field : $$string_type) * (#v == {{ "o", #base, #field }}) ]]
    [[ ret == $$t ]]
    normal

proc i__checkAssignmentErrors (v) {
			tv := typeOf (v);
			goto [(tv = $$list_type)] isref rlab;
	isref:	goto [((l-nth (v, 0) = "v") or (l-nth (v, 0) = "o"))] prep rlab;

	prep:	fv := l-nth (v, 2);

	csyn:	goto [(l-nth (v, 0) = "v") and ((fv = "eval") or (fv = "arguments"))] se rlab;

	rlab:	xret := $$t;

	se:		xret := "SyntaxError" ();
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************** *)
(* CHECKOBJECTCOERCIBLE *)
(* ******************** *)

spec i__checkObjectCoercible (v)

	[[ v == $$undefined ]]
	[[ isTypeError(ret) ]]
	normal;

	[[ v == $$null ]]
	[[ isTypeError(ret) ]]
	normal;

	[[ types (v : $$number_type) ]]
	[[ ret == $$empty ]]
	normal;

	[[ types (v : $$boolean_type) ]]
	[[ ret == $$empty ]]
	normal;

	[[ types (v : $$string_type) ]]
	[[ ret == $$empty ]]
	normal;

	[[ types (v : $$object_type) ]]
	[[ ret == $$empty ]]
	normal

proc i__checkObjectCoercible (v) {

			xret := $$empty;

	iu:		goto [v = $$undefined] throw in;

	in:		goto [v = $$null] throw other;

	other:	goto [(typeOf(v) = $$boolean_type) or (typeOf(v) = $$number_type) or
	              (typeOf(v) = $$string_type) or (typeOf(v) = $$object_type)] rlab oops;

	oops:	xret := "CheckObjectCoercible: This should not happen.";

	rlab:	skip;

	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};



(* *************** *)
(* IsCallable *)
(* *************** *)

spec i__isCallable (l)

    [[ ((l, "@call") -> None) * types (l : $$object_type) ]]
    [[ ((l, "@call") -> None) * (ret == $$f) ]]
    normal;
	
	[[ ((l, "@call") -> #y) * (! (#y == None)) * types (l : $$object_type) ]]
    [[ ((l, "@call") -> #y) * (ret == $$t) ]]
    normal

proc i__isCallable (l) {
			xret := $$f;
			goto [typeOf(l) = $$object_type] obj rlab;
	obj:	xret := hasField(l, "@call");
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};


(* *************** *)
(* CHECKPARAMETERS *)
(* *************** *)

proc i__checkParameters (fid, params) {

			goto [(fid = "eval") or (fid = "arguments")] se pars;

	pars:	n := 0;
			l := l-len (params);

	loop:	goto [n < l] head rlab;
	head:	par := l-nth (params, n);
			goto [(par = "eval") or (par = "arguments")] se next;
	next:	n := n + 1;
			goto loop;

	rlab:	xret := $$t;

	se:		xret := "SyntaxError" ();
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* **********************************************
   *** *** ***   INTERNAL FUNCTIONS   *** *** ***
   ********************************************** *)

(* *************************
   *** O__GETOWNPROPERTY ***
   ************************* *)

(*
 *    Name: o__getOwnProperty 
 * Purpose: Get own property of a non-String object
 *
 *   Specs:
 *
 * 01 - Property not defined, return undefined
 * 02 - Property defined, return property descriptor
 *
 *)

spec o__getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type) *
	   Cell_o (#l, #prop, None) ]]
    [[ Cell_o (#l, #prop, None) * (ret == $$undefined) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #dx : $$list_type) *
	   Cell_o (#l, #prop, #dx) ]]
    [[ Cell_o (#l, #prop, #dx) * (ret == #dx) ]]
    normal

proc o__getOwnProperty (l, prop) {
            x := hasField(l, prop);
            goto [x] hp nhp; 			(* Does the field exist? *)

    nhp:    xret := $$undefined;		(* Field doesn't exist; return undefined *)
            goto rlab;

    hp:     xret := [l, prop];			(* Field exists; return the descriptor *)

    rlab:   skip
}
with
{
    ret: 	xret, rlab;
};

(* *************************
   *** S__GETOWNPROPERTY ***
   ************************* *)

(*
 *    Name: o__getOwnProperty 
 * Purpose: Get own property of a String object
 *
 *   Specs:
 *
 * 01 - Property not defined and not a string index, return undefined
 * 02 - Property defined as a string index, return property descriptor
 * 03 - Property defined as a non-string index, return property descriptor
 *
 *)

spec s__getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "None", None, #pv) ]]
    [[ Cell_s (#l, #prop, "None", None, #pv) *
	   (ret == $$undefined) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "SI", #u, #pv) ]]
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) *
	   (ret == #u) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "NSI", #u, #pv) ]]
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) *
	   (ret == #u) ]]
   	normal

proc s__getOwnProperty (l, prop) {

   			xret := "o__getOwnProperty" (l, prop);
   			goto [xret = $$undefined] str rlab;

   	str:	idx := "i__toInteger" (prop) with elab;
   			goto [0 <= idx] next rlab;

   	next:	sidx := "i__toString" (idx);

   			goto [sidx = prop] index rlab;

   	index:	str := [l, "@primitiveValue"];
   			len := s-len (str);
   			goto [len <= idx] rlab return;

   	return: rstr := s-nth (str, idx);
   			xret := {{ "d", rstr, $$f, $$t, $$f }};

   	rlab: 	skip;
   	elab:	skip
}
with
{
    ret: 	xret, rlab;
   	err: 	xret, elab;
};

(* **********************
   *** GETOWNPROPERTY ***
   ********************** *)

(*
 *    Name: getOwnProperty 
 * Purpose: Get own property of a (general) object
 *
 *   Specs:
 *
 * 01 - Non-string object, property not defined, return undefined
 * 02 - Non-string object, property defined, return property descriptor
 * 03 - String object, property not defined and not a string index, return undefined
 * 04 - String object, property defined as a string index, return property descriptor
 * 05 - String object, property defined as a non-string index, return property descriptor
 *
 *)

spec getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type) *
	   Cell_o (#l, #prop, None) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") *
	   (ret == $$undefined) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #dx : $$list_type) *
	   Cell_o (#l, #prop, #dx) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") ]]
    [[ Cell_o (#l, #prop, #dx) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") *
	   (ret == #dx) ]]
    normal;
    
    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type) *
	   Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
    [[ Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == $$undefined) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #u : $$list_type) *
	   Cell_s (#l, #prop, "SI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == #u) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #u : $$list_type) *
	   Cell_s (#l, #prop, "NSI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == #u) ]]
   	normal

proc getOwnProperty (l, prop) {

			class := [l, "@class"];

			goto [class = "String"] sgop ogop;

	sgop:	xret := "s__getOwnProperty" (l, prop) with elab;
			goto rlab;

	ogop:	xret := "o__getOwnProperty" (l, prop) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *******************
   *** GETPROPERTY ***
   ******************* *)

(*
 *    Name: getProperty 
 * Purpose: Get property of a (general) object in the entire prototype chain
 *
 *   Specs:
 *
 * 01 - Get the heap value associated with the appropriate Pi (7 unfoldings)
 *)

spec getProperty (l, prop)

	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type) *
	   Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == #gp_aux_1) ]]
	normal

proc getProperty (l, prop) {

			[* unfold Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) *]
	start:	xret := "getOwnProperty" (l, prop) with elab;
			goto [xret = $$undefined] next rlab;

	next:	proto := [l, "@proto"];
			goto [proto = $$null] rlab call;

	call:	xret := "getProperty" (proto, prop) with elab;

			[* fold Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) *]
    rlab:   skip;
    elab:	skip
}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* *** *)
(* GET *)
(* *** *)

(*
 *    Name: get 
 * Purpose: Get the value of a property of a (general) object in the entire prototype chain
 *
 *   Specs:
 *
 * 01 - Property not defined in the prototype chain, return undefined 
 * 02 - Property defined as a data descriptor, get value of the descriptor 
 * 
 * Unsupported:
 *
 * 03 - Property defined as an accessor descriptor
 *)

spec get (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1) ]]
    [[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == $$undefined) ]]
    [[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == $$undefined) * (ret == $$undefined) ]]
    normal

proc get (l, prop) {
			xret := "getProperty" (l, prop) with elab;
			goto [xret = $$undefined] rlab def;		(* Does the field exist?    *)

	def:	d := l-nth (xret, 0);					(* Get the descriptor type  *)
			xret := l-nth (xret, 1);				(* Get the value/getter     *)
			goto [d = "d"] rlab acc;				(* Is it a data descriptor? *)

	acc:	goto [xret = $$undefined] rlab get;		(* Is the getter defined?               *)
	get:	xsc := [xret, "@scope"];				(* Get the scope of the getter          *)
			fun := [xret, "@call"];					(* Get the name of the getter           *)
			xret := fun (xsc, l) with elab;			(* Call the getter, errors could happen *)
			goto [xret = $$empty] undef rlab;
	undef:	xret := $$undefined;

	rlab:	skip;
	elab:	skip
}
with
{
    ret: xret, rlab;
    err: xret, elab;
};

(* ******** *)
(* GETVALUE *)
(* ******** *)

(*
 *    Name: getValue
 * Purpose: Get the value of SOMETHING
 *
 *   Specs:
 *
 * 01-06 - Something is not a reference, just return something
 * 07 - Object reference, undefined
 * 08 - Object reference, defined
 * 09 - Variable reference, lg, undefined
 * 10 - Variable reference, lg, defined
 * 11 - Variable reference, non-lg, directly from the heap
 * 12-13 - Base undefined for both variable and object references, return a reference error 
 *
 * Remaining:
 *
 * Object conversion:
 * 
 * 14-15 - TypeError if undefined or null passed
 * 16-21 - Conversion to Number, String, Boolean, property exists or doesn't 
 *
 * Unsupported:
 *
 * 22-?? - Getters
 *)

spec i__getValue (v)

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : $$object_type, #field : $$string_type) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1)  ]]
    [[ Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "v", #obj, #field }}) * (! (#obj == $lg)) * ((#obj, #field) -> #value) * isNamedProperty(#field) *
       types (#obj : $$object_type, #field : $$string_type) ]]
    [[ ((#obj, #field) -> #value) * (ret == #value) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1)  ]]
    [[ Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : $$object_type, #field : $$string_type) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == $$undefined) ]]
    [[ Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (ret == $$undefined) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == $$undefined) ]]
    [[ Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (ret == $$undefined) ]]
    normal;

    [[ v == $$null ]]
    [[ ret == $$null ]]
    normal;

    [[ (v == #v) * types (#v : $$object_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : $$number_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : $$boolean_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : $$string_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ v == $$undefined ]]
    [[ ret == $$undefined ]]
    normal;
    
	[[ (v == {{ "o", $$undefined, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) ]]
    [[ isReferenceError(ret) ]]
    error;
    
	[[ (v == {{ "v", $$undefined, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) ]]
    [[ isReferenceError(ret) ]]
    error

proc i__getValue (v) {

			goto [(typeOf(v) = $$list_type)] rcand dflt;

    rcand:  rtype := l-nth (v, 0);
            goto [(rtype = "v") or (rtype = "o")] init dflt;

	init:	rbase := l-nth (v, 1);
			rfield := l-nth (v, 2);
			goto [rbase = $$undefined] throw prim;

	prim:	prim := "i__isPrimitive" (rbase);
            goto [prim] is_pr ref;

	is_pr:	xret := "i__toObject" (rbase) with elab;
			xret := "getProperty" (xret, rfield) with elab;
			goto [xret = $$undefined] rlab def;
	def:	d := l-nth (xret, 0);					(* Get the descriptor type *)
			xret := l-nth (xret, 1);				(* Get the value/getter *)
			goto [d = "d"] rlab acc;				(* Is it a data descriptor? *)

	acc:	goto [xret = $$undefined] rlab get;		(* Is the getter defined? *)
	get:	xsc := [xret, "@scope"];				(* Get the scope of the getter *)
			fun := [xret, "@call"];					(* Get the name of the getter *)
			xret := fun (xsc, rbase) with elab;		(* Call the getter, errors could happen *)
			goto [xret = $$empty] undef rlab;
	undef:	xret := $$undefined;

	ref:	goto [l-nth (v, 0) = "o"] oref vref;

	oref:	xret := "get" (rbase, rfield) with elab;
			goto rlab;

	vref:	goto [rbase = $lg] lg er;

	lg:		xret := "get" (rbase, rfield) with elab;
			goto rlab;

	er:		xret := [rbase, rfield];
			goto rlab;

	dflt:	xret := v;
	rlab:	skip;

	throw:  xret := "ReferenceError" ();
    elab:   skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *********** *)
(* HASPROPERTY *)
(* *********** *)

(*
 *    Name: hasProperty 
 * Purpose: Does the given object have a given property in its prototype chain?
 *
 *   Specs:
 *
 * 01 - Property not defined in the prototype chain, return false 
 * 02 - Property defined in the prototype chain, return true
 * 
 *)

spec hasProperty (l, prop)

	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$list_type) *
	   Pi (#l, #prop, #cls, $$undefined, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #cls, $$undefined, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == $$f) ]]
	normal;

	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$list_type, #desc : $$list_type) *
	   Pi (#l, #prop, #cls, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #cls, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == $$t) ]]
	normal

proc hasProperty (l, prop) {
			xret := "getProperty" (l, prop) with elab;

	rlab:	xret := not (xret = $$undefined);
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err:	xret, elab;
};

(* ************** *)
(* DELETEPROPERTY *)
(* ************** *)

(*
 *    Name: deleteProperty 
 * Purpose: Delete a given property of a given object, if possible
 *
 *   Specs:
 *
 * 01-02 - Property not defined in the object, return true 
 * 03 - Property defined, configurable, delete, return true
 * 04 - Property defined, not configurable, do not throw, return false
 * 05 - Property defined, not configurable, throw a TypeError
 * 
 *)

spec deleteProperty (l, prop, throw)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #clsx : $$list_type) *
	   Pi (#l, #prop, #clsx, $$undefined, {{ #l }}, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #clsx, $$undefined, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == $$t) ]]
	normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #clsx : $$list_type) *
	   Pi (#l, #prop, #clsx, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (#gp_aux_2 == #l :: #lp :: #rest) * types (#lp : $$object_type, #rest : $$list_type) ]]
	[[ Pi (#l, #prop, #clsx, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == $$t) ]]
	normal;

	[[ (l == #l) * (prop == #prop) *
	   types (#l : $$object_type, #prop : $$string_type, #clsx : $$list_type, #desc : $$list_type) *
	   Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * desc_conf(#desc, $$t) ]]
	[[ Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * (ret == $$t) ]]
	normal;

	[[ (l == #l) * (prop == #prop) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #clsx : $$list_type, #desc : $$list_type) *
	   Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * desc_conf(#desc, $$f) ]]
	[[ Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * (ret == $$f) ]]
	normal;

	[[ (l == #l) * (prop == #prop) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #clsx : $$list_type, #desc : $$list_type) *
	   Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * desc_conf(#desc, $$f) ]]
	[[ Pi (#l, #prop, #clsx, #desc, {{ #l }}, #gp_aux_3, #gp_aux_4) * isTypeError(ret) ]]
	error
	
proc deleteProperty (l, prop, throw) {

			[* unfold Pi (#l, #prop, #clsx, #desc, #g_aux_2, #g_aux_3, #g_aux_4) *]
			xret := "getOwnProperty" (l, prop) with elab;
			[* fold Pi (#l, #prop, #clsx, #desc, #g_aux_2, #g_aux_3, #g_aux_4) *]
			goto [xret = $$undefined] dt cont;

	cont:	c := l-nth (xret, 4);
			goto [c] del reject;
	del:	delete (l, prop);

	dt:		xret := $$t;
			goto rlab;

	df:		xret := $$f;
	rlab:	skip;

    reject: goto [throw] tt df;

    tt:     xret := "TypeError" ();
    elab:   skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

(* ****** *)
(* CANPUT *)
(* ****** *)

spec canPut (l, prop)

    (* 01 - Property not defined at all, returning "@extensible" *)
    [[ (l == #l) * (prop == #prop) *
	   types(#ext : $$boolean_type) *
	   Pi (#l, #prop, #g_aux_0, $$undefined, #g_aux_2, #g_aux_3, #g_aux_4) *
       ((#l, "@extensible") -> #ext) ]]
    [[ Pi (#l, #prop, #g_aux_0, $$undefined, #g_aux_2, #g_aux_3, #g_aux_4) *
       ((#l, "@extensible") -> #ext) *
	   (ret == #ext) ]]
    normal;

	(* 02 - Property defined in the object itself, data descriptor, returning writable *)
	[[ (l == #l) * (prop == #prop) *
	   types(#writ : $$boolean_type) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) * DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, #writ) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) *
	   (ret == #writ) ]]
	normal;
	
	(* 03 - Property defined as a data descriptor outside, but object not extensible, return false *)
	[[ (l == #l) * (prop == #prop) *
	   types (#g_aux_2 : $$list_type, #l : $$object_type, #lp : $$object_type, #other : $$list_type) *
       Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
		   DataDescriptor(#g_aux_1) * (#g_aux_2 == (#l :: #lp :: #other)) * ((#l, "@extensible") -> $$f) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> $$f) * (ret == $$f) ]]
	normal;

	(* 04 - Property defined as a data descriptor outside, object extensible, return writable *)
	[[ (l == #l) * (prop == #prop) *
	   types (#g_aux_2 : $$list_type, #l : $$object_type, #lp : $$object_type, #other : $$list_type, #writ : $$boolean_type) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, #writ) * (#g_aux_2 == (#l :: #lp :: #other)) *
	   ((#l, "@extensible") -> $$t) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> $$t) * (ret == #writ) ]]
	normal;
	
	(* 05 - Property defined as an accessor descriptor, return (setter <> undefined) *)
	[[ (l == #l) * (prop == #prop) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   AccessorDescriptor(#g_aux_1) * desc_set(#g_aux_1, #set) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   (ret == (not (#set = $$undefined))) ]]
	normal

proc canPut (l, prop) {

			[* unfold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
            xret := "getOwnProperty" (l, prop) with elab;
			[* fold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
	op:		goto [xret = $$undefined] nop odesc; 	(* Does the own property exist? *)

	odesc:	d := l-nth (xret, 0);						(* It does; get the descriptor type *)
			goto [d = "d"] odd nop;					    (* Is the descriptor a data descriptor? *)

	odd:	xret := l-nth (xret, 2);					(* It is; return the Writable attribute *)
			goto rlab;

	nop:	e := [l, "@extensible"];				   (* Get the extensible property *)
			xret := "getProperty" (l, prop) with elab; (* Does the property exist? *)
			goto [xret = $$undefined] ext desc;		   (* It doesn't; return extensible *)

	desc:	d := l-nth (xret, 0);					(* Get the descriptor type *)
			v := l-nth (xret, 2);					(* Get the writable/setter *)
			goto [d = "d"] dd ad;					(* Is it a data descriptor? *)

	dd:		goto [e] wr ext;						(* Yes; is the object extensible? *)
	wr:		xret := v;								(* Yes; return writable *)
			goto rlab;

	ad:		xret := not (v = $$undefined); 			(* Accessor descriptor *)
			goto rlab;

	ext:	xret := e;								(* Return extensible *)

    rlab:   skip;
    elab:	skip
}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* ******************** *)
(* O__DEFINEOWNPROPERTY *)
(* ******************** *)

(*
 *    Name: defineOwnProperty 
 * Purpose: Define a property of an object
 *
 *   Specs:
 *
 * 01-04 - Current undefined, object not extensible, reject
 * 
 * 
 *)

spec o__defineOwnProperty (l, prop, desc, throw)

    (* 01 - Current is undefined, object is not extensible, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> $$f) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> $$f) *
	   isTypeError(err) ]]
    error;

    (* 02 - Current is undefined, object is not extensible, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> $$f) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> $$f) *
	   (ret == $$f) ]]
    normal;

    (* 03 - Current is undefined, object is not extensible, string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type) *
	   ((#l, "@class") -> #cls) * 
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> $$f) ]]
    [[ ((#l, "@class") -> #cls) * ((l, "@primitiveValue") -> #pv) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> $$f) *
	   isTypeError(err) ]]
    error;

    (* 04 - Current is undefined, object is not extensible, string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> $$f) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> $$f) *
	   (ret == $$f) ]]
    normal;

	(* Current is undefined, object is extensible, non-string, data descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   DataDescriptor (#desc) *
	   ((#l, "@extensible") -> $$t) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #desc) * ((#l, "@extensible") -> $$t) *
	   (ret == $$t) ]]
    normal;
    
    (* Current is undefined, object is extensible, non-string, accessor descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   AccessorDescriptor (#desc) *
	   ((#l, "@extensible") -> $$t) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #desc) * ((#l, "@extensible") -> $$t) *
	   (ret == $$t) ]]
    normal;
























    (* Current is defined, configurable is true, data descriptor, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #cls : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
       DataDescriptor(#desc) * desc_conf(#dcur, $$t) *
       ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   ((#l, "@extensible") -> #ext) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #desc) * ((#l, "@extensible") -> #ext) *
	   (ret == $$t) ]]
    normal;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
       DataDescriptor(#desc) * desc_conf(#desc, $$t) * desc_conf(#dcur, $$f) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
       DataDescriptor(#desc) * desc_conf(#desc, $$t) * desc_conf(#dcur, $$f) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   (ret == $$f) ]]
	normal;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
	   types (#ed : $$boolean_type, #ec : $$boolean_type) *
       DataDescriptor(#desc) * desc_conf(#desc, $$f) * desc_conf(#dcur, $$f) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
	   types (#ed : $$boolean_type, #ec : $$boolean_type) *
       DataDescriptor(#desc) * desc_conf(#desc, $$f) * desc_conf(#dcur, $$f) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   (ret == $$f) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$t) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
	   types (#enum : $$boolean_type) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, $$f) * desc_conf(#dcur, $$f) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, $$t) * desc_writ(#dcur, $$f) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == $$f) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type) *
	   types (#enum : $$boolean_type) *
       DataDescriptor(#desc) * DataDescriptor(#dcur) *
	   desc_conf(#desc, $$f) * desc_conf(#dcur, $$f) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, $$t) * desc_writ(#dcur, $$f) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #dcur) *
	   (ret == $$f) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writable is true, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type, #throw : $$boolean_type) *
	   types (#enum : $$boolean_type) *
       DataDescriptor(#desc) * DataDescriptor(#dcur) *
	   desc_conf(#desc, $$f) * desc_conf(#dcur, $$f) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#dcur, $$t) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * ((#l, #prop) -> #desc) *
	   (ret == $$t) ]]
	normal;

	(* Current is defined, data descriptor, writable, sending only value, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #dcur : $$list_type, #throw : $$boolean_type, #ext : $$boolean_type, #throw : $$boolean_type) *
       (#desc == {{ "g", $$empty, $$empty, #gval, $$empty, $$empty, $$empty }}) * (! (#gval == $$empty)) *
	   DataDescriptor(#dcur) * desc_writ(#dcur, $$t) * desc_enum(#dcur, #dec) * desc_conf(#dcur, #dcc) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   ((#l, #prop) -> {{ "d", #gval, $$t, #dec, #dcc }}) *
	   (ret == $$t) ]]
	normal

proc o__defineOwnProperty (l, prop, desc, throw) {

			xret := $$t;

			current := "getOwnProperty" (l, prop) with celab;
			extensible := [l, "@extensible"];

			goto [(current = $$undefined)] cuf getall;
	cuf:	goto [(extensible = $$f)] reject l4;

	l4:		gd := "i__isGenericDescriptor" (desc);
			dd := "i__isDataDescriptor" (desc);

			goto [gd or dd] l4a1 l4b;

	l4a1:	ndesc := "i__toDataDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	l4b:	ndesc := "i__toAccessorDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	getall:	goto [l-nth (desc, 0) = "d"] ddd odd;

			(* Data *)
	ddd:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := l-nth (desc, 1);
			dw := l-nth (desc, 2);
			dg := $$empty;
			ds := $$empty;
			goto l5;

	odd:	goto [l-nth (desc, 0) = "a"] add gdd;

			(* Accessor *)
	add:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := $$empty;
			dw := $$empty;
			dg := l-nth (desc, 1);
			ds := l-nth (desc, 2);
			goto l5;

			(* Generic *)
	gdd:	de := l-nth (desc, 1);
			dc := l-nth (desc, 2);
			dv := l-nth (desc, 3);
			dw := l-nth (desc, 4);
			dg := l-nth (desc, 5);
			ds := l-nth (desc, 6);

	l5:		goto [(de = $$empty) and (dc = $$empty) and (dv = $$empty) and
			      (dw = $$empty) and (dg = $$empty) and (ds = $$empty)] acc_t l6;

	l6:		goto [l-nth (current, 0) = "d"] chd cha;

	chd:	goto [(dg = $$empty) and (ds = $$empty)] chd1 l7;
	chd1:	t1 := "i__sameValue" (dc, l-nth (current, 4));
			goto [t1] chd2 l7;
	chd2:	t2 := "i__sameValue" (de, l-nth (current, 3));
			goto [t2] chd3 l7;
	chd3:	t3 := "i__sameValue" (dw, l-nth (current, 2));
			goto [t3] chd4 l7;
	chd4:	t4 := "i__sameValue" (dv, l-nth (current, 1));
			goto [t4] acc_t l7;

	cha:	goto [(dv = $$empty) and (dw = $$empty)] cha1 l7;
	cha1:	t1 := "i__sameValue" (dc, l-nth (current, 4));
			goto [t1] cha2 l7;
	cha2:	t2 := "i__sameValue" (de, l-nth (current, 3));
			goto [t2] cha3 l7;
	cha3:	t3 := "i__sameValue" (ds, l-nth (current, 2));
			goto [t3] cha4 l7;
	cha4:	t4 := "i__sameValue" (dg, l-nth (current, 1));
			goto [t4] acc_t l7;

	l7:		cc := l-nth (current, 4);
			ce := l-nth (current, 3);
			goto [(cc = $$f)] l71 l8;
	l71:	goto [(dc = $$t)] reject l72;
	l72:	goto [de = $$empty] l8 l73;
	l73:	goto [not (ce = de)] reject l8;

	l8:		ct := l-nth (current, 0);
			cvg := l-nth (current, 1);
			cws := l-nth (current, 2);

			gd := "i__isGenericDescriptor" (desc);
			goto [gd] l12 l9;

	l9:		cdd := "i__isDataDescriptor" (current);
			ddd := "i__isDataDescriptor" (desc);

			goto [not (cdd = ddd)] l9a l10;

	l9a:	goto [cc = $$f] reject change;
	change:	goto [cdd = $$t] toa tod;
	toa:	goto [dg = $$empty] sg gs;
	sg:		dg := $$undefined;
	gs:		goto [ds = $$empty] ss ge1;
	ss:		ds := $$undefined;
	ge1:	goto [de = $$empty] se1 gc1;
	se1:	de := ce;
	gc1:	goto [dc = $$empty] sc1 spa;
	sc1:	dc := cc;
	spa:	[l, prop] := {{ "a", dg, ds, de, dc }};
			goto acc_t;

	tod:	goto [dv = $$empty] sv gw;
	sv:		dv := $$undefined;
	gw:		goto [dw = $$empty] sw ge2;
	sw:		dw := $$f;
	ge2:	goto [de = $$empty] se2 gc2;
	se2:	de := ce;
	gc2:	goto [dc = $$empty] sc2 spd;
	sc2:	dc := cc;
	spd:	[l, prop] := {{ "d", dv, dw, de, dc }};
			goto acc_t;

	l10:	goto [cdd = $$t] l10a l11;

	l10a:	goto [cc = $$f] l10ai l12;
	l10ai:	goto [(cws = $$f) and (dw = $$t)] reject l10aii;
	l10aii:	goto [(cws = $$f) and (not (dv = $$empty))] sv l12;
	sv:		t1 := "i__sameValue" (cvg, dv);
	 		goto [not t1] reject l12;

	l11: 	t1 := "i__sameValue" (dg, l-nth (current, 1));
			t2 := "i__sameValue" (ds, l-nth (current, 2));
			goto [(cc = $$f) and
	             (((not (dg = $$empty)) and (not t1)) or
	              ((not (ds = $$empty)) and (not t2)))] reject l12;

	l12:	re := de;
			rc := dc;
			goto [de = $$empty] rec red;
	rec:	re := l-nth (current, 3);
	red:	goto [dc = $$empty] rcd rd;
	rcd:	rc := l-nth (current, 4);

	rd: 	goto [ct = "d"] l12d l12a;

	l12d:	rv := dv;
			rw := dw;
			goto [dv = $$empty] rvc rvd;
	rvc:	rv := l-nth (current, 1);
	rvd:	goto [dw = $$empty] rwd setd;
	rwd:	rw := l-nth (current, 2);
	setd:	[l, prop] := {{ "d", rv, rw, re, rc }};
			goto acc_t;

	l12a:	rg := dg;
			rs := ds;
			goto [dg = $$empty] rgc rgd;
	rgc:	rg := l-nth (current, 1);
	rgd:	goto [ds = $$empty] rsd seta;
	rsd:	rs := l-nth (current, 2);
	seta:	[l, prop] := {{ "a", rg, rs, re, rc }};
			goto acc_t;

	acc_t:	xret := $$t;
			goto rlab;

	acc_f:	xret := $$f;
	rlab:	skip;

	celab:	xerr := current;
			goto elab;

    reject: goto [throw] tt acc_f;
    tt:     xerr := "TypeError" ();
    elab:   skip
}
with
{
	ret: xret, rlab;
	err: xerr, elab;
};