import javert_js_predicates.jsil; 

spec TypeError_call(xsc, vthis, v)
[[ types() * (xsc == _lvar_xsc) * (v == undefined) * (vthis == _lvar_vthis) ]]
[[ types() * (xret == _$l_xret) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_834, true) * MetaData (_$l__lvar_834, null) * empty_fields(_$l__lvar_834 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_834, "@proto") ->@d $lterr_proto) * ((_$l__lvar_834, "@extensible") ->@d true) * ((_$l__lvar_834, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_834) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc TypeError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lterr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec TypeError(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_744, true) * MetaData (_$l__lvar_744, null) * empty_fields(_$l__lvar_744 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_744, "@proto") ->@d $lterr_proto) * ((_$l__lvar_744, "@extensible") ->@d true) * ((_$l__lvar_744, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_744) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc TypeError (v) {
			xret := "TypeError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__isCallable(l)
[[ types() * (l == _$l_l) * ((_$l_#md, "@call") ->@d none) * MetaData (_$l_l, _$l_#md) ]]
[[ types() * (xret == false) * (l == _$l_l) * ((_$l_#md, "@call") ->@d none) * MetaData (_$l_l, _$l_#md) ]]
normal;

 [[ types() * (! (#y == none)) * (l == _$l_l) * ((_$l_#md, "@call") ->@d #y) * MetaData (_$l_l, _$l_#md) ]]
[[ types() * (xret == true) * (l == _$l_l) * ((_$l_#md, "@call") ->@d #y) * MetaData (_$l_l, _$l_#md) ]]
normal

proc i__isCallable (l) {
			xret := false;
			goto [((typeOf l) = Obj)] obj rlab;
	obj:		m := metadata (l);
			xret := hasField(m,"@call");
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec defineOwnProperty(l, prop, desc, throw)
[[ types(#throw : Bool, #prop : Str, #desc : List, _lvar_402 : Bool, #cls : Str, _lvar_401 : Bool, _lvar_400 : Bool) * (#desc == {{ "d", _lvar_399, _lvar_400, _lvar_401, _lvar_402 }}) * (! (_lvar_399 == empty)) * (! (#cls == "Array")) * (! (#cls == "String")) * (desc == {{ "d", _lvar_399, _lvar_400, _lvar_401, _lvar_402 }}) * (throw == #throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#throw : Bool, #prop : Str, #desc : List, #cls : Str, _lvar_405 : Bool, _lvar_406 : Bool, _lvar_404 : Bool) * (#desc == {{ "d", _lvar_403, _lvar_404, _lvar_405, _lvar_406 }}) * (! (_lvar_403 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_403, _lvar_404, _lvar_405, _lvar_406 }}) ]]
normal;

 [[ types(#dcc : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, #dec : Bool) * (#dcur == {{ "d", _lvar_415, true, #dec, #dcc }}) * (#desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (! (_lvar_415 == empty)) * (! (#gval == empty)) * (! (#cls == "Array")) * (desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (throw == #throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_415, true, #dec, #dcc }}) ]]
[[ types(#dcc : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, #dec : Bool) * (! (#gval == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", #gval, true, #dec, #dcc }}) ]]
normal;

 [[ types(_lvar_444 : Bool, _lvar_445 : Bool, _lvar_446 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, _lvar_436 : Bool, #cls : Str, _lvar_437 : Bool) * (#dcur == {{ "d", _lvar_435, _lvar_436, _lvar_437, true }}) * (#desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, _lvar_446 }}) * (! (_lvar_443 == empty)) * (! (_lvar_435 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, _lvar_446 }}) * (throw == #throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_435, _lvar_436, _lvar_437, true }}) ]]
[[ types(_lvar_448 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_450 : Bool, _lvar_449 : Bool) * (#desc == {{ "d", _lvar_447, _lvar_448, _lvar_449, _lvar_450 }}) * (! (_lvar_447 == empty)) * (! (#cls == "Array")) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_447, _lvar_448, _lvar_449, _lvar_450 }}) ]]
normal;

 [[ types(_lvar_456 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, #enum : Bool) * (#dcur == {{ "d", _lvar_463, true, #enum, false }}) * (#desc == {{ "d", _lvar_455, _lvar_456, #enum, false }}) * (! (_lvar_463 == empty)) * (! (_lvar_455 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_455, _lvar_456, #enum, false }}) * (throw == #throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_463, true, #enum, false }}) ]]
[[ types(_lvar_474 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, #enum : Bool, _lvar_472 : Bool, _lvar_473 : Bool) * (#desc == {{ "d", _lvar_471, _lvar_472, _lvar_473, _lvar_474 }}) * (! (_lvar_471 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_471, _lvar_472, _lvar_473, _lvar_474 }}) ]]
normal;

 [[ types(#prop : Str, #cls : Str) * (! (#cls == "Array")) * (desc == #desc) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str, #cls : Str) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * Extensible (_$l__lvar_487, true) * MetaData (_$l__lvar_487, null) * empty_fields(_$l__lvar_487 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_487, "@proto") ->@d $lterr_proto) * ((_$l__lvar_487, "@extensible") ->@d true) * ((_$l__lvar_487, "@class") ->@d "Error") * ((_$l_#md, "@extensible") ->@d false) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_487) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#prop : Str, #cls : Str) * (! (#cls == "Array")) * (desc == #desc) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str, #cls : Str) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_513 : Bool, _lvar_525 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, _lvar_526 : Bool, #cls : Str, _lvar_514 : Bool) * (#dcur == {{ "d", _lvar_524, _lvar_525, _lvar_526, false }}) * (#desc == {{ "d", _lvar_512, _lvar_513, _lvar_514, true }}) * (! (_lvar_524 == empty)) * (! (_lvar_512 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_512, _lvar_513, _lvar_514, true }}) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_524, _lvar_525, _lvar_526, false }}) ]]
[[ types(_lvar_534 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, _lvar_535 : Bool, #cls : Str, _lvar_536 : Bool) * (#dcur == {{ "d", _lvar_533, _lvar_534, _lvar_535, _lvar_536 }}) * (! (_lvar_533 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_533, _lvar_534, _lvar_535, _lvar_536 }}) * Extensible (_$l__lvar_532, true) * MetaData (_$l__lvar_532, null) * empty_fields(_$l__lvar_532 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_532, "@proto") ->@d $lterr_proto) * ((_$l__lvar_532, "@extensible") ->@d true) * ((_$l__lvar_532, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_532) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_513 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_530 : Bool, _lvar_514 : Bool) * (#dcur == {{ "a", _lvar_529, _lvar_528, _lvar_530, false }}) * (#desc == {{ "d", _lvar_512, _lvar_513, _lvar_514, true }}) * (! (_lvar_529 == empty)) * (! (_lvar_528 == empty)) * (! (_lvar_512 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_512, _lvar_513, _lvar_514, true }}) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_529, _lvar_528, _lvar_530, false }}) ]]
[[ types(_lvar_540 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_539 : Bool) * (#dcur == {{ "a", _lvar_538, _lvar_537, _lvar_539, _lvar_540 }}) * (! (_lvar_538 == empty)) * (! (_lvar_537 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_538, _lvar_537, _lvar_539, _lvar_540 }}) * Extensible (_$l__lvar_532, true) * MetaData (_$l__lvar_532, null) * empty_fields(_$l__lvar_532 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_532, "@proto") ->@d $lterr_proto) * ((_$l__lvar_532, "@extensible") ->@d true) * ((_$l__lvar_532, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_532) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_542 : Bool, _lvar_543 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_554 : Bool, _lvar_555 : Bool) * (#dcur == {{ "d", _lvar_553, _lvar_554, _lvar_555, false }}) * (#desc == {{ "d", _lvar_541, _lvar_542, _lvar_543, true }}) * (! (_lvar_553 == empty)) * (! (_lvar_541 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_541, _lvar_542, _lvar_543, true }}) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_553, _lvar_554, _lvar_555, false }}) ]]
[[ types(_lvar_562 : Bool, #prop : Str, #dcur : List, #desc : List, _lvar_563 : Bool, #ext : Bool, #cls : Str, _lvar_564 : Bool) * (#dcur == {{ "d", _lvar_561, _lvar_562, _lvar_563, _lvar_564 }}) * (! (_lvar_561 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_561, _lvar_562, _lvar_563, _lvar_564 }}) ]]
normal;

 [[ types(_lvar_542 : Bool, _lvar_559 : Bool, _lvar_543 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str) * (#dcur == {{ "a", _lvar_558, _lvar_557, _lvar_559, false }}) * (#desc == {{ "d", _lvar_541, _lvar_542, _lvar_543, true }}) * (! (_lvar_558 == empty)) * (! (_lvar_557 == empty)) * (! (_lvar_541 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_541, _lvar_542, _lvar_543, true }}) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_558, _lvar_557, _lvar_559, false }}) ]]
[[ types(#prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_567 : Bool, _lvar_568 : Bool) * (#dcur == {{ "a", _lvar_566, _lvar_565, _lvar_567, _lvar_568 }}) * (! (_lvar_566 == empty)) * (! (_lvar_565 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_566, _lvar_565, _lvar_567, _lvar_568 }}) ]]
normal;

 [[ types(#ed : Bool, _lvar_582 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_570 : Bool, #ec : Bool) * (#dcur == {{ "d", _lvar_581, _lvar_582, #ec, false }}) * (#desc == {{ "d", _lvar_569, _lvar_570, #ed, false }}) * (! (_lvar_581 == empty)) * (! (_lvar_569 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_569, _lvar_570, #ed, false }}) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_581, _lvar_582, #ec, false }}) ]]
[[ types(#ed : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_593 : Bool, _lvar_591 : Bool, #ec : Bool, _lvar_592 : Bool) * (#dcur == {{ "d", _lvar_590, _lvar_591, _lvar_592, _lvar_593 }}) * (! (_lvar_590 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * Extensible (_$l__lvar_589, true) * MetaData (_$l__lvar_589, null) * empty_fields(_$l__lvar_589 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_589, "@proto") ->@d $lterr_proto) * ((_$l__lvar_589, "@extensible") ->@d true) * ((_$l__lvar_589, "@class") ->@d "Error") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_590, _lvar_591, _lvar_592, _lvar_593 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_589) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#ed : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_570 : Bool, #ec : Bool) * (#dcur == {{ "a", _lvar_586, _lvar_585, #ec, false }}) * (#desc == {{ "d", _lvar_569, _lvar_570, #ed, false }}) * (! (_lvar_586 == empty)) * (! (_lvar_585 == empty)) * (! (_lvar_569 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_569, _lvar_570, #ed, false }}) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_586, _lvar_585, #ec, false }}) ]]
[[ types(#ed : Bool, _lvar_596 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, _lvar_597 : Bool, #cls : Str, #ec : Bool) * (#dcur == {{ "a", _lvar_595, _lvar_594, _lvar_596, _lvar_597 }}) * (! (_lvar_595 == empty)) * (! (_lvar_594 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * Extensible (_$l__lvar_589, true) * MetaData (_$l__lvar_589, null) * empty_fields(_$l__lvar_589 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_589, "@proto") ->@d $lterr_proto) * ((_$l__lvar_589, "@extensible") ->@d true) * ((_$l__lvar_589, "@class") ->@d "Error") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_595, _lvar_594, _lvar_596, _lvar_597 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_589) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#ed : Bool, #prop : Str, #dcur : List, #desc : List, _lvar_599 : Bool, #ext : Bool, #cls : Str, #ec : Bool, _lvar_611 : Bool) * (#dcur == {{ "d", _lvar_610, _lvar_611, #ec, false }}) * (#desc == {{ "d", _lvar_598, _lvar_599, #ed, false }}) * (! (_lvar_610 == empty)) * (! (_lvar_598 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_598, _lvar_599, #ed, false }}) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_610, _lvar_611, #ec, false }}) ]]
[[ types(#ed : Bool, #prop : Str, #dcur : List, #desc : List, _lvar_619 : Bool, #ext : Bool, #cls : Str, _lvar_621 : Bool, #ec : Bool, _lvar_620 : Bool) * (#dcur == {{ "d", _lvar_618, _lvar_619, _lvar_620, _lvar_621 }}) * (! (_lvar_618 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_618, _lvar_619, _lvar_620, _lvar_621 }}) ]]
normal;

 [[ types(#ed : Bool, #prop : Str, #dcur : List, #desc : List, _lvar_599 : Bool, #ext : Bool, #cls : Str, #ec : Bool) * (#dcur == {{ "a", _lvar_615, _lvar_614, #ec, false }}) * (#desc == {{ "d", _lvar_598, _lvar_599, #ed, false }}) * (! (_lvar_615 == empty)) * (! (_lvar_614 == empty)) * (! (_lvar_598 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_598, _lvar_599, #ed, false }}) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_615, _lvar_614, #ec, false }}) ]]
[[ types(#ed : Bool, _lvar_625 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #cls : Str, _lvar_624 : Bool, #ec : Bool) * (#dcur == {{ "a", _lvar_623, _lvar_622, _lvar_624, _lvar_625 }}) * (! (_lvar_623 == empty)) * (! (_lvar_622 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_623, _lvar_622, _lvar_624, _lvar_625 }}) ]]
normal;

 [[ types(#prop : Str, #dcur : List, #desc : List, #ext : Bool, #en : Bool, #cls : Str) * (#dcur == {{ "d", _lvar_634, false, #en, false }}) * (#desc == {{ "d", _lvar_626, true, #en, false }}) * (! (_lvar_634 == empty)) * (! (_lvar_626 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_626, true, #en, false }}) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_634, false, #en, false }}) ]]
[[ types(_lvar_644 : Bool, _lvar_645 : Bool, #prop : Str, #dcur : List, #desc : List, #ext : Bool, #en : Bool, #cls : Str, _lvar_646 : Bool) * (#dcur == {{ "d", _lvar_643, _lvar_644, _lvar_645, _lvar_646 }}) * (! (_lvar_643 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_643, _lvar_644, _lvar_645, _lvar_646 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_642) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_642, true) * MetaData (_$l__lvar_642, null) * empty_fields(_$l__lvar_642 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_642, "@proto") ->@d $lterr_proto) * ((_$l__lvar_642, "@extensible") ->@d true) * ((_$l__lvar_642, "@class") ->@d "Error") ]]
error;

 [[ types(#prop : Str, #dcur : List, #desc : List, #ext : Bool, #en : Bool, #cls : Str) * (#dcur == {{ "d", _lvar_659, false, #en, false }}) * (#desc == {{ "d", _lvar_651, true, #en, false }}) * (! (_lvar_659 == empty)) * (! (_lvar_651 == empty)) * (! (#cls == "Array")) * (desc == {{ "d", _lvar_651, true, #en, false }}) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_659, false, #en, false }}) ]]
[[ types(_lvar_668 : Bool, #prop : Str, #dcur : List, #desc : List, _lvar_669 : Bool, #ext : Bool, #en : Bool, #cls : Str, _lvar_670 : Bool) * (#dcur == {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) * (! (_lvar_667 == empty)) * (desc == _lvar_desc) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) ]]
normal

proc defineOwnProperty (l, prop, desc, throw) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "Array")] adop odop;
	adop:		xret := "a__defineOwnProperty"(l, prop, desc, throw) with elab;
			goto rlab;
	odop:		xret := "o__defineOwnProperty"(l, prop, desc, throw) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__strictEquality(v1, v2)
[[ types() * (#v1 == #v2) * (v2 == #v2) * (v1 == #v1) ]]
[[ types() * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (! (#v1 == #v2)) * (v2 == #v2) * (v1 == #v1) ]]
[[ types() * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__strictEquality (v1, v2) {
			xret := (v1 = v2);
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Error_construct(xsc, vthis, v)
[[ types() * (xsc == _lvar_xsc) * (v == undefined) * (vthis == _$l_#vthis) * Extensible (_$l_#mvt, true) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@extensible") ->@d #oe) * ((_$l_#mvt, "@class") ->@d #oc) * Extensible (_$l_#vthis, true) * MetaData (_$l_#vthis, _$l_#mvt) ]]
[[ types() * (xret == _$l_#vthis) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l_#mvt, true) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@extensible") ->@d true) * ((_$l_#mvt, "@class") ->@d "Error") * Extensible (_$l_#vthis, true) * MetaData (_$l_#vthis, _$l_#mvt) ]]
normal;

 [[ types(#m : Str) * (xsc == _lvar_xsc) * (v == #m) * (vthis == _$l_#vthis) * ((_$l_#mvt, "@extensible") ->@d #oe) * ((_$l_#mvt, "@class") ->@d #oc) * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d #om) ]]
[[ types(#m : Str) * (xret == _$l_#vthis) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * ((_$l_#mvt, "@extensible") ->@d true) * ((_$l_#mvt, "@class") ->@d "Error") * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d {{ "d", #m, true, false, true }}) ]]
normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;
			m := metadata (vthis);
			[m, "@class"] := "Error";
			[m, "@extensible"] := true;
			goto [(v = undefined)] rlab mess;
	mess:		xerr := "i__toString"(v) with elab;
			[xret, "message"] := {{ "d", xerr, true, false, true }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xerr, elab;
};


spec canPut(l, prop)
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #ext : Bool, #lcls : List) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #ext : Bool, #lcls : List) * (xret == #ext) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_94, #writ, _lvar_96, _lvar_97 }}, {{ #l }}, #lcls, #lpv) * types(#l : Obj, _lvar_97 : Bool, #lpv : List, #prop : Str, #d : List, _lvar_96 : Bool, #lcls : List, #writ : Bool) * (#d == {{ "d", _lvar_94, #writ, _lvar_96, _lvar_97 }}) * (! (_lvar_94 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, {{ #l }}, #lcls, #lpv) * types(#l : Obj, #lpv : List, #prop : Str, #d : List, #lcls : List, #writ : Bool) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_100, _lvar_101, _lvar_102, _lvar_103 }}, ({{ _$l_#l, #lp }} @ #other), #lcls, #lpv) * types(#lpv : List, _lvar_101 : Bool, #ls : List, #prop : Str, #d : List, _lvar_103 : Bool, _lvar_102 : Bool, #lcls : List, #other : List) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_100, _lvar_101, _lvar_102, _lvar_103 }}) * (! (_lvar_100 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, #other : List) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_104, #writ, _lvar_106, _lvar_107 }}, ({{ _$l_#l, #lp }} @ #other), #lcls, #lpv) * types(_lvar_107 : Bool, #lpv : List, #ls : List, #prop : Str, #d : List, _lvar_106 : Bool, #lcls : List, #writ : Bool, #other : List) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_104, #writ, _lvar_106, _lvar_107 }}) * (! (_lvar_104 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, #writ : Bool, #other : List) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal

proc canPut (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	op:		goto [(xret = undefined)] nop odesc;
	odesc:		d := l-nth(xret, 0.);
			goto [(d = "d")] odd nop;
	odd:		xret := l-nth(xret, 2.);
			goto rlab;
	nop:		m := metadata (l);
			e := [m, "@extensible"];
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] ext desc;
	desc:		d := l-nth(xret, 0.);
			v := l-nth(xret, 2.);
			goto [(d = "d")] dd ad;
	dd:		goto [e] wr ext;
	wr:		xret := v;
			goto rlab;
	ad:		xret := (not (v = undefined));
			goto rlab;
	ext:		xret := e;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec setupInitialHeap()
[[ types() * Extensible (_$l__lvar_840, true) * MetaData (_$l__lvar_840, null) * empty_fields(_$l__lvar_840 : -{  }-) * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_839) * empty_fields($lbool_proto : -{  }-) * Extensible (_$l__lvar_839, true) * MetaData (_$l__lvar_839, null) * empty_fields(_$l__lvar_839 : -{  }-) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_838) * empty_fields($lnum_proto : -{  }-) * Extensible (_$l__lvar_837, true) * MetaData (_$l__lvar_837, null) * empty_fields(_$l__lvar_837 : -{  }-) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_836) * empty_fields($lerr_proto : -{  }-) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_841) * empty_fields($lobj_proto : -{  }-) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_835) * empty_fields($lop_hasOwnProperty : -{  }-) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_842) * empty_fields($lg : -{  }-) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_837) * empty_fields($lerr : -{  }-) * Extensible (_$l__lvar_838, true) * MetaData (_$l__lvar_838, null) * empty_fields(_$l__lvar_838 : -{  }-) * Extensible (_$l__lvar_841, true) * MetaData (_$l__lvar_841, null) * empty_fields(_$l__lvar_841 : -{  }-) * Extensible (_$l__lvar_835, true) * MetaData (_$l__lvar_835, null) * empty_fields(_$l__lvar_835 : -{  }-) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_840) * empty_fields($lfun_proto : -{  }-) * Extensible (_$l__lvar_842, true) * MetaData (_$l__lvar_842, null) * empty_fields(_$l__lvar_842 : -{  }-) * Extensible (_$l__lvar_836, true) * MetaData (_$l__lvar_836, null) * empty_fields(_$l__lvar_836 : -{  }-) ]]
[[ types() * (xret == empty) * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_847) * empty_fields($lbool_proto : -{ "constructor" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * Extensible (_$l__lvar_845, true) * MetaData (_$l__lvar_845, null) * empty_fields(_$l__lvar_845 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_845, "@scope") ->@d empty) * ((_$l__lvar_845, "@proto") ->@d $lfun_proto) * ((_$l__lvar_845, "@extensible") ->@d true) * ((_$l__lvar_845, "@construct") ->@d "Error_construct") * ((_$l__lvar_845, "@class") ->@d "Function") * ((_$l__lvar_845, "@call") ->@d "Error_call") * Extensible (_$l__lvar_851, true) * MetaData (_$l__lvar_851, null) * empty_fields(_$l__lvar_851 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_851, "@proto") ->@d null) * ((_$l__lvar_851, "@extensible") ->@d true) * ((_$l__lvar_851, "@class") ->@d "Object") * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_846) * empty_fields($lnum_proto : -{ "constructor" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * Extensible (_$l__lvar_847, true) * MetaData (_$l__lvar_847, null) * empty_fields(_$l__lvar_847 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_847, "@proto") ->@d $lobj_proto) * ((_$l__lvar_847, "@primitiveValue") ->@d false) * ((_$l__lvar_847, "@extensible") ->@d true) * ((_$l__lvar_847, "@class") ->@d "Boolean") * Extensible (_$l__lvar_846, true) * MetaData (_$l__lvar_846, null) * empty_fields(_$l__lvar_846 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_846, "@proto") ->@d $lobj_proto) * ((_$l__lvar_846, "@primitiveValue") ->@d 0.) * ((_$l__lvar_846, "@extensible") ->@d true) * ((_$l__lvar_846, "@class") ->@d "Number") * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_843) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_851) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible (_$l__lvar_843, true) * MetaData (_$l__lvar_843, null) * empty_fields(_$l__lvar_843 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_843, "@proto") ->@d $lobj_proto) * ((_$l__lvar_843, "@extensible") ->@d true) * ((_$l__lvar_843, "@class") ->@d "Error") * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_850) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_852, true) * MetaData (_$l__lvar_852, null) * empty_fields(_$l__lvar_852 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_852, "@proto") ->@d $lobj_proto) * ((_$l__lvar_852, "@extensible") ->@d true) * ((_$l__lvar_852, "@class") ->@d "Object") * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_852) * empty_fields($lg : -u- (-{  }-, -{ "Error" }-)) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_845) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_849, true) * MetaData (_$l__lvar_849, null) * empty_fields(_$l__lvar_849 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_849, "@scope") ->@d empty) * ((_$l__lvar_849, "@proto") ->@d $lobj_proto) * ((_$l__lvar_849, "@extensible") ->@d true) * ((_$l__lvar_849, "@class") ->@d "Function") * ((_$l__lvar_849, "@call") ->@d "FP_default") * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_849) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_850, true) * MetaData (_$l__lvar_850, null) * empty_fields(_$l__lvar_850 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_850, "@scope") ->@d empty) * ((_$l__lvar_850, "@proto") ->@d $lfun_proto) * ((_$l__lvar_850, "@extensible") ->@d true) * ((_$l__lvar_850, "@class") ->@d "Function") * ((_$l__lvar_850, "@call") ->@d "OP_hasOwnProperty") ]]
normal

proc setupInitialHeap () {
			xret := "create_default_object"($lg, $lobj_proto, "Object", true);
			xret := "create_default_object"($lobj_proto, null, "Object", true);
			[$lobj_proto, "hasOwnProperty"] := {{ "d", $lop_hasOwnProperty, true, false, true }};
			xret := "create_object_with_call_construct"($lop_hasOwnProperty, "OP_hasOwnProperty", empty, 1.);
			xret := "create_object_with_call_construct"($lfun_proto, "FP_default", empty, 0.);
			m := metadata ($lfun_proto);
			[m, "@proto"] := $lobj_proto;
			xret := "create_default_object"($lbool_proto, $lobj_proto, "Boolean", true);
			m := metadata ($lbool_proto);
			[m, "@primitiveValue"] := false;
			[$lbool_proto, "constructor"] := {{ "d", $lbool, true, false, true }};
			xret := "create_default_object"($lnum_proto, $lobj_proto, "Number", true);
			m := metadata ($lnum_proto);
			[m, "@primitiveValue"] := 0.;
			[$lnum_proto, "constructor"] := {{ "d", $lnum, true, false, true }};
			xret := "create_object_with_call_construct"($lerr, "Error_call", "Error_construct", 1.);
			[$lg, "Error"] := {{ "d", $lerr, true, false, true }};
			[$lerr, "prototype"] := {{ "d", $lerr_proto, false, false, false }};
			xret := "create_default_object"($lerr_proto, $lobj_proto, "Error", true);
			[$lerr_proto, "message"] := {{ "d", "", true, false, true }};
	rlab:		xret := empty
} with {
	ret: xret, rlab;
};


spec i__typeOf(v)
[[ types(#v : Undefined) * (#v == undefined) * (v == undefined) ]]
[[ types(#v : Undefined) * (#v == undefined) * (xret == "undefined") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Null) * (#v == null) * (v == null) ]]
[[ types(#v : Null) * (#v == null) * (xret == "object") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == "boolean") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == "number") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == "string") * (v == _lvar_v) ]]
normal

proc i__typeOf (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := "undefined";
			goto rlab;
	in:		goto [(v = null)] nll ib;
	nll:		xret := "object";
			goto rlab;
	ib:		goto [((typeOf v) = Bool)] bool inum;
	bool:		xret := "boolean";
			goto rlab;
	inum:		goto [((typeOf v) = Num)] num is;
	num:		xret := "number";
			goto rlab;
	is:		goto [((typeOf v) = Str)] str io;
	str:		xret := "string";
			goto rlab;
	io:		goto [((typeOf v) = Obj)] obj oops;
	obj:		m := metadata (v);
			xret := hasField(m,"@call");
			goto [xret] isfun isobj;
	isobj:		xret := "object";
			goto rlab;
	isfun:		xret := "function";
			goto rlab;
	oops:		xret := "typeOf: This should not happen.";
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec s__getOwnProperty(l, prop)
[[ types(#dx : List, #prop : Str, _lvar_689 : Bool, _lvar_691 : Bool, _lvar_690 : Bool) * (#dx == {{ "d", _lvar_688, _lvar_689, _lvar_690, _lvar_691 }}) * (! (_lvar_688 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_688, _lvar_689, _lvar_690, _lvar_691 }}) ]]
[[ types(#dx : List, _lvar_699 : Bool, #prop : Str, _lvar_697 : Bool, _lvar_698 : Bool) * (#dx == {{ "d", _lvar_696, _lvar_697, _lvar_698, _lvar_699 }}) * (! (_lvar_696 == empty)) * (xret == {{ "d", _lvar_696, _lvar_697, _lvar_698, _lvar_699 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_696, _lvar_697, _lvar_698, _lvar_699 }}) ]]
normal;

 [[ types(#dx : List, _lvar_695 : Bool, _lvar_694 : Bool, #prop : Str) * (#dx == {{ "a", _lvar_693, _lvar_692, _lvar_694, _lvar_695 }}) * (! (_lvar_693 == empty)) * (! (_lvar_692 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_693, _lvar_692, _lvar_694, _lvar_695 }}) ]]
[[ types(#dx : List, #prop : Str, _lvar_702 : Bool, _lvar_703 : Bool) * (#dx == {{ "a", _lvar_701, _lvar_700, _lvar_702, _lvar_703 }}) * (! (_lvar_701 == empty)) * (! (_lvar_700 == empty)) * (xret == {{ "a", _lvar_701, _lvar_700, _lvar_702, _lvar_703 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_701, _lvar_700, _lvar_702, _lvar_703 }}) ]]
normal

proc s__getOwnProperty (l, prop) {
			xret := "o__getOwnProperty"(l, prop);
			goto [(xret = undefined)] str rlab;
	str:		idx := "i__toInteger"(prop) with elab;
			goto [(idx < 0.)] rlab next;
	next:		sidx := "i__toString"(idx);
			goto [(sidx = prop)] index rlab;
	index:		m := metadata (l);
			str := [m, "@primitiveValue"];
			len := (s-len str);
			goto [(len <= idx)] rlab return;
	return:		rstr := s-nth(str, idx);
			xret := {{ "d", rstr, false, true, false }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_function_object(xsc, call, construct, params)
[[ types(#xsc : List, #construct : Str, #params : List, #call : Str) * (#call == #construct) * (call == #call) * (xsc == #xsc) * (params == #params) * (construct == #construct) ]]
[[ types(#xsc : List, #construct : Str, #params : List, #call : Str) * (xret == _$l_xret) * (call == _lvar_call) * (xsc == _lvar_xsc) * (params == _lvar_params) * (construct == _lvar_construct) * Extensible (_$l_#prototype, true) * MetaData (_$l_#prototype, _$l__lvar_675) * empty_fields(_$l_#prototype : -{ "constructor" }-) * ((_$l_#prototype, "constructor") ->@d {{ "d", _$l_xret, true, false, true }}) * Extensible (_$l__lvar_675, true) * MetaData (_$l__lvar_675, null) * empty_fields(_$l__lvar_675 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_675, "@proto") ->@d $lobj_proto) * ((_$l__lvar_675, "@extensible") ->@d true) * ((_$l__lvar_675, "@class") ->@d "Object") * Extensible (_$l__lvar_676, true) * MetaData (_$l__lvar_676, null) * empty_fields(_$l__lvar_676 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_676, "@scope") ->@d #xsc) * ((_$l__lvar_676, "@proto") ->@d $lfun_proto) * ((_$l__lvar_676, "@extensible") ->@d true) * ((_$l__lvar_676, "@construct") ->@d #call) * ((_$l__lvar_676, "@class") ->@d "Function") * ((_$l__lvar_676, "@call") ->@d #call) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_676) * empty_fields(_$l_xret : -{ "arguments", "caller", "length", "prototype" }-) * ((_$l_xret, "prototype") ->@d {{ "d", _$l_#prototype, true, false, false }}) * ((_$l_xret, "length") ->@d {{ "d", (l-len #params), false, false, false }}) * ((_$l_xret, "caller") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_xret, "arguments") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) ]]
normal

proc create_function_object (xsc, call, construct, params) {
			len := (l-len params);
			m := new(null);
			l := new(m);
			l := "create_object_with_call_construct"(l, call, construct, len);
			[m, "@scope"] := xsc;
			prototype := "Object_construct"();
			[prototype, "constructor"] := {{ "d", l, true, false, true }};
			[l, "prototype"] := {{ "d", prototype, true, false, false }};
			[l, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			[l, "arguments"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			xret := l;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__abstractComparison(v1, v2, leftFirst)
[[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (#v1 <# #v2) * (leftFirst == #leftFirst) * (v2 == #v2) * (v1 == #v1) ]]
[[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (leftFirst == _lvar_leftFirst) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (#v1 == #v2) * (leftFirst == #leftFirst) * (v2 == #v2) * (v1 == #v1) ]]
[[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (leftFirst == _lvar_leftFirst) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (#v2 <# #v1) * (leftFirst == #leftFirst) * (v2 == #v2) * (v1 == #v1) ]]
[[ types(#leftFirst : Bool, #v2 : Num, #v1 : Num) * (leftFirst == _lvar_leftFirst) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__abstractComparison (v1, v2, leftFirst) {
			goto [((leftFirst = empty) or (leftFirst = true))] eleft eright;
	eleft:		xret := "i__toPrimitive"(v1, "Number") with elab;
			px := xret;
			xret := "i__toPrimitive"(v2, "Number") with elab;
			py := xret;
			goto is_str;
	eright:		xret := "i__toPrimitive"(v2, "Number") with elab;
			py := xret;
			xret := "i__toPrimitive"(v1, "Number") with elab;
			px := xret;
	is_str:		goto [(((typeOf px) = Str) and ((typeOf py) = Str))] str num;
	str:		xret := (px <s py);
			goto rlab;
	num:		xret := "i__toNumber"(px) with elab;
			nx := xret;
			xret := "i__toNumber"(py) with elab;
			ny := xret;
			goto [((not (nx = nx)) or (not (ny = ny)))] ru eq;
	eq:		goto [(nx = ny)] rf sl;
	sl:		xret := (nx < ny);
			goto rlab;
	ru:		xret := undefined;
			goto rlab;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec Boolean_construct(xsc, vthis, v)
[[ types(#v : Bool) * (xsc == _lvar_xsc) * (v == #v) * (vthis == _lvar_vthis) ]]
[[ types(#v : Bool) * (xret == _$l_xret) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_387, true) * MetaData (_$l__lvar_387, null) * empty_fields(_$l__lvar_387 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_387, "@proto") ->@d $lbool_proto) * ((_$l__lvar_387, "@primitiveValue") ->@d #v) * ((_$l__lvar_387, "@extensible") ->@d true) * ((_$l__lvar_387, "@class") ->@d "Boolean") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_387) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Boolean_construct (xsc, vthis, v) {
			pv := "i__toBoolean"(v);
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lbool_proto, "Boolean", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toNumber(v)
[[ types() * (v == null) ]]
[[ types() * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == true) ]]
[[ types() * (xret == 1.) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == false) ]]
[[ types() * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == (string_to_num #v)) * (v == _lvar_v) ]]
normal

proc i__toNumber (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := nan;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := 0.;
			goto rlab;
	ib:		goto [((typeOf v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := 1.;
			goto rlab;
	is_f:		xret := 0.;
			goto rlab;
	inum:		goto [((typeOf v) = Num)] num is;
	num:		xret := v;
			goto rlab;
	is:		goto [((typeOf v) = Str)] str io;
	str:		xret := (string_to_num v);
			goto rlab;
	io:		goto [((typeOf v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "Number") with elab;
			xret := "i__toNumber"(xret);
			goto rlab;
	oops:		xret := "TypeError"("ToNumber: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_378, true) * MetaData (_$l__lvar_378, null) * empty_fields(_$l__lvar_378 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_378, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_378, "@extensible") ->@d true) * ((_$l__lvar_378, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_378) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc ReferenceError (v) {
			xret := "ReferenceError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_default_object(l, pr, cl, ext)
[[ types(#l : Obj) * (#l == _$l_l) * (ext == undefined) * (pr == #pr) * (cl == undefined) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_0) * ((_$l_#md, "@extensible") ->@d #lvar_2) * ((_$l_#md, "@class") ->@d #lvar_1) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
[[ types(#l : Obj) * (ext == _lvar_ext) * (xret == #l) * (pr == _lvar_pr) * (cl == _lvar_cl) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d "Object") * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
normal;

 [[ types(#l : Obj, #cl : Str, #ext : Bool) * (#l == _$l_l) * (ext == #ext) * (pr == #pr) * (cl == #cl) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_3) * ((_$l_#md, "@extensible") ->@d #lvar_5) * ((_$l_#md, "@class") ->@d #lvar_4) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
[[ types(#l : Obj, #cl : Str, #ext : Bool) * (ext == _lvar_ext) * (xret == #l) * (pr == _lvar_pr) * (cl == _lvar_cl) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@extensible") ->@d #ext) * ((_$l_#md, "@class") ->@d #cl) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
normal

proc create_default_object (l, pr, cl, ext) {
			goto [(cl = undefined)] scl text;
	scl:		cl := "Object";
	text:		goto [(ext = undefined)] sext setall;
	sext:		ext := true;
	setall:		m := metadata (l);
			[m, "@proto"] := pr;
			[m, "@class"] := cl;
			[m, "@extensible"] := ext;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec i__toPrimitive(v, hint)
[[ types() * (v == undefined) * (hint == _lvar_hint) ]]
[[ types() * (xret == undefined) * (v == _lvar_v) * (hint == _lvar_hint) ]]
normal;

 [[ types() * (v == null) * (hint == _lvar_hint) ]]
[[ types() * (xret == null) * (v == _lvar_v) * (hint == _lvar_hint) ]]
normal;

 [[ types(#v : Num) * (v == #v) * (hint == _lvar_hint) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) * (hint == _lvar_hint) ]]
normal;

 [[ types(#v : Bool) * (v == #v) * (hint == _lvar_hint) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) * (hint == _lvar_hint) ]]
normal;

 [[ types(#v : Str) * (v == #v) * (hint == _lvar_hint) ]]
[[ types(#v : Str) * (xret == #v) * (v == _lvar_v) * (hint == _lvar_hint) ]]
normal

proc i__toPrimitive (v, hint) {
			xret := v;
			tv := (typeOf v);
	iu:		goto [(((((v = undefined) or (v = null)) or ((typeOf v) = Bool)) or ((typeOf v) = Num)) or ((typeOf v) = Str))] rlab is_obj;
	is_obj:		goto [((typeOf v) = Obj)] obj oops;
	obj:		xret := "defaultValue"(v, hint) with elab;
			goto rlab;
	oops:		xret := "ToPrimitive: This should not happen.";
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec o__getOwnProperty(l, prop)
[[ types(#prop : Str) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(#dx : List, #prop : Str, _lvar_136 : Bool, _lvar_134 : Bool, _lvar_135 : Bool) * (#dx == {{ "d", _lvar_133, _lvar_134, _lvar_135, _lvar_136 }}) * (! (_lvar_133 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_133, _lvar_134, _lvar_135, _lvar_136 }}) ]]
[[ types(#dx : List, _lvar_144 : Bool, #prop : Str, _lvar_143 : Bool, _lvar_142 : Bool) * (#dx == {{ "d", _lvar_141, _lvar_142, _lvar_143, _lvar_144 }}) * (! (_lvar_141 == empty)) * (xret == {{ "d", _lvar_141, _lvar_142, _lvar_143, _lvar_144 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_141, _lvar_142, _lvar_143, _lvar_144 }}) ]]
normal;

 [[ types(#dx : List, #prop : Str, _lvar_139 : Bool, _lvar_140 : Bool) * (#dx == {{ "a", _lvar_138, _lvar_137, _lvar_139, _lvar_140 }}) * (! (_lvar_138 == empty)) * (! (_lvar_137 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_138, _lvar_137, _lvar_139, _lvar_140 }}) ]]
[[ types(_lvar_147 : Bool, #dx : List, #prop : Str, _lvar_148 : Bool) * (#dx == {{ "a", _lvar_146, _lvar_145, _lvar_147, _lvar_148 }}) * (! (_lvar_146 == empty)) * (! (_lvar_145 == empty)) * (xret == {{ "a", _lvar_146, _lvar_145, _lvar_147, _lvar_148 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_146, _lvar_145, _lvar_147, _lvar_148 }}) ]]
normal

proc o__getOwnProperty (l, prop) {
			x := hasField(l,prop);
			goto [x] hp nhp;
	nhp:		xret := undefined;
			goto rlab;
	hp:		xret := [l, prop];
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec deleteProperty(l, prop, throw)
[[ types(#prop : Str, #cls : Str) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str, #cls : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(#prop : Str, #d : List, _lvar_771 : Bool, _lvar_770 : Bool, #cls : Str) * (#d == {{ "d", _lvar_769, _lvar_770, _lvar_771, true }}) * (! (_lvar_769 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_769, _lvar_770, _lvar_771, true }}) ]]
[[ types(#prop : Str, #d : List, #cls : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(#prop : Str, #d : List, #cls : Str, _lvar_775 : Bool) * (#d == {{ "a", _lvar_774, _lvar_773, _lvar_775, true }}) * (! (_lvar_774 == empty)) * (! (_lvar_773 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_774, _lvar_773, _lvar_775, true }}) ]]
[[ types(#prop : Str, #d : List, #cls : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_795 : Bool, #prop : Str, _lvar_794 : Bool, #d : List, #cls : Str) * (#d == {{ "d", _lvar_793, _lvar_794, _lvar_795, false }}) * (! (_lvar_793 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_793, _lvar_794, _lvar_795, false }}) ]]
[[ types(_lvar_802 : Bool, _lvar_804 : Bool, #prop : Str, #d : List, #cls : Str, _lvar_803 : Bool) * (#d == {{ "d", _lvar_801, _lvar_802, _lvar_803, _lvar_804 }}) * (! (_lvar_801 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_801, _lvar_802, _lvar_803, _lvar_804 }}) ]]
normal;

 [[ types(#prop : Str, #d : List, #cls : Str, _lvar_799 : Bool) * (#d == {{ "a", _lvar_798, _lvar_797, _lvar_799, false }}) * (! (_lvar_798 == empty)) * (! (_lvar_797 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_798, _lvar_797, _lvar_799, false }}) ]]
[[ types(#prop : Str, _lvar_808 : Bool, #d : List, #cls : Str, _lvar_807 : Bool) * (#d == {{ "a", _lvar_806, _lvar_805, _lvar_807, _lvar_808 }}) * (! (_lvar_806 == empty)) * (! (_lvar_805 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_806, _lvar_805, _lvar_807, _lvar_808 }}) ]]
normal;

 [[ types(_lvar_818 : Bool, #prop : Str, #d : List, #cls : Str, _lvar_819 : Bool) * (#d == {{ "d", _lvar_817, _lvar_818, _lvar_819, false }}) * (! (_lvar_817 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_817, _lvar_818, _lvar_819, false }}) ]]
[[ types(_lvar_829 : Bool, _lvar_827 : Bool, #prop : Str, #d : List, #cls : Str, _lvar_828 : Bool) * (#d == {{ "d", _lvar_826, _lvar_827, _lvar_828, _lvar_829 }}) * (! (_lvar_826 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_826, _lvar_827, _lvar_828, _lvar_829 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_825) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_825, true) * MetaData (_$l__lvar_825, null) * empty_fields(_$l__lvar_825 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_825, "@proto") ->@d $lterr_proto) * ((_$l__lvar_825, "@extensible") ->@d true) * ((_$l__lvar_825, "@class") ->@d "Error") ]]
error;

 [[ types(#prop : Str, _lvar_823 : Bool, #d : List, #cls : Str) * (#d == {{ "a", _lvar_822, _lvar_821, _lvar_823, false }}) * (! (_lvar_822 == empty)) * (! (_lvar_821 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_822, _lvar_821, _lvar_823, false }}) ]]
[[ types(_lvar_832 : Bool, _lvar_833 : Bool, #prop : Str, #d : List, #cls : Str) * (#d == {{ "a", _lvar_831, _lvar_830, _lvar_832, _lvar_833 }}) * (! (_lvar_831 == empty)) * (! (_lvar_830 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_831, _lvar_830, _lvar_832, _lvar_833 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_825) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_825, true) * MetaData (_$l__lvar_825, null) * empty_fields(_$l__lvar_825 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_825, "@proto") ->@d $lterr_proto) * ((_$l__lvar_825, "@extensible") ->@d true) * ((_$l__lvar_825, "@class") ->@d "Error") ]]
error

proc deleteProperty (l, prop, throw) {
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] dt cont;
	cont:		c := l-nth(xret, 4.);
			goto [c] del reject;
	del:		delete (l,prop);
	dt:		xret := true;
			goto rlab;
	df:		xret := false;
	rlab:		skip;
	reject:		goto [throw] tt df;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec getOwnProperty(l, prop)
[[ types(#prop : Str, #cls : Str) * (! (#cls == "String")) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str, #cls : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(#dx : List, _lvar_731 : Bool, #prop : Str, _lvar_730 : Bool, #cls : Str, _lvar_729 : Bool) * (#dx == {{ "d", _lvar_728, _lvar_729, _lvar_730, _lvar_731 }}) * (! (_lvar_728 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_728, _lvar_729, _lvar_730, _lvar_731 }}) ]]
[[ types(_lvar_739 : Bool, #dx : List, #prop : Str, _lvar_738 : Bool, _lvar_737 : Bool, #cls : Str) * (#dx == {{ "d", _lvar_736, _lvar_737, _lvar_738, _lvar_739 }}) * (! (_lvar_736 == empty)) * (xret == {{ "d", _lvar_736, _lvar_737, _lvar_738, _lvar_739 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_736, _lvar_737, _lvar_738, _lvar_739 }}) ]]
normal;

 [[ types(#dx : List, _lvar_734 : Bool, #prop : Str, #cls : Str, _lvar_735 : Bool) * (#dx == {{ "a", _lvar_733, _lvar_732, _lvar_734, _lvar_735 }}) * (! (_lvar_733 == empty)) * (! (_lvar_732 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_733, _lvar_732, _lvar_734, _lvar_735 }}) ]]
[[ types(#dx : List, #prop : Str, _lvar_743 : Bool, #cls : Str, _lvar_742 : Bool) * (#dx == {{ "a", _lvar_741, _lvar_740, _lvar_742, _lvar_743 }}) * (! (_lvar_741 == empty)) * (! (_lvar_740 == empty)) * (xret == {{ "a", _lvar_741, _lvar_740, _lvar_742, _lvar_743 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_741, _lvar_740, _lvar_742, _lvar_743 }}) ]]
normal

proc getOwnProperty (l, prop) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "String")] sgop ogop;
	sgop:		xret := "s__getOwnProperty"(l, prop) with elab;
			goto rlab;
	ogop:		xret := "o__getOwnProperty"(l, prop) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toString(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == "undefined") * (v == _lvar_v) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == "null") * (v == _lvar_v) ]]
normal;

 [[ types() * (v == true) ]]
[[ types() * (xret == "true") * (v == _lvar_v) ]]
normal;

 [[ types() * (v == false) ]]
[[ types() * (xret == "false") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == (num_to_string #v)) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == #v) * (v == _lvar_v) ]]
normal

proc i__toString (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := "undefined";
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := "null";
			goto rlab;
	ib:		goto [((typeOf v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := "true";
			goto rlab;
	is_f:		xret := "false";
			goto rlab;
	inum:		goto [((typeOf v) = Num)] num is;
	num:		xret := (num_to_string v);
			goto rlab;
	is:		goto [((typeOf v) = Str)] str io;
	str:		xret := v;
			goto rlab;
	io:		goto [((typeOf v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "String") with elab;
			xret := "i__toString"(xret) with elab;
			goto rlab;
	oops:		xret := "TypeError"("ToString: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkAssignmentErrors(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_379 : Num) * (v == _lvar_379) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_380 : Bool) * (v == _lvar_380) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_381 : Str) * (v == _lvar_381) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_382 : Obj) * (v == _lvar_382) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#l : Obj, #prop : Str, #v : List) * (#v == {{ "v", #l, #prop }}) * (! (#prop == "eval")) * (! (#prop == "arguments")) * (v == {{ "v", #l, #prop }}) ]]
[[ types(#l : Obj, #prop : Str, #v : List) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#l : Obj, #v : List) * (#v == {{ "v", #l, "eval" }}) * (v == {{ "v", #l, "eval" }}) ]]
[[ types(#l : Obj, #v : List) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_383, true) * MetaData (_$l__lvar_383, null) * empty_fields(_$l__lvar_383 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_383, "@proto") ->@d $lserr_proto) * ((_$l__lvar_383, "@extensible") ->@d true) * ((_$l__lvar_383, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_383) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#l : Obj, #v : List) * (#v == {{ "v", #l, "arguments" }}) * (v == {{ "v", #l, "arguments" }}) ]]
[[ types(#l : Obj, #v : List) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_384, true) * MetaData (_$l__lvar_384, null) * empty_fields(_$l__lvar_384 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_384, "@proto") ->@d $lserr_proto) * ((_$l__lvar_384, "@extensible") ->@d true) * ((_$l__lvar_384, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_384) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#v : List, #base : Obj, #field : Str) * (#v == {{ "o", #base, #field }}) * (v == {{ "o", #base, #field }}) ]]
[[ types(#v : List, #base : Obj, #field : Str) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__checkAssignmentErrors (v) {
			tv := (typeOf v);
			goto [(tv = List)] list rlab;
	list:		goto [((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o"))] prep rlab;
	prep:		fv := l-nth(v, 2.);
	csyn:		goto [((l-nth(v, 0.) = "v") and ((fv = "eval") or (fv = "arguments")))] se rlab;
	rlab:		xret := true;
	se:		xret := "SyntaxError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec put(l, prop, value, throw)
[[ Pi(_$l_#l, #prop, undefined, ({{ _$l_#l, #lp }} @ #lllp), ({{ #cls, #ccls }} @ #llcls), ({{ "", #pv }} @ #llpv)) * types(#throw : Bool, #ccls : Str, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj, #llcls : List) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, ({{ #lp }} @ #lllp), ({{ #ccls }} @ #llcls), ({{ #pv }} @ #llpv)) * types(#throw : Bool, #ccls : Str, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj, #llcls : List) * (throw == _lvar_throw) * (xret == empty) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#throw : Bool, #dconf : Bool, #lpv : List, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (! (#value == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#throw : Bool, #dconf : Bool, #lpv : List, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (throw == _lvar_throw) * (xret == empty) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ _$l_#l, #lp }} @ #lllp), ({{ #cls, #pcls }} @ #ocls), ({{ "", #pv }} @ #llpv)) * types(#throw : Bool, #dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (! (#value == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ #lp }} @ #lllp), ({{ #pcls }} @ #ocls), ({{ #pv }} @ #llpv)) * types(#throw : Bool, #dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (throw == _lvar_throw) * (xret == empty) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#throw : Bool, #prop : Str, #cls : Str) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#throw : Bool, #prop : Str, #cls : Str) * (throw == _lvar_throw) * (xret == empty) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (throw == true) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_360, true) * MetaData (_$l__lvar_360, null) * empty_fields(_$l__lvar_360 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_360, "@proto") ->@d $lterr_proto) * ((_$l__lvar_360, "@extensible") ->@d true) * ((_$l__lvar_360, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_360) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_361, false, _lvar_363, _lvar_364 }}, {{ _$l_#l }}, #lcls, #lpv) * types(#lpv : List, _lvar_364 : Bool, #prop : Str, #ext : Bool, #d : List, _lvar_363 : Bool, #lcls : List) * (#d == {{ "d", _lvar_361, false, _lvar_363, _lvar_364 }}) * (! (_lvar_361 == empty)) * (throw == true) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lpv : List, #prop : Str, #ext : Bool, #d : List, #lcls : List) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_365, true) * MetaData (_$l__lvar_365, null) * empty_fields(_$l__lvar_365 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_365, "@proto") ->@d $lterr_proto) * ((_$l__lvar_365, "@extensible") ->@d true) * ((_$l__lvar_365, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_365) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_368, _lvar_369, _lvar_370, _lvar_371 }}, ({{ _$l_#l, #lp }} @ #other), #lcls, #lpv) * types(_lvar_369 : Bool, #lpv : List, #ls : List, #prop : Str, #d : List, _lvar_370 : Bool, #lcls : List, #lp : Obj, _lvar_371 : Bool, #other : List) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_368, _lvar_369, _lvar_370, _lvar_371 }}) * (! (_lvar_368 == empty)) * (throw == true) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, #lp : Obj, #other : List) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * Extensible (_$l__lvar_372, true) * MetaData (_$l__lvar_372, null) * empty_fields(_$l__lvar_372 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_372, "@proto") ->@d $lterr_proto) * ((_$l__lvar_372, "@extensible") ->@d true) * ((_$l__lvar_372, "@class") ->@d "Error") * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_372) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_373, false, _lvar_375, _lvar_376 }}, ({{ _$l_#l, #lp }} @ #other), #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, _lvar_375 : Bool, #lp : Obj, #other : List, _lvar_376 : Bool) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_373, false, _lvar_375, _lvar_376 }}) * (! (_lvar_373 == empty)) * (throw == true) * (prop == #prop) * (value == #value) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, #lp : Obj, #other : List) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (value == _lvar_value) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_377, true) * MetaData (_$l__lvar_377, null) * empty_fields(_$l__lvar_377 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_377, "@proto") ->@d $lterr_proto) * ((_$l__lvar_377, "@extensible") ->@d true) * ((_$l__lvar_377, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_377) * empty_fields(_$l_xret : -{  }-) ]]
error

proc put (l, prop, value, throw) {
			xret := "canPut"(l, prop) with elab;
			goto [xret] cp reject;
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	cp:		xret := "getOwnProperty"(l, prop) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] dd gp;
	dd:		desc := {{ "g", empty, empty, value, empty, empty, empty }};
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ #l }}, #lvar_19, #lvar_20) *]
			goto remp;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	gp:		xret := "getProperty"(l, prop) with elab;
			ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad def;
	ad:		s := l-nth(xret, 2.);
			xsc := [s, "@scope"];
			fun := [s, "@call"];
			xret := fun(xsc, l, value) with elab;
			goto remp;
	def:		desc := {{ "d", value, true, true, true }};
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, true, true }}, {{ #l }}, #lvar_21, #lvar_22) *]
			skip;
	remp:		xret := empty;
	rlab:		skip;
	reject:		xret := empty;
			goto [throw] tt rlab;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__putValue(v, w)
[[ types() * (w == _lvar_w) * (v == undefined) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_247, true) * MetaData (_$l__lvar_247, null) * empty_fields(_$l__lvar_247 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_247, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_247, "@extensible") ->@d true) * ((_$l__lvar_247, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_247) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types() * (w == _lvar_w) * (v == null) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_248, true) * MetaData (_$l__lvar_248, null) * empty_fields(_$l__lvar_248 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_248, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_248, "@extensible") ->@d true) * ((_$l__lvar_248, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_248) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_250 : Num) * (w == _lvar_w) * (v == _lvar_250) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_249, true) * MetaData (_$l__lvar_249, null) * empty_fields(_$l__lvar_249 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_249, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_249, "@extensible") ->@d true) * ((_$l__lvar_249, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_249) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_252 : Bool) * (w == _lvar_w) * (v == _lvar_252) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_251, true) * MetaData (_$l__lvar_251, null) * empty_fields(_$l__lvar_251 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_251, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_251, "@extensible") ->@d true) * ((_$l__lvar_251, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_251) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_254 : Str) * (w == _lvar_w) * (v == _lvar_254) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_253) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_253, true) * MetaData (_$l__lvar_253, null) * empty_fields(_$l__lvar_253 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_253, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_253, "@extensible") ->@d true) * ((_$l__lvar_253, "@class") ->@d "Error") ]]
error;

 [[ types(_lvar_256 : Obj) * (w == _lvar_w) * (v == _lvar_256) ]]
[[ types() * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_255) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_255, true) * MetaData (_$l__lvar_255, null) * empty_fields(_$l__lvar_255 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_255, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_255, "@extensible") ->@d true) * ((_$l__lvar_255, "@class") ->@d "Error") ]]
error;

 [[ types() * (! (#w == empty)) * (w == #w) * (v == {{ "v", _$l_#obj, #field }}) * ((_$l_#obj, #field) ->@d #lvar_23) ]]
[[ types() * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#obj, #field) ->@d #w) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, ({{ _$l_#l, #lp }} @ #lllp), ({{ #cls, #pcls }} @ #ocls), ({{ "", #pv }} @ #llpv)) * types(#pcls : Str, #ocls : List, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, ({{ #lp }} @ #lllp), ({{ #pcls }} @ #ocls), ({{ #pv }} @ #llpv)) * types(#pcls : Str, #ocls : List, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, undefined, ({{ $lg, #lp }} @ #lllp), ({{ #cls, #pcls }} @ #ocls), ({{ "", #pv }} @ #llpv)) * types(#pcls : Str, #ocls : List, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "v", $lg, #prop }}) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, ({{ #lp }} @ #lllp), ({{ #pcls }} @ #ocls), ({{ #pv }} @ #llpv)) * types(#pcls : Str, #ocls : List, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#dconf : Bool, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#dconf : Bool, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#dconf : Bool, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "v", $lg, #prop }}) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#dconf : Bool, #denum : Bool, #prop : Str, #ext : Bool, #cls : Str) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ _$l_#l, #lp }} @ #lllp), ({{ #cls, #pcls }} @ #ocls), ({{ "", #pv }} @ #llpv)) * types(#dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ #lp }} @ #lllp), ({{ #pcls }} @ #ocls), ({{ #pv }} @ #llpv)) * types(#dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ $lg, #lp }} @ #lllp), ({{ #cls, #pcls }} @ #ocls), ({{ "", #pv }} @ #llpv)) * types(#dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "v", $lg, #prop }}) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ({{ #lp }} @ #lllp), ({{ #pcls }} @ #ocls), ({{ #pv }} @ #llpv)) * types(#dcconf : Bool, #pcls : Str, #ocls : List, #dcenum : Bool, #prop : Str, #pv : Str, #cls : Str, #llpv : List, #lllp : List, #lp : Obj) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#prop : Str, #cls : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#prop : Str, #cls : Str) * (w == _lvar_w) * (xret == empty) * (v == _lvar_v) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_310, true) * MetaData (_$l__lvar_310, null) * empty_fields(_$l__lvar_310 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_310, "@proto") ->@d $lterr_proto) * ((_$l__lvar_310, "@extensible") ->@d true) * ((_$l__lvar_310, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_310) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_311, false, _lvar_313, _lvar_314 }}, {{ _$l_#l }}, #lcls, #lpv) * types(#lpv : List, #prop : Str, _lvar_314 : Bool, #ext : Bool, #d : List, _lvar_313 : Bool, #lcls : List) * (#d == {{ "d", _lvar_311, false, _lvar_313, _lvar_314 }}) * (! (_lvar_311 == empty)) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lpv : List, #prop : Str, #ext : Bool, #d : List, #lcls : List) * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_315, true) * MetaData (_$l__lvar_315, null) * empty_fields(_$l__lvar_315 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_315, "@proto") ->@d $lterr_proto) * ((_$l__lvar_315, "@extensible") ->@d true) * ((_$l__lvar_315, "@class") ->@d "Error") * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_315) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_318, _lvar_319, _lvar_320, _lvar_321 }}, ({{ _$l_#l, #lp }} @ #other), #cls, #lpv) * types(#lpv : List, _lvar_320 : Bool, #ls : List, #prop : Str, #d : List, #cls : List, _lvar_321 : Bool, _lvar_319 : Bool, #lp : Obj, #other : List) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_318, _lvar_319, _lvar_320, _lvar_321 }}) * (! (_lvar_318 == empty)) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #cls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #cls : List, #lp : Obj, #other : List) * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d false) * Extensible (_$l__lvar_322, true) * MetaData (_$l__lvar_322, null) * empty_fields(_$l__lvar_322 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_322, "@proto") ->@d $lterr_proto) * ((_$l__lvar_322, "@extensible") ->@d true) * ((_$l__lvar_322, "@class") ->@d "Error") * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_322) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_323, false, _lvar_325, _lvar_326 }}, ({{ _$l_#l, #lp }} @ #other), #lcls, #lpv) * types(_lvar_325 : Bool, #lpv : List, #ls : List, #prop : Str, #d : List, _lvar_326 : Bool, #lcls : List, #lp : Obj, #other : List) * (#ls == ({{ _$l_#l, #lp }} @ #other)) * (#d == {{ "d", _lvar_323, false, _lvar_325, _lvar_326 }}) * (! (_lvar_323 == empty)) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #d : List, #lcls : List, #lp : Obj, #other : List) * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d false) * Extensible (_$l__lvar_327, true) * MetaData (_$l__lvar_327, null) * empty_fields(_$l__lvar_327 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_327, "@proto") ->@d $lterr_proto) * ((_$l__lvar_327, "@extensible") ->@d true) * ((_$l__lvar_327, "@class") ->@d "Error") * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_327) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (w == #w) * (v == {{ "v", $lg, #prop }}) * ((_$l_#md, "@extensible") ->@d false) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #prop : Str, #lcls : List) * (w == _lvar_w) * (xret == _$l_xret) * (v == _lvar_v) * ((_$l_#md, "@extensible") ->@d false) * MetaData ($lg, _$l_#md) * Extensible (_$l__lvar_328, true) * MetaData (_$l__lvar_328, null) * empty_fields(_$l__lvar_328 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_328, "@proto") ->@d $lterr_proto) * ((_$l__lvar_328, "@extensible") ->@d true) * ((_$l__lvar_328, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_328) * empty_fields(_$l_xret : -{  }-) ]]
error

proc i__putValue (v, w) {
			goto [((typeOf v) = List)] list throw;
	list:		goto [((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o"))] init throw;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr refr;
	refr:		goto [(((typeOf v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	er:		[rbase, rfield] := w;
	dflt:		xret := empty;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	elab:		skip;
	is_pr:		xret := "i__toObject"(rbase) with elab;
			l := xret;
			xret := "canPut"(l, rfield) with elab;
			goto [xret] cp reject;
	cp:		xret := "getProperty"(l, rfield) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] reject is_ad;
	is_ad:		ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad reject;
	ad:		s := l-nth(xret, 2.);
			m := metadata (s);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase, w) with elab;
			goto dflt;
	reject:		xret := "TypeError"();
			goto elab
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec OP_hasOwnProperty(xsc, vthis, v)
[[ types(#co : Bool, #prop : Str, #en : Bool, #wr : Bool) * (! (#v == empty)) * (xsc == _lvar_xsc) * (v == #prop) * (vthis == _$l_#l) * ((_$l_#md, "@class") ->@d "Object") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", #v, #wr, #en, #co }}) ]]
[[ types(#co : Bool, #prop : Str, #en : Bool, #wr : Bool) * (! (#v == empty)) * (xret == true) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * ((_$l_#md, "@class") ->@d "Object") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", #v, #wr, #en, #co }}) ]]
normal;

 [[ types(#prop : Str) * (xsc == _lvar_xsc) * (v == #prop) * (vthis == _$l_#l) * ((_$l_#md, "@class") ->@d "Object") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#prop : Str) * (xret == false) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * ((_$l_#md, "@class") ->@d "Object") * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal

proc OP_hasOwnProperty (xsc, vthis, v) {
			xret := "i__toString"(v) with elab;
			p := xret;
			xret := "i__toObject"(vthis) with elab;
			xret := "getOwnProperty"(xret, p) with elab;
			xret := (not (xret = undefined));
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec hasProperty(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #cls : List) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #cls : List) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_197, _lvar_198, _lvar_199, _lvar_200 }}, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List, _lvar_199 : Bool, _lvar_200 : Bool, _lvar_198 : Bool) * (#d == {{ "d", _lvar_197, _lvar_198, _lvar_199, _lvar_200 }}) * (! (_lvar_197 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "a", _lvar_202, _lvar_201, _lvar_203, _lvar_204 }}, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List, _lvar_203 : Bool, _lvar_204 : Bool) * (#d == {{ "a", _lvar_202, _lvar_201, _lvar_203, _lvar_204 }}) * (! (_lvar_202 == empty)) * (! (_lvar_201 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc hasProperty (l, prop) {
			xret := "getProperty"(l, prop) with elab;
	rlab:		xret := (not (xret = undefined));
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_object_with_call_construct(l, call, construct, len)
[[ types(#len : Num, #call : Str) * (call == #call) * (l == _$l_#l) * (construct == empty) * (len == #len) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@scope") ->@d #lvar_10) * ((_$l_#md, "@proto") ->@d #lvar_7) * ((_$l_#md, "@extensible") ->@d #lvar_9) * ((_$l_#md, "@class") ->@d #lvar_8) * ((_$l_#md, "@call") ->@d #lvar_11) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_6) ]]
[[ types(#len : Num, #call : Str) * (xret == _$l_#l) * (call == _lvar_call) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@call") ->@d #call) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal;

 [[ types(#construct : Str, #len : Num, #call : Str) * (call == #call) * (l == _$l_#l) * (construct == #construct) * (len == #len) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@scope") ->@d #lvar_16) * ((_$l_#md, "@proto") ->@d #lvar_13) * ((_$l_#md, "@extensible") ->@d #lvar_15) * ((_$l_#md, "@construct") ->@d #lvar_18) * ((_$l_#md, "@class") ->@d #lvar_14) * ((_$l_#md, "@call") ->@d #lvar_17) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_12) ]]
[[ types(#construct : Str, #len : Num, #call : Str) * (xret == _$l_#l) * (call == _lvar_call) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@construct") ->@d #construct) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@call") ->@d #call) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal

proc create_object_with_call_construct (l, call, construct, len) {
			xret := "create_default_object"(l, $lfun_proto, "Function", true);
			[xret, "length"] := {{ "d", len, false, false, false }};
			m := metadata (xret);
			[m, "@scope"] := empty;
			[m, "@call"] := call;
			goto [(construct = empty)] rlab cstr;
	cstr:		[m, "@construct"] := construct;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec i__isPrimitive(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_90 : Num) * (v == _lvar_90) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_91 : Bool) * (v == _lvar_91) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_92 : Str) * (v == _lvar_92) ]]
[[ types() * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_93 : Obj) * (v == _lvar_93) ]]
[[ types() * (xret == false) * (v == _lvar_v) ]]
normal

proc i__isPrimitive (v) {
			tv := (typeOf v);
	iu:		goto [(((((v = undefined) or (v = null)) or ((typeOf v) = Bool)) or ((typeOf v) = Num)) or ((typeOf v) = Str))] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Object_construct(xsc, vthis, l)
[[ types(#l : Undefined) * (#l == undefined) * (xsc == _lvar_xsc) * (l == undefined) * (vthis == _lvar_vthis) ]]
[[ types(#l : Undefined) * (#l == undefined) * (xret == _$l_xret) * (xsc == _lvar_xsc) * (l == _lvar_l) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_89, true) * MetaData (_$l__lvar_89, null) * empty_fields(_$l__lvar_89 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_89, "@proto") ->@d $lobj_proto) * ((_$l__lvar_89, "@extensible") ->@d true) * ((_$l__lvar_89, "@class") ->@d "Object") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_89) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Object_construct (xsc, vthis, l) {
			goto [((typeOf l) = Obj)] obj l1b;
	obj:		xret := l;
			goto rlab;
	l1b:		goto [((((typeOf l) = Bool) or ((typeOf l) = Num)) or ((typeOf l) = Str))] to_obj norm;
	to_obj:		xret := "i__toObject"(l);
			goto rlab;
	norm:		xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lobj_proto, "Object", true);
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__sameValue(v1, v2)
[[ types() * (v2 == 0.) * (v1 == 0.) ]]
[[ types() * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == -0.) * (v1 == -0.) ]]
[[ types() * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == 0.) * (v1 == -0.) ]]
[[ types() * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == -0.) * (v1 == 0.) ]]
[[ types() * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == _lvar_679) * (v1 == _lvar_679) ]]
[[ types() * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (! (_lvar_v1 == _lvar_v2)) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
[[ types() * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__sameValue (v1, v2) {
			goto [((typeOf v1) = Num)] test2 nonum;
	test2:		goto [((typeOf v2) = Num)] inan1 nonum;
	inan1:		goto [(not (v1 = v1))] inan2 zero1;
	inan2:		goto [(not (v2 = v2))] rt zero1;
	zero1:		goto [(v1 = 0.)] zero2 nonum;
	zero2:		goto [(v2 = 0.)] fix nonum;
	fix:		sv1 := (m_sgn v1);
			sv2 := (m_sgn v2);
			goto [(sv1 = sv2)] rt rf;
			goto rlab;
	nonum:		goto [(v1 = v2)] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toObject(v)
[[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_677, true) * MetaData (_$l__lvar_677, null) * empty_fields(_$l__lvar_677 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_677, "@proto") ->@d $lbool_proto) * ((_$l__lvar_677, "@primitiveValue") ->@d #v) * ((_$l__lvar_677, "@extensible") ->@d true) * ((_$l__lvar_677, "@class") ->@d "Boolean") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_677) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_678, true) * MetaData (_$l__lvar_678, null) * empty_fields(_$l__lvar_678 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_678, "@proto") ->@d $lnum_proto) * ((_$l__lvar_678, "@primitiveValue") ->@d #v) * ((_$l__lvar_678, "@extensible") ->@d true) * ((_$l__lvar_678, "@class") ->@d "Number") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_678) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc i__toObject (v) {
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw ib;
	ib:		goto [((typeOf v) = Bool)] bool inum;
	bool:		xret := "Boolean_construct"(undefined, undefined, v);
			goto rlab;
	inum:		goto [((typeOf v) = Num)] num is;
	num:		xret := "Number_construct"(undefined, undefined, v);
			goto rlab;
	is:		goto [((typeOf v) = Str)] str io;
	str:		xret := "String_construct"(undefined, undefined, v);
			goto rlab;
	io:		goto [((typeOf v) = Obj)] obj oops;
	obj:		xret := v;
			goto rlab;
	oops:		xret := "ToObject: This should not happen.";
	rlab:		skip;
	throw:		xret := "Here!";
			xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toBoolean(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == 0.) ]]
[[ types() * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (! (#v == 0.)) * (v == #v) ]]
[[ types(#v : Num) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == "") ]]
[[ types() * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (! (#v == "")) * (v == #v) ]]
[[ types(#v : Str) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__toBoolean (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := false;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := false;
			goto rlab;
	ib:		goto [((typeOf v) = Bool)] bool inum;
	bool:		xret := v;
			goto rlab;
	inum:		goto [((typeOf v) = Num)] num is;
	num:		goto [((v = 0.) or (not (v = v)))] is_f is_t;
	is:		goto [((typeOf v) = Str)] str io;
	str:		goto [(v = "")] is_f is_t;
			goto rlab;
	io:		goto [((typeOf v) = Obj)] obj oops;
	obj:		xret := true;
			goto rlab;
	is_t:		xret := true;
			goto rlab;
	is_f:		xret := false;
			goto rlab;
	oops:		xret := "ToBoolean: This should not happen.";
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec getProperty(l, prop)
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #cls : List) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #cls : List) * (xret == #d) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc getProperty (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] next rlab;
	next:		m := metadata (l);
			proto := [m, "@proto"];
			goto [(proto = null)] rlab call;
	call:		xret := "getProperty"(proto, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec Number_construct(xsc, vthis, v)
[[ types(#v : Num) * (xsc == _lvar_xsc) * (v == #v) * (vthis == _lvar_vthis) ]]
[[ types(#v : Num) * (xret == _$l_xret) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_385, true) * MetaData (_$l__lvar_385, null) * empty_fields(_$l__lvar_385 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_385, "@proto") ->@d $lnum_proto) * ((_$l__lvar_385, "@primitiveValue") ->@d #v) * ((_$l__lvar_385, "@extensible") ->@d true) * ((_$l__lvar_385, "@class") ->@d "Number") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_385) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Number_construct (xsc, vthis, v) {
	init:		pv := "i__toNumber"(v) with elab;
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lnum_proto, "Number", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: pv, elab;
};


spec get(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : Undefined, #cls : List) * (#d == undefined) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : Undefined, #cls : List) * (#d == undefined) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_243, _lvar_244, _lvar_245, _lvar_246 }}, #ls, #cls, #pv) * types(#l : Obj, _lvar_246 : Bool, _lvar_245 : Bool, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List, _lvar_244 : Bool) * (#d == {{ "d", _lvar_243, _lvar_244, _lvar_245, _lvar_246 }}) * (! (_lvar_243 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#l : Obj, #ls : List, #prop : Str, #pv : List, #d : List, #cls : List) * (xret == l-nth(#d, 1.)) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc get (l, prop) {
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, l) with elab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkObjectCoercible(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_205, true) * MetaData (_$l__lvar_205, null) * empty_fields(_$l__lvar_205 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_205, "@proto") ->@d $lterr_proto) * ((_$l__lvar_205, "@extensible") ->@d true) * ((_$l__lvar_205, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_205) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_206) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_206, true) * MetaData (_$l__lvar_206, null) * empty_fields(_$l__lvar_206 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_206, "@proto") ->@d $lterr_proto) * ((_$l__lvar_206, "@extensible") ->@d true) * ((_$l__lvar_206, "@class") ->@d "Error") ]]
normal;

 [[ types(_lvar_207 : Num) * (v == _lvar_207) ]]
[[ types() * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_208 : Bool) * (v == _lvar_208) ]]
[[ types() * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_209 : Str) * (v == _lvar_209) ]]
[[ types() * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_210 : Obj) * (v == _lvar_210) ]]
[[ types() * (xret == empty) * (v == _lvar_v) ]]
normal

proc i__checkObjectCoercible (v) {
			xret := empty;
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw other;
	other:		goto [(((((typeOf v) = Bool) or ((typeOf v) = Num)) or ((typeOf v) = Str)) or ((typeOf v) = Obj))] rlab oops;
	oops:		xret := "CheckObjectCoercible: This should not happen.";
	rlab:		skip;
	throw:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError_call(xsc, vthis, v)
[[ types() * (xsc == _lvar_xsc) * (v == undefined) * (vthis == _lvar_vthis) ]]
[[ types() * (xret == _$l_xret) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_196, true) * MetaData (_$l__lvar_196, null) * empty_fields(_$l__lvar_196 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_196, "@proto") ->@d $lserr_proto) * ((_$l__lvar_196, "@extensible") ->@d true) * ((_$l__lvar_196, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_196) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc SyntaxError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lserr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__getValue(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == null) ]]
[[ types() * (xret == null) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #obj : Obj, #ls : List, #d : Undefined, #field : Str, #lcls : List) * (#d == undefined) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #obj : Obj, #ls : List, #d : Undefined, #field : Str, #lcls : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, {{ "d", _lvar_150, _lvar_151, _lvar_152, _lvar_153 }}, #ls, #lcls, #lpv) * types(_lvar_153 : Bool, _lvar_151 : Bool, #lpv : List, #obj : Obj, #ls : List, #d : List, _lvar_152 : Bool, #field : Str, #lcls : List) * (#d == {{ "d", _lvar_150, _lvar_151, _lvar_152, _lvar_153 }}) * (! (_lvar_150 == empty)) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, #d, #ls, #lcls, #lpv) * types(#lpv : List, #obj : Obj, #ls : List, #d : List, #field : Str, #lcls : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #d : Undefined, #field : Str, #lcls : List) * (#d == undefined) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #d : Undefined, #field : Str, #lcls : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, {{ "d", _lvar_154, _lvar_155, _lvar_156, _lvar_157 }}, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #d : List, _lvar_156 : Bool, #field : Str, _lvar_155 : Bool, #lcls : List, _lvar_157 : Bool) * (#d == {{ "d", _lvar_154, _lvar_155, _lvar_156, _lvar_157 }}) * (! (_lvar_154 == empty)) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, #d, #ls, #lcls, #lpv) * types(#lpv : List, #ls : List, #d : List, #field : Str, #lcls : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ types() * (v == {{ "v", _$l_#obj, #field }}) * ((_$l_#obj, #field) ->@d #value) ]]
[[ types() * (xret == #value) * (v == _lvar_v) * ((_$l_#obj, #field) ->@d #value) ]]
normal;

 [[ types(#field : Str) * (v == {{ "v", undefined, #field }}) ]]
[[ types(#field : Str) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_158, true) * MetaData (_$l__lvar_158, null) * empty_fields(_$l__lvar_158 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_158, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_158, "@extensible") ->@d true) * ((_$l__lvar_158, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_158) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#field : Str) * (v == {{ "o", undefined, #field }}) ]]
[[ types(#field : Str) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_159) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_159, true) * MetaData (_$l__lvar_159, null) * empty_fields(_$l__lvar_159 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_159, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_159, "@extensible") ->@d true) * ((_$l__lvar_159, "@class") ->@d "Error") ]]
error;

 [[ Pi($lbool_proto, #field, undefined, ({{ $lbool_proto }} @ #ols), ({{ "Boolean" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : Undefined, #field : Str, #b : Bool) * (#d == undefined) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, undefined, ({{ $lbool_proto }} @ #ols), ({{ "Boolean" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : Undefined, #field : Str, #b : Bool) * (#d == undefined) * (xobj == _$l_#o) * (xret == undefined) * (v == _lvar_v) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_160) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_160, true) * MetaData (_$l__lvar_160, null) * empty_fields(_$l__lvar_160 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_160, "@proto") ->@d $lbool_proto) * ((_$l__lvar_160, "@primitiveValue") ->@d #b) * ((_$l__lvar_160, "@extensible") ->@d true) * ((_$l__lvar_160, "@class") ->@d "Boolean") ]]
normal;

 [[ Pi($lbool_proto, #field, {{ "d", _lvar_167, _lvar_168, _lvar_169, _lvar_170 }}, ({{ $lbool_proto }} @ #ols), ({{ "Boolean" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, _lvar_170 : Bool, #d : List, #field : Str, #b : Bool, _lvar_168 : Bool, _lvar_169 : Bool) * (#d == {{ "d", _lvar_167, _lvar_168, _lvar_169, _lvar_170 }}) * (! (_lvar_167 == empty)) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, #d, ({{ $lbool_proto }} @ #ols), ({{ "Boolean" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : List, #field : Str, #b : Bool) * (xobj == _$l_#o) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * Extensible (_$l__lvar_171, true) * MetaData (_$l__lvar_171, null) * empty_fields(_$l__lvar_171 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_171, "@proto") ->@d $lbool_proto) * ((_$l__lvar_171, "@primitiveValue") ->@d #b) * ((_$l__lvar_171, "@extensible") ->@d true) * ((_$l__lvar_171, "@class") ->@d "Boolean") * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_171) * empty_fields(_$l_#o : -{  }-) ]]
normal;

 [[ Pi($lnum_proto, #field, undefined, ({{ $lnum_proto }} @ #ols), ({{ "Number" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : Undefined, #field : Str, #n : Num) * (#d == undefined) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, undefined, ({{ $lnum_proto }} @ #ols), ({{ "Number" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : Undefined, #field : Str, #n : Num) * (#d == undefined) * (xobj == _$l_#o) * (xret == undefined) * (v == _lvar_v) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_178) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_178, true) * MetaData (_$l__lvar_178, null) * empty_fields(_$l__lvar_178 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_178, "@proto") ->@d $lnum_proto) * ((_$l__lvar_178, "@primitiveValue") ->@d #n) * ((_$l__lvar_178, "@extensible") ->@d true) * ((_$l__lvar_178, "@class") ->@d "Number") ]]
normal;

 [[ Pi($lnum_proto, #field, {{ "d", _lvar_185, _lvar_186, _lvar_187, _lvar_188 }}, ({{ $lnum_proto }} @ #ols), ({{ "Number" }} @ #ocls), ({{ "" }} @ #opv)) * types(_lvar_188 : Bool, #opv : List, #ocls : List, _lvar_186 : Bool, #ols : List, #d : List, #field : Str, _lvar_187 : Bool, #n : Num) * (#d == {{ "d", _lvar_185, _lvar_186, _lvar_187, _lvar_188 }}) * (! (_lvar_185 == empty)) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, #d, ({{ $lnum_proto }} @ #ols), ({{ "Number" }} @ #ocls), ({{ "" }} @ #opv)) * types(#opv : List, #ocls : List, #ols : List, #d : List, #field : Str, #n : Num) * (xobj == _$l_#o) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_189) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_189, true) * MetaData (_$l__lvar_189, null) * empty_fields(_$l__lvar_189 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_189, "@proto") ->@d $lnum_proto) * ((_$l__lvar_189, "@primitiveValue") ->@d #n) * ((_$l__lvar_189, "@extensible") ->@d true) * ((_$l__lvar_189, "@class") ->@d "Number") ]]
normal

proc i__getValue (v) {
			goto [((typeOf v) = List)] rcand dflt;
	rcand:		rtype := l-nth(v, 0.);
			goto [((rtype = "v") or (rtype = "o"))] init dflt;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr ref;
	is_pr:		xobj := "i__toObject"(rbase) with pelab;
			[* fold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			xret := "getProperty"(xobj, rfield) with pelab;
			[* unfold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase) with pelab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	ref:		goto [(((typeOf v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	er:		xret := [rbase, rfield];
			goto rlab;
	dflt:		xret := v;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	pelab:		xret := PHI(xobj, xret, xret, xret, xret, xret);
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError_call(xsc, vthis, v)
[[ types() * (xsc == _lvar_xsc) * (v == undefined) * (vthis == _lvar_vthis) ]]
[[ types() * (xret == _$l_xret) * (xsc == _lvar_xsc) * (v == _lvar_v) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_149, true) * MetaData (_$l__lvar_149, null) * empty_fields(_$l__lvar_149 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_149, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_149, "@extensible") ->@d true) * ((_$l__lvar_149, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_149) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc ReferenceError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lrferr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError(v)
[[ types() * (v == undefined) ]]
[[ types() * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_108, true) * MetaData (_$l__lvar_108, null) * empty_fields(_$l__lvar_108 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_108, "@proto") ->@d $lserr_proto) * ((_$l__lvar_108, "@extensible") ->@d true) * ((_$l__lvar_108, "@class") ->@d "Error") * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_108) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc SyntaxError (v) {
			xret := "SyntaxError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};



