pred ErrorObject (l, pr): 
types(_lvar_854 : Obj, l : Obj, pr : Obj) * (pr == _lvar_854) * (l == _$l_l) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l__lvar_66) * Extensible (_$l__lvar_66, true) * MetaData (_$l__lvar_66, null) * empty_fields(_$l__lvar_66 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_66, "@proto") ->@d _lvar_854) * ((_$l__lvar_66, "@class") ->@d "Error") * ((_$l__lvar_66, "@extensible") ->@d true);

pred isClass (c, case): 
types(c : Str, case : Str, _lvar_799 : Str) * (! (_lvar_799 == "String")) * (case == "Non-String") * (c == _lvar_799),
 types(c : Str, _lvar_797 : Str, case : Str) * (! (_lvar_797 == "Array")) * (case == "Non-Array") * (c == _lvar_797),
 types(c : Str, case : Str) * (case == "String") * (c == "String"),
 types(c : Str, case : Str) * (case == "Array") * (c == "Array");

pred DataPropConst (l, prop, v): 
types(#e : Bool, l : Obj, _lvar_800 : Str, prop : Str) * (! (_lvar_v == empty)) * (v == _lvar_v) * (prop == _lvar_800) * (l == _$l_l) * ((_$l_l, _lvar_800) ->@d {{ "d", _lvar_v, false, #e, false }});

pred initialHeapPost (globals): 
types(globals : Set, _lvar_857 : Set) * (globals == _lvar_857) * Extensible (_$l__lvar_68, true) * MetaData (_$l__lvar_68, null) * empty_fields(_$l__lvar_68 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_68, "@call") ->@d "Error_call") * ((_$l__lvar_68, "@construct") ->@d "Error_construct") * ((_$l__lvar_68, "@proto") ->@d $lfun_proto) * ((_$l__lvar_68, "@class") ->@d "Function") * ((_$l__lvar_68, "@extensible") ->@d true) * ((_$l__lvar_68, "@scope") ->@d empty) * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_70) * empty_fields($lbool_proto : -{ "constructor", "toString", "valueOf" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l__lvar_70, true) * MetaData (_$l__lvar_70, null) * empty_fields(_$l__lvar_70 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_70, "@proto") ->@d $lobj_proto) * ((_$l__lvar_70, "@class") ->@d "Boolean") * ((_$l__lvar_70, "@extensible") ->@d true) * ((_$l__lvar_70, "@primitiveValue") ->@d false) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_69) * empty_fields($lnum_proto : -{ "constructor", "toExponential", "toFixed", "toLocaleString", "toPrecision", "toString", "valueOf" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l__lvar_71, true) * MetaData (_$l__lvar_71, null) * empty_fields(_$l__lvar_71 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_71, "@scope") ->@d empty) * ((_$l__lvar_71, "@call") ->@d "FP_default") * ((_$l__lvar_71, "@proto") ->@d $lobj_proto) * ((_$l__lvar_71, "@class") ->@d "Function") * ((_$l__lvar_71, "@extensible") ->@d true) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_67) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible (_$l__lvar_67, true) * MetaData (_$l__lvar_67, null) * empty_fields(_$l__lvar_67 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_67, "@proto") ->@d $lobj_proto) * ((_$l__lvar_67, "@class") ->@d "Error") * ((_$l__lvar_67, "@extensible") ->@d true) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_73) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_72) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_73, true) * MetaData (_$l__lvar_73, null) * empty_fields(_$l__lvar_73 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_73, "@proto") ->@d null) * ((_$l__lvar_73, "@class") ->@d "Object") * ((_$l__lvar_73, "@extensible") ->@d true) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_74) * empty_fields($lg : -u- (_lvar_857, -{ "Error" }-)) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_68) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * Extensible (_$l__lvar_69, true) * MetaData (_$l__lvar_69, null) * empty_fields(_$l__lvar_69 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_69, "@proto") ->@d $lobj_proto) * ((_$l__lvar_69, "@class") ->@d "Number") * ((_$l__lvar_69, "@extensible") ->@d true) * ((_$l__lvar_69, "@primitiveValue") ->@d 0.) * Extensible (_$l__lvar_72, true) * MetaData (_$l__lvar_72, null) * empty_fields(_$l__lvar_72 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_72, "@proto") ->@d $lfun_proto) * ((_$l__lvar_72, "@class") ->@d "Function") * ((_$l__lvar_72, "@extensible") ->@d true) * ((_$l__lvar_72, "@call") ->@d "OP_hasOwnProperty") * ((_$l__lvar_72, "@scope") ->@d empty) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_71) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_74, true) * MetaData (_$l__lvar_74, null) * empty_fields(_$l__lvar_74 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_74, "@proto") ->@d $lobj_proto) * ((_$l__lvar_74, "@class") ->@d "Object") * ((_$l__lvar_74, "@extensible") ->@d true);

pred desc_enum (d, v): 
types(_lvar_856 : List, d : List) * (d == _lvar_856) * (v == l-nth(_lvar_856, 3.));

pred desc_set (d, v): 
types(d : List, _lvar_855 : List) * (d == _lvar_855) * (v == l-nth(_lvar_855, 2.));

pred desc_conf (d, v): 
types(d : List, _lvar_859 : List) * (d == _lvar_859) * (v == l-nth(_lvar_859, 4.));

pred desc_val (d, v): 
types(d : List, _lvar_858 : List) * (d == _lvar_858) * (v == l-nth(_lvar_858, 1.));

pred JSObjWithProto (l, proto): 
types(l : Obj) * (proto == _lvar_proto) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d _lvar_proto) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred DataDescriptor (d): 
types(#denum : Bool, d : List, #dwrit : Bool, #dconf : Bool) * (! (#dval == empty)) * (d == {{ "d", #dval, #dwrit, #denum, #dconf }});

pred GenericDescriptor (d): 
types(d : List) * (d == {{ "g", #genum, #gconf, #gval, #gwrit, #gget, #gset }});

pred JSObjGeneral (l, proto, class, ext): 
types(class : Str, l : Obj, _lvar_802 : Bool, ext : Bool, _lvar_803 : Str) * (proto == _lvar_proto) * (class == _lvar_803) * (ext == _lvar_802) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d _lvar_proto) * ((_$l_#md, "@class") ->@d _lvar_803) * ((_$l_#md, "@extensible") ->@d _lvar_802) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred Pi (l, prop, d, ls, lcls, lpv): 
types(_lvar_841 : Str, ls : List, lcls : List, d : Undefined, l : Obj, #cls : Str, prop : Str, lpv : List) * (! (#cls == "String")) * (lpv == {{ "" }}) * (d == undefined) * (ls == {{ _$l_l }}) * (prop == _lvar_841) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@proto") ->@d null) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_841) ->@d none),
 Pi(#lp, _lvar_837, _lvar_d, (#lp :: #ols), (#pcls :: #ocls), (#ppv :: #otv)) * types(#otv : List, #ocls : List, #lcls : List, lcls : List, ls : List, _lvar_837 : Str, #lp : Obj, l : Obj, #ols : List, prop : Str, #cls : Str, #ppv : Str, #lls : List, lpv : List, #pcls : Str, #lpv : List) * (#lcls == (#pcls :: #ocls)) * (#lls == (#lp :: #ols)) * (#lpv == (#ppv :: #otv)) * (! (#cls == "String")) * (lpv == ("" :: (#ppv :: #otv))) * (d == _lvar_d) * (ls == (_$l_l :: (#lp :: #ols))) * (prop == _lvar_837) * (l == _$l_l) * (lcls == (#cls :: (#pcls :: #ocls))) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@proto") ->@d #lp) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_837) ->@d none),
 types(_lvar_832 : Str, lcls : List, ls : List, d : List, l : Obj, _lvar_6 : Bool, prop : Str, _lvar_14 : Bool, lpv : List, _lvar_15 : Bool, _lvar_7 : Bool) * (_lvar_4 == _lvar_12) * (_lvar_6 == _lvar_14) * (_lvar_5 == _lvar_13) * (_lvar_7 == _lvar_15) * (! (_lvar_13 == empty)) * (! (_lvar_12 == empty)) * (lpv == {{ "" }}) * (d == {{ "a", _lvar_13, _lvar_12, _lvar_14, _lvar_15 }}) * (ls == {{ _$l_l }}) * (prop == _lvar_832) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_832) ->@d {{ "a", _lvar_13, _lvar_12, _lvar_14, _lvar_15 }}),
 types(_lvar_11 : Bool, _lvar_1 : Bool, lcls : List, ls : List, _lvar_2 : Bool, d : List, l : Obj, prop : Str, _lvar_10 : Bool, lpv : List, _lvar_817 : Str, _lvar_3 : Bool, _lvar_9 : Bool) * (_lvar_2 == _lvar_10) * (_lvar_3 == _lvar_11) * (_lvar_0 == _lvar_8) * (_lvar_1 == _lvar_9) * (! (_lvar_8 == empty)) * (lpv == {{ "" }}) * (d == {{ "d", _lvar_8, _lvar_9, _lvar_10, _lvar_11 }}) * (ls == {{ _$l_l }}) * (prop == _lvar_817) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_817) ->@d {{ "d", _lvar_8, _lvar_9, _lvar_10, _lvar_11 }});

pred isReferenceError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l__lvar_75) * empty_fields(_$l_l : -{  }-) * Extensible (_$l__lvar_75, true) * MetaData (_$l__lvar_75, null) * empty_fields(_$l__lvar_75 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_75, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_75, "@class") ->@d "Error") * ((_$l__lvar_75, "@extensible") ->@d true);

pred initialHeapPre (): 
types() * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_36) * empty_fields($lbool_proto : -{  }-) * Extensible (_$l__lvar_35, true) * MetaData (_$l__lvar_35, null) * empty_fields(_$l__lvar_35 : -{  }-) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_35) * empty_fields($lnum_proto : -{  }-) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_33) * empty_fields($lerr_proto : -{  }-) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_38) * empty_fields($lobj_proto : -{  }-) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_32) * empty_fields($lop_hasOwnProperty : -{  }-) * Extensible (_$l__lvar_39, true) * MetaData (_$l__lvar_39, null) * empty_fields(_$l__lvar_39 : -{  }-) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_39) * empty_fields($lg : -{  }-) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_34) * empty_fields($lerr : -{  }-) * Extensible (_$l__lvar_34, true) * MetaData (_$l__lvar_34, null) * empty_fields(_$l__lvar_34 : -{  }-) * Extensible (_$l__lvar_36, true) * MetaData (_$l__lvar_36, null) * empty_fields(_$l__lvar_36 : -{  }-) * Extensible (_$l__lvar_38, true) * MetaData (_$l__lvar_38, null) * empty_fields(_$l__lvar_38 : -{  }-) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_37) * empty_fields($lfun_proto : -{  }-) * Extensible (_$l__lvar_37, true) * MetaData (_$l__lvar_37, null) * empty_fields(_$l__lvar_37 : -{  }-) * Extensible (_$l__lvar_33, true) * MetaData (_$l__lvar_33, null) * empty_fields(_$l__lvar_33 : -{  }-) * Extensible (_$l__lvar_32, true) * MetaData (_$l__lvar_32, null) * empty_fields(_$l__lvar_32 : -{  }-);

pred BooleanObject (l, b): 
types(_lvar_842 : Bool, l : Obj, b : Bool) * (b == _lvar_842) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lbool_proto) * ((_$l_#md, "@class") ->@d "Boolean") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@primitiveValue") ->@d _lvar_842) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred DataPropGen (l, prop, v, writ, enum, conf): 
types(_lvar_863 : Bool, conf : Bool, writ : Bool, _lvar_864 : Str, _lvar_862 : Bool, l : Obj, prop : Str, enum : Bool, _lvar_861 : Bool) * (! (_lvar_v == empty)) * (enum == _lvar_862) * (v == _lvar_v) * (conf == _lvar_861) * (writ == _lvar_863) * (prop == _lvar_864) * (l == _$l_l) * ((_$l_l, _lvar_864) ->@d {{ "d", _lvar_v, _lvar_863, _lvar_862, _lvar_861 }});

pred JSObject (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lobj_proto) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred isTypeError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l__lvar_40) * empty_fields(_$l_l : -{  }-) * Extensible (_$l__lvar_40, true) * MetaData (_$l__lvar_40, null) * empty_fields(_$l__lvar_40 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_40, "@proto") ->@d $lterr_proto) * ((_$l__lvar_40, "@class") ->@d "Error") * ((_$l__lvar_40, "@extensible") ->@d true);

pred isSyntaxError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l__lvar_41, true) * MetaData (_$l__lvar_41, null) * empty_fields(_$l__lvar_41 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_41, "@proto") ->@d $lserr_proto) * ((_$l__lvar_41, "@class") ->@d "Error") * ((_$l__lvar_41, "@extensible") ->@d true) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l__lvar_41);

pred ErrorObjectWithMessage (l, m): 
types(_lvar_843 : Str, m : Str, l : Obj) * (l == _$l_l) * (m == _lvar_843) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lerr_proto) * ((_$l_#md, "@class") ->@d "Error") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "message") ->@d {{ "d", _lvar_843, true, false, true }}) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred DataProp (l, prop, v): 
types(l : Obj, prop : Str, _lvar_845 : Str) * (! (_lvar_v == empty)) * (v == _lvar_v) * (prop == _lvar_845) * (l == _$l_l) * ((_$l_l, _lvar_845) ->@d {{ "d", _lvar_v, true, true, true }});

pred desc_writ (d, v): 
types(_lvar_844 : List, d : List) * (d == _lvar_844) * (v == l-nth(_lvar_844, 2.));

pred NumberObject (l, n): 
types(_lvar_865 : Num, l : Obj, n : Num) * (n == _lvar_865) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lnum_proto) * ((_$l_#md, "@class") ->@d "Number") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@primitiveValue") ->@d _lvar_865) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md);

pred NumberPrototype (): 
types() * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l_#npmd) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l_#npmd, true) * MetaData (_$l_#npmd, null) * empty_fields(_$l_#npmd : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#npmd, "@proto") ->@d $lobj_proto) * ((_$l_#npmd, "@class") ->@d "Number") * ((_$l_#npmd, "@extensible") ->@d true) * ((_$l_#npmd, "@primitiveValue") ->@d 0.);

pred BooleanPrototype (): 
types() * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l_#bpmd) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l_#bpmd, true) * MetaData (_$l_#bpmd, null) * empty_fields(_$l_#bpmd : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#bpmd, "@proto") ->@d $lobj_proto) * ((_$l_#bpmd, "@class") ->@d "Boolean") * ((_$l_#bpmd, "@extensible") ->@d true) * ((_$l_#bpmd, "@primitiveValue") ->@d false);

pred AccessorDescriptor (d): 
types(#denum : Bool, d : List, #dconf : Bool) * (! (#dget == empty)) * (! (#dset == empty)) * (d == {{ "a", #dget, #dset, #denum, #dconf }});

pred Descriptor (d): 
types(_lvar_48 : Bool, d : List, _lvar_49 : Bool) * (! (_lvar_47 == empty)) * (! (_lvar_46 == empty)) * (d == {{ "a", _lvar_47, _lvar_46, _lvar_48, _lvar_49 }}),
 types(_lvar_43 : Bool, d : List, _lvar_44 : Bool, _lvar_45 : Bool) * (! (_lvar_42 == empty)) * (d == {{ "d", _lvar_42, _lvar_43, _lvar_44, _lvar_45 }});

pred desc_get (d, v): 
types(d : List, _lvar_849 : List) * (d == _lvar_849) * (v == l-nth(_lvar_849, 1.));

pred Cell_s (l, prop, d): 
types(_lvar_852 : Str, d : List, _lvar_57 : Bool, l : Obj, prop : Str, _lvar_56 : Bool) * (! (_lvar_55 == empty)) * (! (_lvar_54 == empty)) * (d == {{ "a", _lvar_55, _lvar_54, _lvar_56, _lvar_57 }}) * (prop == _lvar_852) * (l == _$l_l) * ((_$l_l, _lvar_852) ->@d {{ "a", _lvar_55, _lvar_54, _lvar_56, _lvar_57 }}),
 types(_lvar_53 : Bool, d : List, l : Obj, _lvar_51 : Bool, prop : Str, _lvar_52 : Bool, _lvar_850 : Str) * (! (_lvar_50 == empty)) * (d == {{ "d", _lvar_50, _lvar_51, _lvar_52, _lvar_53 }}) * (prop == _lvar_850) * (l == _$l_l) * ((_$l_l, _lvar_850) ->@d {{ "d", _lvar_50, _lvar_51, _lvar_52, _lvar_53 }});

pred EmptyExtensibleObject (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{  }-) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) * empty_fields(_$l_l : -{  }-);

pred Cell_o (l, prop, d): 
types(_lvar_82 : Bool, _lvar_873 : Str, _lvar_83 : Bool, d : List, l : Obj, prop : Str) * (! (_lvar_81 == empty)) * (! (_lvar_80 == empty)) * (d == {{ "a", _lvar_81, _lvar_80, _lvar_82, _lvar_83 }}) * (prop == _lvar_873) * (l == _$l_l) * ((_$l_l, _lvar_873) ->@d {{ "a", _lvar_81, _lvar_80, _lvar_82, _lvar_83 }}),
 types(d : List, l : Obj, prop : Str, _lvar_79 : Bool, _lvar_871 : Str, _lvar_77 : Bool, _lvar_78 : Bool) * (! (_lvar_76 == empty)) * (d == {{ "d", _lvar_76, _lvar_77, _lvar_78, _lvar_79 }}) * (prop == _lvar_871) * (l == _$l_l) * ((_$l_l, _lvar_871) ->@d {{ "d", _lvar_76, _lvar_77, _lvar_78, _lvar_79 }}),
 types(d : None, _lvar_870 : Str, l : Obj, prop : Str) * (d == none) * (prop == _lvar_870) * (l == _$l_l) * ((_$l_l, _lvar_870) ->@d none);

pred JSFunctionObject (l, fid, sc, len, proto): 
types(sc : List, fid : Str, _lvar_867 : Num, l : Obj, _lvar_866 : Obj, _lvar_868 : List, len : Num, proto : Obj, _lvar_869 : Str) * (proto == _lvar_866) * (l == _$l_l) * (len == _lvar_867) * (fid == _lvar_869) * (sc == _lvar_868) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@call") ->@d _lvar_869) * ((_$l_#md, "@construct") ->@d _lvar_869) * ((_$l_#md, "@scope") ->@d _lvar_868) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_867, false, false, false }}) * ((_$l_l, "arguments") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_l, "caller") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_l, "prototype") ->@d {{ "d", _lvar_866, true, false, false }});

pred initialHeapPostWeak (): 
types() * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_61) * empty_fields($lbool_proto : -{ "constructor", "toString", "valueOf" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l__lvar_65, true) * MetaData (_$l__lvar_65, null) * empty_fields(_$l__lvar_65 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_65, "@proto") ->@d $lobj_proto) * ((_$l__lvar_65, "@class") ->@d "Object") * ((_$l__lvar_65, "@extensible") ->@d true) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_60) * empty_fields($lnum_proto : -{ "constructor", "toExponential", "toFixed", "toLocaleString", "toPrecision", "toString", "valueOf" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l__lvar_59, true) * MetaData (_$l__lvar_59, null) * empty_fields(_$l__lvar_59 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_59, "@call") ->@d "Error_call") * ((_$l__lvar_59, "@construct") ->@d "Error_construct") * ((_$l__lvar_59, "@proto") ->@d $lfun_proto) * ((_$l__lvar_59, "@class") ->@d "Function") * ((_$l__lvar_59, "@extensible") ->@d true) * ((_$l__lvar_59, "@scope") ->@d empty) * Extensible (_$l__lvar_63, true) * MetaData (_$l__lvar_63, null) * empty_fields(_$l__lvar_63 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_63, "@proto") ->@d $lfun_proto) * ((_$l__lvar_63, "@class") ->@d "Function") * ((_$l__lvar_63, "@extensible") ->@d true) * ((_$l__lvar_63, "@call") ->@d "OP_hasOwnProperty") * ((_$l__lvar_63, "@scope") ->@d empty) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_58) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_64) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_63) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_64, true) * MetaData (_$l__lvar_64, null) * empty_fields(_$l__lvar_64 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_64, "@proto") ->@d null) * ((_$l__lvar_64, "@class") ->@d "Object") * ((_$l__lvar_64, "@extensible") ->@d true) * Extensible (_$l__lvar_58, true) * MetaData (_$l__lvar_58, null) * empty_fields(_$l__lvar_58 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_58, "@proto") ->@d $lobj_proto) * ((_$l__lvar_58, "@class") ->@d "Error") * ((_$l__lvar_58, "@extensible") ->@d true) * Extensible (_$l__lvar_62, true) * MetaData (_$l__lvar_62, null) * empty_fields(_$l__lvar_62 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_62, "@scope") ->@d empty) * ((_$l__lvar_62, "@call") ->@d "FP_default") * ((_$l__lvar_62, "@proto") ->@d $lobj_proto) * ((_$l__lvar_62, "@class") ->@d "Function") * ((_$l__lvar_62, "@extensible") ->@d true) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_65) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_59) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_62) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_61, true) * MetaData (_$l__lvar_61, null) * empty_fields(_$l__lvar_61 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_61, "@proto") ->@d $lobj_proto) * ((_$l__lvar_61, "@class") ->@d "Boolean") * ((_$l__lvar_61, "@extensible") ->@d true) * ((_$l__lvar_61, "@primitiveValue") ->@d false) * Extensible (_$l__lvar_60, true) * MetaData (_$l__lvar_60, null) * empty_fields(_$l__lvar_60 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_60, "@proto") ->@d $lobj_proto) * ((_$l__lvar_60, "@class") ->@d "Number") * ((_$l__lvar_60, "@extensible") ->@d true) * ((_$l__lvar_60, "@primitiveValue") ->@d 0.);

pred JSBIFunction (l, fid, len): 
types(fid : Str, _lvar_878 : Str, l : Obj, len : Num, _lvar_877 : Num) * (l == _$l_l) * (len == _lvar_877) * (fid == _lvar_878) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@call") ->@d _lvar_878) * ((_$l_#md, "@scope") ->@d empty) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_877, false, false, false }});

pred BIFunctionObject (l, len, proto): 
types(_lvar_875 : Obj, l : Obj, len : Num, proto : Obj, _lvar_876 : Num) * (proto == _lvar_875) * (l == _$l_l) * (len == _lvar_876) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_876, false, false, false }}) * ((_$l_l, "prototype") ->@d {{ "d", _lvar_875, false, false, false }});


spec TypeError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_773, true) * MetaData (_$l__lvar_773, null) * empty_fields(_$l__lvar_773 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_773, "@proto") ->@d $lterr_proto) * ((_$l__lvar_773, "@class") ->@d "Error") * ((_$l__lvar_773, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_773) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc TypeError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lterr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec TypeError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_683, true) * MetaData (_$l__lvar_683, null) * empty_fields(_$l__lvar_683 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_683, "@proto") ->@d $lterr_proto) * ((_$l__lvar_683, "@class") ->@d "Error") * ((_$l__lvar_683, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_683) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc TypeError (v) {
			xret := "TypeError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__isCallable(l)
[[ types(l : Obj) * (l == _$l_l) * ((_$l_#md, "@call") ->@d none) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, xret : Bool) * (xret == false) * (l == _$l_l) * ((_$l_#md, "@call") ->@d none) * MetaData (_$l_l, _$l_#md) ]]
normal;

 [[ types(l : Obj) * (! (#y == none)) * (l == _$l_l) * ((_$l_#md, "@call") ->@d #y) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, xret : Bool) * (xret == true) * (l == _$l_l) * ((_$l_#md, "@call") ->@d #y) * MetaData (_$l_l, _$l_#md) ]]
normal

proc i__isCallable (l) {
			xret := false;
			goto [(typeOf(l) = Obj)] obj rlab;
	obj:		m := metadata (l);
			xret := hasField(m,"@call");
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec defineOwnProperty(l, prop, desc, throw)
[[ types(_lvar_339 : Bool, #desc : List, _lvar_340 : Bool, l : Obj, #cls : Str, #throw : Bool, _lvar_341 : Bool, #prop : Str) * (#desc == {{ "d", _lvar_338, _lvar_339, _lvar_340, _lvar_341 }}) * (! (_lvar_338 == empty)) * (! (#cls == "Array")) * (! (#cls == "String")) * (throw == #throw) * (desc == {{ "d", _lvar_338, _lvar_339, _lvar_340, _lvar_341 }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(_lvar_343 : Bool, #desc : List, _lvar_345 : Bool, #cls : Str, _lvar_344 : Bool, #throw : Bool, #prop : Str) * (#desc == {{ "d", _lvar_342, _lvar_343, _lvar_344, _lvar_345 }}) * (! (_lvar_342 == empty)) * (throw == _lvar_throw) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_342, _lvar_343, _lvar_344, _lvar_345 }}) ]]
normal;

 [[ types(#dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, #dec : Bool, #dcc : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_354, true, #dec, #dcc }}) * (#desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (! (_lvar_354 == empty)) * (! (#gval == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_354, true, #dec, #dcc }}) ]]
[[ types(#dcur : List, #desc : List, #cls : Str, #ext : Bool, #dec : Bool, xret : Bool, #dcc : Bool, #prop : Str) * (! (#gval == empty)) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", #gval, true, #dec, #dcc }}) ]]
normal;

 [[ types(#dcur : List, #desc : List, _lvar_384 : Bool, l : Obj, _lvar_383 : Bool, _lvar_375 : Bool, #cls : Str, _lvar_385 : Bool, #ext : Bool, _lvar_376 : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_374, _lvar_375, _lvar_376, true }}) * (#desc == {{ "d", _lvar_382, _lvar_383, _lvar_384, _lvar_385 }}) * (! (_lvar_382 == empty)) * (! (_lvar_374 == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "d", _lvar_382, _lvar_383, _lvar_384, _lvar_385 }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_374, _lvar_375, _lvar_376, true }}) ]]
[[ types(_lvar_387 : Bool, _lvar_389 : Bool, #dcur : List, #desc : List, #cls : Str, #ext : Bool, xret : Bool, _lvar_388 : Bool, #prop : Str) * (#desc == {{ "d", _lvar_386, _lvar_387, _lvar_388, _lvar_389 }}) * (! (_lvar_386 == empty)) * (! (#cls == "Array")) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_386, _lvar_387, _lvar_388, _lvar_389 }}) ]]
normal;

 [[ types(#dcur : List, #desc : List, l : Obj, #cls : Str, _lvar_395 : Bool, #ext : Bool, #enum : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_402, true, #enum, false }}) * (#desc == {{ "d", _lvar_394, _lvar_395, #enum, false }}) * (! (_lvar_402 == empty)) * (! (_lvar_394 == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "d", _lvar_394, _lvar_395, #enum, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_402, true, #enum, false }}) ]]
[[ types(#dcur : List, #desc : List, _lvar_411 : Bool, _lvar_413 : Bool, #cls : Str, #ext : Bool, #enum : Bool, xret : Bool, #prop : Str, _lvar_412 : Bool) * (#desc == {{ "d", _lvar_410, _lvar_411, _lvar_412, _lvar_413 }}) * (! (_lvar_410 == empty)) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_410, _lvar_411, _lvar_412, _lvar_413 }}) ]]
normal;

 [[ types(l : Obj, #cls : Str, throw : Bool, #prop : Str) * (! (#cls == "Array")) * (throw == true) * (desc == #desc) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Obj, #prop : Str) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_426) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_426, true) * MetaData (_$l__lvar_426, null) * empty_fields(_$l__lvar_426 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_426, "@proto") ->@d $lterr_proto) * ((_$l__lvar_426, "@class") ->@d "Error") * ((_$l__lvar_426, "@extensible") ->@d true) ]]
error;

 [[ types(l : Obj, #cls : Str, throw : Bool, #prop : Str) * (! (#cls == "Array")) * (throw == false) * (desc == #desc) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Bool, #prop : Str) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_465 : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, _lvar_464 : Bool, #ext : Bool, _lvar_452 : Bool, throw : Bool, #prop : Str, _lvar_453 : Bool) * (#dcur == {{ "d", _lvar_463, _lvar_464, _lvar_465, false }}) * (#desc == {{ "d", _lvar_451, _lvar_452, _lvar_453, true }}) * (! (_lvar_463 == empty)) * (! (_lvar_451 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_451, _lvar_452, _lvar_453, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_463, _lvar_464, _lvar_465, false }}) ]]
[[ types(#dcur : List, #desc : List, _lvar_474 : Bool, #cls : Str, _lvar_473 : Bool, #ext : Bool, xret : Obj, _lvar_475 : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_472, _lvar_473, _lvar_474, _lvar_475 }}) * (! (_lvar_472 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * Extensible (_$l__lvar_471, true) * MetaData (_$l__lvar_471, null) * empty_fields(_$l__lvar_471 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_471, "@proto") ->@d $lterr_proto) * ((_$l__lvar_471, "@class") ->@d "Error") * ((_$l__lvar_471, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_472, _lvar_473, _lvar_474, _lvar_475 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_471) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, _lvar_469 : Bool, _lvar_452 : Bool, throw : Bool, #prop : Str, _lvar_453 : Bool) * (#dcur == {{ "a", _lvar_468, _lvar_467, _lvar_469, false }}) * (#desc == {{ "d", _lvar_451, _lvar_452, _lvar_453, true }}) * (! (_lvar_468 == empty)) * (! (_lvar_467 == empty)) * (! (_lvar_451 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_451, _lvar_452, _lvar_453, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_468, _lvar_467, _lvar_469, false }}) ]]
[[ types(#dcur : List, #desc : List, _lvar_479 : Bool, _lvar_478 : Bool, #cls : Str, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "a", _lvar_477, _lvar_476, _lvar_478, _lvar_479 }}) * (! (_lvar_477 == empty)) * (! (_lvar_476 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * Extensible (_$l__lvar_471, true) * MetaData (_$l__lvar_471, null) * empty_fields(_$l__lvar_471 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_471, "@proto") ->@d $lterr_proto) * ((_$l__lvar_471, "@class") ->@d "Error") * ((_$l__lvar_471, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_477, _lvar_476, _lvar_478, _lvar_479 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_471) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_493 : Bool, #dcur : List, #desc : List, _lvar_482 : Bool, _lvar_481 : Bool, l : Obj, #cls : Str, _lvar_494 : Bool, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_492, _lvar_493, _lvar_494, false }}) * (#desc == {{ "d", _lvar_480, _lvar_481, _lvar_482, true }}) * (! (_lvar_492 == empty)) * (! (_lvar_480 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_480, _lvar_481, _lvar_482, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_492, _lvar_493, _lvar_494, false }}) ]]
[[ types(_lvar_501 : Bool, _lvar_502 : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_503 : Bool, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_500, _lvar_501, _lvar_502, _lvar_503 }}) * (! (_lvar_500 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_500, _lvar_501, _lvar_502, _lvar_503 }}) ]]
normal;

 [[ types(_lvar_498 : Bool, #dcur : List, #desc : List, _lvar_482 : Bool, _lvar_481 : Bool, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_497, _lvar_496, _lvar_498, false }}) * (#desc == {{ "d", _lvar_480, _lvar_481, _lvar_482, true }}) * (! (_lvar_497 == empty)) * (! (_lvar_496 == empty)) * (! (_lvar_480 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_480, _lvar_481, _lvar_482, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_497, _lvar_496, _lvar_498, false }}) ]]
[[ types(#dcur : List, #desc : List, _lvar_506 : Bool, #cls : Str, #ext : Bool, xret : Bool, _lvar_507 : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_505, _lvar_504, _lvar_506, _lvar_507 }}) * (! (_lvar_505 == empty)) * (! (_lvar_504 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_505, _lvar_504, _lvar_506, _lvar_507 }}) ]]
normal;

 [[ types(_lvar_509 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, _lvar_521 : Bool, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_520, _lvar_521, #ec, false }}) * (#desc == {{ "d", _lvar_508, _lvar_509, #ed, false }}) * (! (_lvar_520 == empty)) * (! (_lvar_508 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_508, _lvar_509, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_520, _lvar_521, #ec, false }}) ]]
[[ types(_lvar_530 : Bool, _lvar_531 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, _lvar_532 : Bool, #cls : Str, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "d", _lvar_529, _lvar_530, _lvar_531, _lvar_532 }}) * (! (_lvar_529 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_529, _lvar_530, _lvar_531, _lvar_532 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_528) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_528, true) * MetaData (_$l__lvar_528, null) * empty_fields(_$l__lvar_528 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_528, "@proto") ->@d $lterr_proto) * ((_$l__lvar_528, "@class") ->@d "Error") * ((_$l__lvar_528, "@extensible") ->@d true) ]]
error;

 [[ types(_lvar_509 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_525, _lvar_524, #ec, false }}) * (#desc == {{ "d", _lvar_508, _lvar_509, #ed, false }}) * (! (_lvar_525 == empty)) * (! (_lvar_524 == empty)) * (! (_lvar_508 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_508, _lvar_509, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_525, _lvar_524, #ec, false }}) ]]
[[ types(_lvar_535 : Bool, #ec : Bool, #ed : Bool, #dcur : List, _lvar_536 : Bool, #desc : List, #cls : Str, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "a", _lvar_534, _lvar_533, _lvar_535, _lvar_536 }}) * (! (_lvar_534 == empty)) * (! (_lvar_533 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_534, _lvar_533, _lvar_535, _lvar_536 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_528) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_528, true) * MetaData (_$l__lvar_528, null) * empty_fields(_$l__lvar_528 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_528, "@proto") ->@d $lterr_proto) * ((_$l__lvar_528, "@class") ->@d "Error") * ((_$l__lvar_528, "@extensible") ->@d true) ]]
error;

 [[ types(_lvar_550 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str, _lvar_538 : Bool) * (#dcur == {{ "d", _lvar_549, _lvar_550, #ec, false }}) * (#desc == {{ "d", _lvar_537, _lvar_538, #ed, false }}) * (! (_lvar_549 == empty)) * (! (_lvar_537 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_537, _lvar_538, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_549, _lvar_550, #ec, false }}) ]]
[[ types(_lvar_559 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_558 : Bool, #ext : Bool, xret : Bool, _lvar_560 : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_557, _lvar_558, _lvar_559, _lvar_560 }}) * (! (_lvar_557 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_557, _lvar_558, _lvar_559, _lvar_560 }}) ]]
normal;

 [[ types(#ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str, _lvar_538 : Bool) * (#dcur == {{ "a", _lvar_554, _lvar_553, #ec, false }}) * (#desc == {{ "d", _lvar_537, _lvar_538, #ed, false }}) * (! (_lvar_554 == empty)) * (! (_lvar_553 == empty)) * (! (_lvar_537 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_537, _lvar_538, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_554, _lvar_553, #ec, false }}) ]]
[[ types(_lvar_564 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, _lvar_563 : Bool, #cls : Str, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_562, _lvar_561, _lvar_563, _lvar_564 }}) * (! (_lvar_562 == empty)) * (! (_lvar_561 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_562, _lvar_561, _lvar_563, _lvar_564 }}) ]]
normal;

 [[ types(#en : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_573, false, #en, false }}) * (#desc == {{ "d", _lvar_565, true, #en, false }}) * (! (_lvar_573 == empty)) * (! (_lvar_565 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_565, true, #en, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_573, false, #en, false }}) ]]
[[ types(_lvar_583 : Bool, #en : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_584 : Bool, #ext : Bool, xret : Obj, #prop : Str, _lvar_585 : Bool) * (#dcur == {{ "d", _lvar_582, _lvar_583, _lvar_584, _lvar_585 }}) * (! (_lvar_582 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_582, _lvar_583, _lvar_584, _lvar_585 }}) * Extensible (_$l__lvar_581, true) * MetaData (_$l__lvar_581, null) * empty_fields(_$l__lvar_581 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_581, "@proto") ->@d $lterr_proto) * ((_$l__lvar_581, "@class") ->@d "Error") * ((_$l__lvar_581, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_581) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#en : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_598, false, #en, false }}) * (#desc == {{ "d", _lvar_590, true, #en, false }}) * (! (_lvar_598 == empty)) * (! (_lvar_590 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_590, true, #en, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_598, false, #en, false }}) ]]
[[ types(_lvar_608 : Bool, #en : Bool, #dcur : List, #desc : List, _lvar_609 : Bool, #cls : Str, _lvar_607 : Bool, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_606, _lvar_607, _lvar_608, _lvar_609 }}) * (! (_lvar_606 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_606, _lvar_607, _lvar_608, _lvar_609 }}) ]]
normal

proc defineOwnProperty (l, prop, desc, throw) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "Array")] adop odop;
	adop:		xret := "a__defineOwnProperty"(l, prop, desc, throw) with elab;
			goto rlab;
	odop:		xret := "o__defineOwnProperty"(l, prop, desc, throw) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__strictEquality(v1, v2)
[[ types() * (#v1 == #v2) * (v2 == #v2) * (v1 == #v2) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (! (#v1 == #v2)) * (v2 == #v2) * (v1 == #v1) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__strictEquality (v1, v2) {
			xret := (v1 = v2);
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Error_construct(xsc, vthis, v)
[[ types(vthis : Obj, v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _$l_#vthis) * Extensible (_$l_#mvt, true) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@class") ->@d #oc) * ((_$l_#mvt, "@extensible") ->@d #oe) * Extensible (_$l_#vthis, true) * MetaData (_$l_#vthis, _$l_#mvt) ]]
[[ types(xret : Obj) * (xret == _$l_#vthis) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l_#mvt, true) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@class") ->@d "Error") * ((_$l_#mvt, "@extensible") ->@d true) * Extensible (_$l_#vthis, true) * MetaData (_$l_#vthis, _$l_#mvt) ]]
normal;

 [[ types(vthis : Obj, #m : Str) * (v == #m) * (xsc == _lvar_xsc) * (vthis == _$l_#vthis) * ((_$l_#mvt, "@class") ->@d #oc) * ((_$l_#mvt, "@extensible") ->@d #oe) * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d #om) ]]
[[ types(#m : Str, xret : Obj) * (xret == _$l_#vthis) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * ((_$l_#mvt, "@class") ->@d "Error") * ((_$l_#mvt, "@extensible") ->@d true) * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d {{ "d", #m, true, false, true }}) ]]
normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;
			m := metadata (vthis);
			[m, "@class"] := "Error";
			[m, "@extensible"] := true;
			goto [(v = undefined)] rlab mess;
	mess:		xerr := "i__toString"(v) with elab;
			[xret, "message"] := {{ "d", xerr, true, false, true }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xerr, elab;
};


spec canPut(l, prop)
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, l : Obj, #ls : List, #ext : Bool, #prop : Str, #lpv : List) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, #ext : Bool, #prop : Str, #lpv : List) * (xret == #ext) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_89, #writ, _lvar_91, _lvar_92 }}, {{ #l }}, #lcls, #lpv) * types(_lvar_91 : Bool, #writ : Bool, #lcls : List, _lvar_92 : Bool, #l : Obj, #d : List, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_89, #writ, _lvar_91, _lvar_92 }}) * (! (_lvar_89 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, {{ #l }}, #lcls, #lpv) * types(#writ : Bool, #lcls : List, #l : Obj, #d : List, #prop : Str, #lpv : List) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_95, _lvar_96, _lvar_97, _lvar_98 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(#lcls : List, _lvar_96 : Bool, l : Obj, #other : List, #ls : List, _lvar_98 : Bool, _lvar_97 : Bool, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_95, _lvar_96, _lvar_97, _lvar_98 }}) * (! (_lvar_95 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #other : List, #ls : List, xret : Bool, #d : List, #prop : Str, #lpv : List) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_99, #writ, _lvar_101, _lvar_102 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(_lvar_102 : Bool, #writ : Bool, #lcls : List, _lvar_101 : Bool, l : Obj, #other : List, #ls : List, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_99, #writ, _lvar_101, _lvar_102 }}) * (! (_lvar_99 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#writ : Bool, #lcls : List, #other : List, #ls : List, #d : List, #prop : Str, #lpv : List) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal

proc canPut (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	op:		goto [(xret = undefined)] nop odesc;
	odesc:		d := l-nth(xret, 0.);
			goto [(d = "d")] odd nop;
	odd:		xret := l-nth(xret, 2.);
			goto rlab;
	nop:		m := metadata (l);
			e := [m, "@extensible"];
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] ext desc;
	desc:		d := l-nth(xret, 0.);
			v := l-nth(xret, 2.);
			goto [(d = "d")] dd ad;
	dd:		goto [e] wr ext;
	wr:		xret := v;
			goto rlab;
	ad:		xret := (not (v = undefined));
			goto rlab;
	ext:		xret := e;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec setupInitialHeap()
[[ types() * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_778) * empty_fields($lbool_proto : -{  }-) * Extensible (_$l__lvar_779, true) * MetaData (_$l__lvar_779, null) * empty_fields(_$l__lvar_779 : -{  }-) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_777) * empty_fields($lnum_proto : -{  }-) * Extensible (_$l__lvar_778, true) * MetaData (_$l__lvar_778, null) * empty_fields(_$l__lvar_778 : -{  }-) * Extensible (_$l__lvar_775, true) * MetaData (_$l__lvar_775, null) * empty_fields(_$l__lvar_775 : -{  }-) * Extensible (_$l__lvar_776, true) * MetaData (_$l__lvar_776, null) * empty_fields(_$l__lvar_776 : -{  }-) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_775) * empty_fields($lerr_proto : -{  }-) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_780) * empty_fields($lobj_proto : -{  }-) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_774) * empty_fields($lop_hasOwnProperty : -{  }-) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_781) * empty_fields($lg : -{  }-) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_776) * empty_fields($lerr : -{  }-) * Extensible (_$l__lvar_777, true) * MetaData (_$l__lvar_777, null) * empty_fields(_$l__lvar_777 : -{  }-) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_779) * empty_fields($lfun_proto : -{  }-) * Extensible (_$l__lvar_781, true) * MetaData (_$l__lvar_781, null) * empty_fields(_$l__lvar_781 : -{  }-) * Extensible (_$l__lvar_780, true) * MetaData (_$l__lvar_780, null) * empty_fields(_$l__lvar_780 : -{  }-) * Extensible (_$l__lvar_774, true) * MetaData (_$l__lvar_774, null) * empty_fields(_$l__lvar_774 : -{  }-) ]]
[[ types(xret : Empty) * (xret == empty) * Extensible ($lbool_proto, true) * MetaData ($lbool_proto, _$l__lvar_786) * empty_fields($lbool_proto : -{ "constructor", "toString", "valueOf" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l__lvar_785, true) * MetaData (_$l__lvar_785, null) * empty_fields(_$l__lvar_785 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_785, "@proto") ->@d $lobj_proto) * ((_$l__lvar_785, "@class") ->@d "Number") * ((_$l__lvar_785, "@extensible") ->@d true) * ((_$l__lvar_785, "@primitiveValue") ->@d 0.) * Extensible ($lnum_proto, true) * MetaData ($lnum_proto, _$l__lvar_785) * empty_fields($lnum_proto : -{ "constructor", "toExponential", "toFixed", "toLocaleString", "toPrecision", "toString", "valueOf" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible ($lerr_proto, true) * MetaData ($lerr_proto, _$l__lvar_782) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible ($lobj_proto, true) * MetaData ($lobj_proto, _$l__lvar_790) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible ($lop_hasOwnProperty, true) * MetaData ($lop_hasOwnProperty, _$l__lvar_789) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_784, true) * MetaData (_$l__lvar_784, null) * empty_fields(_$l__lvar_784 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_784, "@call") ->@d "Error_call") * ((_$l__lvar_784, "@construct") ->@d "Error_construct") * ((_$l__lvar_784, "@proto") ->@d $lfun_proto) * ((_$l__lvar_784, "@class") ->@d "Function") * ((_$l__lvar_784, "@extensible") ->@d true) * ((_$l__lvar_784, "@scope") ->@d empty) * Extensible (_$l__lvar_786, true) * MetaData (_$l__lvar_786, null) * empty_fields(_$l__lvar_786 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_786, "@proto") ->@d $lobj_proto) * ((_$l__lvar_786, "@class") ->@d "Boolean") * ((_$l__lvar_786, "@extensible") ->@d true) * ((_$l__lvar_786, "@primitiveValue") ->@d false) * Extensible ($lg, true) * MetaData ($lg, _$l__lvar_791) * empty_fields($lg : -u- (-{  }-, -{ "Error" }-)) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, true) * MetaData ($lerr, _$l__lvar_784) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * Extensible (_$l__lvar_788, true) * MetaData (_$l__lvar_788, null) * empty_fields(_$l__lvar_788 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_788, "@scope") ->@d empty) * ((_$l__lvar_788, "@call") ->@d "FP_default") * ((_$l__lvar_788, "@proto") ->@d $lobj_proto) * ((_$l__lvar_788, "@class") ->@d "Function") * ((_$l__lvar_788, "@extensible") ->@d true) * Extensible (_$l__lvar_790, true) * MetaData (_$l__lvar_790, null) * empty_fields(_$l__lvar_790 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_790, "@proto") ->@d null) * ((_$l__lvar_790, "@class") ->@d "Object") * ((_$l__lvar_790, "@extensible") ->@d true) * Extensible (_$l__lvar_789, true) * MetaData (_$l__lvar_789, null) * empty_fields(_$l__lvar_789 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_789, "@proto") ->@d $lfun_proto) * ((_$l__lvar_789, "@class") ->@d "Function") * ((_$l__lvar_789, "@extensible") ->@d true) * ((_$l__lvar_789, "@call") ->@d "OP_hasOwnProperty") * ((_$l__lvar_789, "@scope") ->@d empty) * Extensible ($lfun_proto, true) * MetaData ($lfun_proto, _$l__lvar_788) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_791, true) * MetaData (_$l__lvar_791, null) * empty_fields(_$l__lvar_791 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_791, "@proto") ->@d $lobj_proto) * ((_$l__lvar_791, "@class") ->@d "Object") * ((_$l__lvar_791, "@extensible") ->@d true) * Extensible (_$l__lvar_782, true) * MetaData (_$l__lvar_782, null) * empty_fields(_$l__lvar_782 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_782, "@proto") ->@d $lobj_proto) * ((_$l__lvar_782, "@class") ->@d "Error") * ((_$l__lvar_782, "@extensible") ->@d true) ]]
normal

proc setupInitialHeap () {
			xret := "create_default_object"($lg, $lobj_proto, "Object", true);
			xret := "create_default_object"($lobj_proto, null, "Object", true);
			[$lobj_proto, "hasOwnProperty"] := {{ "d", $lop_hasOwnProperty, true, false, true }};
			xret := "create_object_with_call_construct"($lop_hasOwnProperty, "OP_hasOwnProperty", empty, 1.);
			xret := "create_object_with_call_construct"($lfun_proto, "FP_default", empty, 0.);
			m := metadata ($lfun_proto);
			[m, "@proto"] := $lobj_proto;
			xret := "create_default_object"($lbool_proto, $lobj_proto, "Boolean", true);
			m := metadata ($lbool_proto);
			[m, "@primitiveValue"] := false;
			[$lbool_proto, "constructor"] := {{ "d", $lbool, true, false, true }};
			[$lbool_proto, "toString"] := {{ "d", $lbp_toString, true, false, true }};
			[$lbool_proto, "valueOf"] := {{ "d", $lbp_valueOf, true, false, true }};
			xret := "create_default_object"($lnum_proto, $lobj_proto, "Number", true);
			m := metadata ($lnum_proto);
			[m, "@primitiveValue"] := 0.;
			[$lnum_proto, "constructor"] := {{ "d", $lnum, true, false, true }};
			[$lnum_proto, "toString"] := {{ "d", $lnp_toString, true, false, true }};
			[$lnum_proto, "toLocaleString"] := {{ "d", $lnp_toLocaleString, true, false, true }};
			[$lnum_proto, "valueOf"] := {{ "d", $lnp_valueOf, true, false, true }};
			[$lnum_proto, "toFixed"] := {{ "d", $lnp_toFixed, true, false, true }};
			[$lnum_proto, "toExponential"] := {{ "d", $lnp_toExponential, true, false, true }};
			[$lnum_proto, "toPrecision"] := {{ "d", $lnp_toPrecision, true, false, true }};
			xret := "create_object_with_call_construct"($lerr, "Error_call", "Error_construct", 1.);
			[$lg, "Error"] := {{ "d", $lerr, true, false, true }};
			[$lerr, "prototype"] := {{ "d", $lerr_proto, false, false, false }};
			xret := "create_default_object"($lerr_proto, $lobj_proto, "Error", true);
			[$lerr_proto, "message"] := {{ "d", "", true, false, true }};
	rlab:		xret := empty
} with {
	ret: xret, rlab;
};


spec s__getOwnProperty(l, prop)
[[ types(_lvar_630 : Bool, l : Obj, _lvar_628 : Bool, _lvar_629 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_627, _lvar_628, _lvar_629, _lvar_630 }}) * (! (_lvar_627 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_627, _lvar_628, _lvar_629, _lvar_630 }}) ]]
[[ types(_lvar_638 : Bool, _lvar_637 : Bool, _lvar_636 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_635, _lvar_636, _lvar_637, _lvar_638 }}) * (! (_lvar_635 == empty)) * (xret == {{ "d", _lvar_635, _lvar_636, _lvar_637, _lvar_638 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_635, _lvar_636, _lvar_637, _lvar_638 }}) ]]
normal;

 [[ types(_lvar_633 : Bool, _lvar_634 : Bool, l : Obj, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_632, _lvar_631, _lvar_633, _lvar_634 }}) * (! (_lvar_632 == empty)) * (! (_lvar_631 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_632, _lvar_631, _lvar_633, _lvar_634 }}) ]]
[[ types(_lvar_641 : Bool, _lvar_642 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_640, _lvar_639, _lvar_641, _lvar_642 }}) * (! (_lvar_640 == empty)) * (! (_lvar_639 == empty)) * (xret == {{ "a", _lvar_640, _lvar_639, _lvar_641, _lvar_642 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_640, _lvar_639, _lvar_641, _lvar_642 }}) ]]
normal

proc s__getOwnProperty (l, prop) {
			xret := "o__getOwnProperty"(l, prop);
			goto [(xret = undefined)] str rlab;
	str:		idx := "i__toInteger"(prop) with elab;
			goto [(idx < 0.)] rlab next;
	next:		sidx := "i__toString"(idx);
			goto [(sidx = prop)] index rlab;
	index:		m := metadata (l);
			str := [m, "@primitiveValue"];
			len := (s-len str);
			goto [(len <= idx)] rlab return;
	return:		rstr := s-nth(str, idx);
			xret := {{ "d", rstr, false, true, false }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_function_object(xsc, call, construct, params)
[[ types(#construct : Str, #params : List, #xsc : List, #call : Str) * (#call == #construct) * (xsc == #xsc) * (construct == #construct) * (params == #params) * (call == #construct) ]]
[[ types(#construct : Str, #params : List, xret : Obj, #xsc : List, #call : Str) * (xret == _$l_xret) * (xsc == _lvar_xsc) * (construct == _lvar_construct) * (params == _lvar_params) * (call == _lvar_call) * Extensible (_$l__lvar_614, true) * MetaData (_$l__lvar_614, null) * empty_fields(_$l__lvar_614 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_614, "@proto") ->@d $lobj_proto) * ((_$l__lvar_614, "@class") ->@d "Object") * ((_$l__lvar_614, "@extensible") ->@d true) * Extensible (_$l_#prototype, true) * MetaData (_$l_#prototype, _$l__lvar_614) * empty_fields(_$l_#prototype : -{ "constructor" }-) * ((_$l_#prototype, "constructor") ->@d {{ "d", _$l_xret, true, false, true }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_615) * empty_fields(_$l_xret : -{ "arguments", "caller", "length", "prototype" }-) * ((_$l_xret, "length") ->@d {{ "d", (l-len #params), false, false, false }}) * ((_$l_xret, "arguments") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_xret, "caller") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_xret, "prototype") ->@d {{ "d", _$l_#prototype, true, false, false }}) * Extensible (_$l__lvar_615, true) * MetaData (_$l__lvar_615, null) * empty_fields(_$l__lvar_615 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_615, "@proto") ->@d $lfun_proto) * ((_$l__lvar_615, "@class") ->@d "Function") * ((_$l__lvar_615, "@extensible") ->@d true) * ((_$l__lvar_615, "@call") ->@d #call) * ((_$l__lvar_615, "@construct") ->@d #call) * ((_$l__lvar_615, "@scope") ->@d #xsc) ]]
normal

proc create_function_object (xsc, call, construct, params) {
			len := (l-len params);
			m := new(null);
			l := new(m);
			l := "create_object_with_call_construct"(l, call, construct, len);
			[m, "@scope"] := xsc;
			prototype := "Object_construct"();
			[prototype, "constructor"] := {{ "d", l, true, false, true }};
			[l, "prototype"] := {{ "d", prototype, true, false, false }};
			[l, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			[l, "arguments"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			xret := l;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Boolean_construct(xsc, vthis, v)
[[ types(v : Bool, #v : Bool) * (v == #v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#v : Bool, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_326, true) * MetaData (_$l__lvar_326, null) * empty_fields(_$l__lvar_326 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_326, "@proto") ->@d $lbool_proto) * ((_$l__lvar_326, "@class") ->@d "Boolean") * ((_$l__lvar_326, "@extensible") ->@d true) * ((_$l__lvar_326, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_326) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Boolean_construct (xsc, vthis, v) {
			pv := "i__toBoolean"(v);
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lbool_proto, "Boolean", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toNumber(v)
[[ types(v : Null) * (v == null) ]]
[[ types(xret : Num) * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == true) ]]
[[ types(xret : Num) * (xret == 1.) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == false) ]]
[[ types(xret : Num) * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str, xret : Num) * (xret == (string_to_num #v)) * (v == _lvar_v) ]]
normal

proc i__toNumber (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := nan;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := 0.;
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := 1.;
			goto rlab;
	is_f:		xret := 0.;
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := v;
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := (string_to_num v);
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "Number") with elab;
			xret := "i__toNumber"(xret);
			goto rlab;
	oops:		xret := "TypeError"("ToNumber: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_317, true) * MetaData (_$l__lvar_317, null) * empty_fields(_$l__lvar_317 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_317, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_317, "@class") ->@d "Error") * ((_$l__lvar_317, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_317) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc ReferenceError (v) {
			xret := "ReferenceError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_default_object(l, pr, cl, ext)
[[ types(l : Obj, #l : Obj, cl : Undefined, ext : Undefined) * (#l == _$l_l) * (pr == #pr) * (ext == undefined) * (l == _$l_l) * (cl == undefined) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_0) * ((_$l_#md, "@class") ->@d #lvar_1) * ((_$l_#md, "@extensible") ->@d #lvar_2) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, #l : Obj) * (xret == #l) * (pr == _lvar_pr) * (ext == _lvar_ext) * (l == _$l_l) * (cl == _lvar_cl) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
normal;

 [[ types(l : Obj, #cl : Str, #l : Obj, #ext : Bool) * (#l == _$l_l) * (pr == #pr) * (ext == #ext) * (l == _$l_l) * (cl == #cl) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_3) * ((_$l_#md, "@class") ->@d #lvar_4) * ((_$l_#md, "@extensible") ->@d #lvar_5) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, #cl : Str, #l : Obj, #ext : Bool) * (xret == #l) * (pr == _lvar_pr) * (ext == _lvar_ext) * (l == _$l_l) * (cl == _lvar_cl) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@class") ->@d #cl) * ((_$l_#md, "@extensible") ->@d #ext) * Extensible (_$l_l, true) * MetaData (_$l_l, _$l_#md) ]]
normal

proc create_default_object (l, pr, cl, ext) {
			goto [(cl = undefined)] scl text;
	scl:		cl := "Object";
	text:		goto [(ext = undefined)] sext setall;
	sext:		ext := true;
	setall:		m := metadata (l);
			[m, "@proto"] := pr;
			[m, "@class"] := cl;
			[m, "@extensible"] := ext;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec o__getOwnProperty(l, prop)
[[ types(l : Obj, #prop : Str) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(xret : Undefined, #prop : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(l : Obj, _lvar_131 : Bool, _lvar_130 : Bool, _lvar_129 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_128, _lvar_129, _lvar_130, _lvar_131 }}) * (! (_lvar_128 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_128, _lvar_129, _lvar_130, _lvar_131 }}) ]]
[[ types(_lvar_137 : Bool, _lvar_138 : Bool, _lvar_139 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_136, _lvar_137, _lvar_138, _lvar_139 }}) * (! (_lvar_136 == empty)) * (xret == {{ "d", _lvar_136, _lvar_137, _lvar_138, _lvar_139 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_136, _lvar_137, _lvar_138, _lvar_139 }}) ]]
normal;

 [[ types(_lvar_135 : Bool, l : Obj, _lvar_134 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_133, _lvar_132, _lvar_134, _lvar_135 }}) * (! (_lvar_133 == empty)) * (! (_lvar_132 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_133, _lvar_132, _lvar_134, _lvar_135 }}) ]]
[[ types(_lvar_143 : Bool, #prop : Str, #dx : List, _lvar_142 : Bool) * (#dx == {{ "a", _lvar_141, _lvar_140, _lvar_142, _lvar_143 }}) * (! (_lvar_141 == empty)) * (! (_lvar_140 == empty)) * (xret == {{ "a", _lvar_141, _lvar_140, _lvar_142, _lvar_143 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_141, _lvar_140, _lvar_142, _lvar_143 }}) ]]
normal

proc o__getOwnProperty (l, prop) {
			x := hasField(l,prop);
			goto [x] hp nhp;
	nhp:		xret := undefined;
			goto rlab;
	hp:		xret := [l, prop];
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec deleteProperty(l, prop, throw)
[[ types(l : Obj, #cls : Str, #prop : Str) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Bool, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_709 : Bool, l : Obj, #cls : Str, _lvar_710 : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_708, _lvar_709, _lvar_710, true }}) * (! (_lvar_708 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_708, _lvar_709, _lvar_710, true }}) ]]
[[ types(#cls : Str, xret : Bool, #d : List, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(l : Obj, #cls : Str, _lvar_714 : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_713, _lvar_712, _lvar_714, true }}) * (! (_lvar_713 == empty)) * (! (_lvar_712 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_713, _lvar_712, _lvar_714, true }}) ]]
[[ types(#cls : Str, xret : Bool, #d : List, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_734 : Bool, _lvar_733 : Bool, l : Obj, #cls : Str, #d : List, throw : Bool, #prop : Str) * (#d == {{ "d", _lvar_732, _lvar_733, _lvar_734, false }}) * (! (_lvar_732 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_732, _lvar_733, _lvar_734, false }}) ]]
[[ types(_lvar_742 : Bool, #cls : Str, xret : Bool, #d : List, _lvar_741 : Bool, #prop : Str, _lvar_743 : Bool) * (#d == {{ "d", _lvar_740, _lvar_741, _lvar_742, _lvar_743 }}) * (! (_lvar_740 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_740, _lvar_741, _lvar_742, _lvar_743 }}) ]]
normal;

 [[ types(_lvar_738 : Bool, l : Obj, #cls : Str, #d : List, throw : Bool, #prop : Str) * (#d == {{ "a", _lvar_737, _lvar_736, _lvar_738, false }}) * (! (_lvar_737 == empty)) * (! (_lvar_736 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_737, _lvar_736, _lvar_738, false }}) ]]
[[ types(_lvar_746 : Bool, #cls : Str, _lvar_747 : Bool, xret : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_745, _lvar_744, _lvar_746, _lvar_747 }}) * (! (_lvar_745 == empty)) * (! (_lvar_744 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_745, _lvar_744, _lvar_746, _lvar_747 }}) ]]
normal;

 [[ types(l : Obj, #cls : Str, _lvar_758 : Bool, _lvar_757 : Bool, #d : List, throw : Bool, #prop : Str) * (#d == {{ "d", _lvar_756, _lvar_757, _lvar_758, false }}) * (! (_lvar_756 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_756, _lvar_757, _lvar_758, false }}) ]]
[[ types(_lvar_766 : Bool, _lvar_768 : Bool, _lvar_767 : Bool, #cls : Str, xret : Obj, #d : List, #prop : Str) * (#d == {{ "d", _lvar_765, _lvar_766, _lvar_767, _lvar_768 }}) * (! (_lvar_765 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * Extensible (_$l__lvar_764, true) * MetaData (_$l__lvar_764, null) * empty_fields(_$l__lvar_764 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_764, "@proto") ->@d $lterr_proto) * ((_$l__lvar_764, "@class") ->@d "Error") * ((_$l__lvar_764, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_765, _lvar_766, _lvar_767, _lvar_768 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_764) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(l : Obj, #cls : Str, _lvar_762 : Bool, #d : List, throw : Bool, #prop : Str) * (#d == {{ "a", _lvar_761, _lvar_760, _lvar_762, false }}) * (! (_lvar_761 == empty)) * (! (_lvar_760 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_761, _lvar_760, _lvar_762, false }}) ]]
[[ types(_lvar_771 : Bool, #cls : Str, _lvar_772 : Bool, xret : Obj, #d : List, #prop : Str) * (#d == {{ "a", _lvar_770, _lvar_769, _lvar_771, _lvar_772 }}) * (! (_lvar_770 == empty)) * (! (_lvar_769 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * Extensible (_$l__lvar_764, true) * MetaData (_$l__lvar_764, null) * empty_fields(_$l__lvar_764 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_764, "@proto") ->@d $lterr_proto) * ((_$l__lvar_764, "@class") ->@d "Error") * ((_$l__lvar_764, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_770, _lvar_769, _lvar_771, _lvar_772 }}) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_764) * empty_fields(_$l_xret : -{  }-) ]]
error

proc deleteProperty (l, prop, throw) {
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] dt cont;
	cont:		c := l-nth(xret, 4.);
			goto [c] del reject;
	del:		delete(l,prop);
	dt:		xret := true;
			goto rlab;
	df:		xret := false;
	rlab:		skip;
	reject:		goto [throw] tt df;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec getOwnProperty(l, prop)
[[ types(l : Obj, #cls : Str, #prop : Str) * (! (#cls == "String")) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Undefined, #prop : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_668 : Bool, _lvar_669 : Bool, l : Obj, #prop : Str, #dx : List, _lvar_670 : Bool) * (#dx == {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) * (! (_lvar_667 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) ]]
[[ types(_lvar_676 : Bool, _lvar_677 : Bool, #prop : Str, #dx : List, _lvar_678 : Bool) * (#dx == {{ "d", _lvar_675, _lvar_676, _lvar_677, _lvar_678 }}) * (! (_lvar_675 == empty)) * (xret == {{ "d", _lvar_675, _lvar_676, _lvar_677, _lvar_678 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_675, _lvar_676, _lvar_677, _lvar_678 }}) ]]
normal;

 [[ types(l : Obj, _lvar_674 : Bool, #prop : Str, #dx : List, _lvar_673 : Bool) * (#dx == {{ "a", _lvar_672, _lvar_671, _lvar_673, _lvar_674 }}) * (! (_lvar_672 == empty)) * (! (_lvar_671 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_672, _lvar_671, _lvar_673, _lvar_674 }}) ]]
[[ types(_lvar_682 : Bool, _lvar_681 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_680, _lvar_679, _lvar_681, _lvar_682 }}) * (! (_lvar_680 == empty)) * (! (_lvar_679 == empty)) * (xret == {{ "a", _lvar_680, _lvar_679, _lvar_681, _lvar_682 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_680, _lvar_679, _lvar_681, _lvar_682 }}) ]]
normal

proc getOwnProperty (l, prop) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "String")] sgop ogop;
	sgop:		xret := "s__getOwnProperty"(l, prop) with elab;
			goto rlab;
	ogop:		xret := "o__getOwnProperty"(l, prop) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toString(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Str) * (xret == "undefined") * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Str) * (xret == "null") * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == true) ]]
[[ types(xret : Str) * (xret == "true") * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == false) ]]
[[ types(xret : Str) * (xret == "false") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num, xret : Str) * (xret == (num_to_string #v)) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str, xret : Str) * (xret == #v) * (v == _lvar_v) ]]
normal

proc i__toString (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := "undefined";
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := "null";
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := "true";
			goto rlab;
	is_f:		xret := "false";
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := (num_to_string v);
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := v;
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "String") with elab;
			xret := "i__toString"(xret) with elab;
			goto rlab;
	oops:		xret := "TypeError"("ToString: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkAssignmentErrors(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num, _lvar_318 : Num) * (v == _lvar_318) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool, _lvar_319 : Bool) * (v == _lvar_319) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_320 : Str) * (v == _lvar_320) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_321 : Obj) * (v == _lvar_321) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : List, #l : Obj, #prop : Str) * (#v == {{ "v", #l, #prop }}) * (! (#prop == "eval")) * (! (#prop == "arguments")) * (v == {{ "v", #l, #prop }}) ]]
[[ types(#v : List, #l : Obj, xret : Bool, #prop : Str) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : List, #l : Obj) * (#v == {{ "v", #l, "eval" }}) * (v == {{ "v", #l, "eval" }}) ]]
[[ types(#v : List, #l : Obj, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_322, true) * MetaData (_$l__lvar_322, null) * empty_fields(_$l__lvar_322 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_322, "@proto") ->@d $lserr_proto) * ((_$l__lvar_322, "@class") ->@d "Error") * ((_$l__lvar_322, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_322) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#v : List, #l : Obj) * (#v == {{ "v", #l, "arguments" }}) * (v == {{ "v", #l, "arguments" }}) ]]
[[ types(#v : List, #l : Obj, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_323) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_323, true) * MetaData (_$l__lvar_323, null) * empty_fields(_$l__lvar_323 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_323, "@proto") ->@d $lserr_proto) * ((_$l__lvar_323, "@class") ->@d "Error") * ((_$l__lvar_323, "@extensible") ->@d true) ]]
error;

 [[ types(#field : Str, #v : List, #base : Obj) * (#v == {{ "o", #base, #field }}) * (v == {{ "o", #base, #field }}) ]]
[[ types(#field : Str, #v : List, #base : Obj, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__checkAssignmentErrors (v) {
			tv := typeOf(v);
			goto [((tv = List) and ((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o")))] prep rlab;
	prep:		fv := l-nth(v, 2.);
	csyn:		goto [((l-nth(v, 0.) = "v") and ((fv = "eval") or (fv = "arguments")))] se rlab;
	rlab:		xret := true;
	se:		xret := "SyntaxError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec put(l, prop, value, throw)
[[ Pi(_$l_#l, #prop, undefined, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#ccls :: #llcls)), ("" :: (#pv :: #llpv))) * types(#lllp : List, #lp : Obj, #pv : Str, l : Obj, #cls : Str, #throw : Bool, #ccls : Str, #llcls : List, #llpv : List, #prop : Str) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#ccls :: #llcls), (#pv :: #llpv)) * types(#lllp : List, #lp : Obj, #pv : Str, #cls : Str, #throw : Bool, #ccls : Str, xret : Empty, #llcls : List, #llpv : List, #prop : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#denum : Bool, l : Obj, #cls : Str, #throw : Bool, #ext : Bool, #dconf : Bool, #prop : Str, #lpv : List) * (! (#value == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#denum : Bool, #cls : Str, #throw : Bool, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, l : Obj, #cls : Str, #throw : Bool, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#value == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #throw : Bool, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(l : Obj, #cls : Str, #throw : Bool, #prop : Str) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#cls : Str, #throw : Bool, xret : Empty, #prop : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, l : Obj, #ls : List, throw : Bool, #prop : Str, #lpv : List) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * Extensible (_$l__lvar_299, true) * MetaData (_$l__lvar_299, null) * empty_fields(_$l__lvar_299 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_299, "@proto") ->@d $lterr_proto) * ((_$l__lvar_299, "@class") ->@d "Error") * ((_$l__lvar_299, "@extensible") ->@d true) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_299) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_300, false, _lvar_302, _lvar_303 }}, {{ _$l_#l }}, #lcls, #lpv) * types(_lvar_302 : Bool, #lcls : List, l : Obj, #ext : Bool, #d : List, _lvar_303 : Bool, throw : Bool, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_300, false, _lvar_302, _lvar_303 }}) * (! (_lvar_300 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, #ext : Bool, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_304, true) * MetaData (_$l__lvar_304, null) * empty_fields(_$l__lvar_304 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_304, "@proto") ->@d $lterr_proto) * ((_$l__lvar_304, "@class") ->@d "Error") * ((_$l__lvar_304, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_304) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_307, _lvar_308, _lvar_309, _lvar_310 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(_lvar_309 : Bool, #lcls : List, _lvar_308 : Bool, #lp : Obj, l : Obj, #other : List, #ls : List, _lvar_310 : Bool, #d : List, throw : Bool, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_307, _lvar_308, _lvar_309, _lvar_310 }}) * (! (_lvar_307 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * Extensible (_$l__lvar_311, true) * MetaData (_$l__lvar_311, null) * empty_fields(_$l__lvar_311 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_311, "@proto") ->@d $lterr_proto) * ((_$l__lvar_311, "@class") ->@d "Error") * ((_$l__lvar_311, "@extensible") ->@d true) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_311) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_312, false, _lvar_314, _lvar_315 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(#lcls : List, #lp : Obj, l : Obj, #other : List, #ls : List, _lvar_314 : Bool, #d : List, throw : Bool, #prop : Str, _lvar_315 : Bool, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_312, false, _lvar_314, _lvar_315 }}) * (! (_lvar_312 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_316, true) * MetaData (_$l__lvar_316, null) * empty_fields(_$l__lvar_316 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_316, "@proto") ->@d $lterr_proto) * ((_$l__lvar_316, "@class") ->@d "Error") * ((_$l__lvar_316, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_316) * empty_fields(_$l_xret : -{  }-) ]]
error

proc put (l, prop, value, throw) {
			xret := "canPut"(l, prop) with elab;
			goto [xret] cp reject;
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	cp:		xret := "getOwnProperty"(l, prop) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] dd gp;
	dd:		desc := {{ "g", empty, empty, value, empty, empty, empty }};
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ #l }}, #lvar_19, #lvar_20) *]
			goto remp;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	gp:		xret := "getProperty"(l, prop) with elab;
			ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad def;
	ad:		s := l-nth(xret, 2.);
			xsc := [s, "@scope"];
			fun := [s, "@call"];
			xret := fun(xsc, l, value) with elab;
			goto remp;
	def:		desc := {{ "d", value, true, true, true }};
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, true, true }}, {{ #l }}, #lvar_21, #lvar_22) *]
			skip;
	remp:		xret := empty;
	rlab:		skip;
	reject:		xret := empty;
			goto [throw] tt rlab;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__putValue(v, w)
[[ types(v : Undefined) * (v == undefined) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_186) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_186, true) * MetaData (_$l__lvar_186, null) * empty_fields(_$l__lvar_186 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_186, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_186, "@class") ->@d "Error") * ((_$l__lvar_186, "@extensible") ->@d true) ]]
error;

 [[ types(v : Null) * (v == null) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_187) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_187, true) * MetaData (_$l__lvar_187, null) * empty_fields(_$l__lvar_187 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_187, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_187, "@class") ->@d "Error") * ((_$l__lvar_187, "@extensible") ->@d true) ]]
error;

 [[ types(v : Num, _lvar_189 : Num) * (v == _lvar_189) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_188, true) * MetaData (_$l__lvar_188, null) * empty_fields(_$l__lvar_188 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_188, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_188, "@class") ->@d "Error") * ((_$l__lvar_188, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_188) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_191 : Bool, v : Bool) * (v == _lvar_191) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_190) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_190, true) * MetaData (_$l__lvar_190, null) * empty_fields(_$l__lvar_190 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_190, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_190, "@class") ->@d "Error") * ((_$l__lvar_190, "@extensible") ->@d true) ]]
error;

 [[ types(v : Str, _lvar_193 : Str) * (v == _lvar_193) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_192, true) * MetaData (_$l__lvar_192, null) * empty_fields(_$l__lvar_192 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_192, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_192, "@class") ->@d "Error") * ((_$l__lvar_192, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_192) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(v : Obj, _lvar_195 : Obj) * (v == _lvar_195) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_194, true) * MetaData (_$l__lvar_194, null) * empty_fields(_$l__lvar_194 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_194, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_194, "@class") ->@d "Error") * ((_$l__lvar_194, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_194) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(v : List) * (! (#w == empty)) * (v == {{ "v", _$l_#obj, #field }}) * (w == #w) * ((_$l_#obj, #field) ->@d #lvar_23) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#obj, #field) ->@d #w) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, undefined, ($lg :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, v : List, #cls : Str, #ext : Bool, #dconf : Bool, #prop : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, #cls : Str, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, v : List, #cls : Str, #ext : Bool, #dconf : Bool, #prop : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, #cls : Str, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ($lg :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(v : List, #cls : Str, #prop : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#cls : Str, xret : Empty, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, v : List, #ls : List, #prop : Str, #lpv : List) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_249, true) * MetaData (_$l__lvar_249, null) * empty_fields(_$l__lvar_249 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_249, "@proto") ->@d $lterr_proto) * ((_$l__lvar_249, "@class") ->@d "Error") * ((_$l__lvar_249, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_249) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_250, false, _lvar_252, _lvar_253 }}, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, v : List, _lvar_252 : Bool, #ext : Bool, #d : List, _lvar_253 : Bool, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_250, false, _lvar_252, _lvar_253 }}) * (! (_lvar_250 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, #ext : Bool, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_254) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_254, true) * MetaData (_$l__lvar_254, null) * empty_fields(_$l__lvar_254 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_254, "@proto") ->@d $lterr_proto) * ((_$l__lvar_254, "@class") ->@d "Error") * ((_$l__lvar_254, "@extensible") ->@d true) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_257, _lvar_258, _lvar_259, _lvar_260 }}, (_$l_#l :: (#lp :: #other)), #cls, #lpv) * types(v : List, #lp : Obj, #other : List, #ls : List, #cls : List, _lvar_258 : Bool, _lvar_259 : Bool, _lvar_260 : Bool, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_257, _lvar_258, _lvar_259, _lvar_260 }}) * (! (_lvar_257 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #cls, #lpv) * types(#lp : Obj, #other : List, #ls : List, #cls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_261, true) * MetaData (_$l__lvar_261, null) * empty_fields(_$l__lvar_261 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_261, "@proto") ->@d $lterr_proto) * ((_$l__lvar_261, "@class") ->@d "Error") * ((_$l__lvar_261, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_261) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_262, false, _lvar_264, _lvar_265 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(#lcls : List, v : List, #lp : Obj, _lvar_265 : Bool, #other : List, #ls : List, #d : List, _lvar_264 : Bool, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_262, false, _lvar_264, _lvar_265 }}) * (! (_lvar_262 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_266, true) * MetaData (_$l__lvar_266, null) * empty_fields(_$l__lvar_266 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_266, "@proto") ->@d $lterr_proto) * ((_$l__lvar_266, "@class") ->@d "Error") * ((_$l__lvar_266, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_266) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, v : List, #ls : List, #prop : Str, #lpv : List) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * Extensible (_$l__lvar_267, true) * MetaData (_$l__lvar_267, null) * empty_fields(_$l__lvar_267 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_267, "@proto") ->@d $lterr_proto) * ((_$l__lvar_267, "@class") ->@d "Error") * ((_$l__lvar_267, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_267) * empty_fields(_$l_xret : -{  }-) ]]
error

proc i__putValue (v, w) {
			goto [((typeOf(v) = List) and ((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o")))] init throw;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr refr;
	refr:		goto [((typeOf(v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	er:		[rbase, rfield] := w;
	dflt:		xret := empty;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	elab:		skip;
	is_pr:		xret := "i__toObject"(rbase) with elab;
			l := xret;
			xret := "canPut"(l, rfield) with elab;
			goto [xret] cp reject;
	cp:		xret := "getProperty"(l, rfield) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] reject is_ad;
	is_ad:		ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad reject;
	ad:		s := l-nth(xret, 2.);
			m := metadata (s);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase, w) with elab;
			goto dflt;
	reject:		xret := "TypeError"();
			goto elab
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec hasProperty(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #prop : Str) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_168, _lvar_169, _lvar_170, _lvar_171 }}, #ls, #cls, #pv) * types(#pv : List, #ls : List, _lvar_170 : Bool, #cls : List, #l : Obj, _lvar_171 : Bool, _lvar_169 : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_168, _lvar_169, _lvar_170, _lvar_171 }}) * (! (_lvar_168 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #d : List, #prop : Str) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "a", _lvar_173, _lvar_172, _lvar_174, _lvar_175 }}, #ls, #cls, #pv) * types(_lvar_175 : Bool, #pv : List, #ls : List, #cls : List, #l : Obj, _lvar_174 : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_173, _lvar_172, _lvar_174, _lvar_175 }}) * (! (_lvar_173 == empty)) * (! (_lvar_172 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #d : List, #prop : Str) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc hasProperty (l, prop) {
			xret := "getProperty"(l, prop) with elab;
	rlab:		xret := (not (xret = undefined));
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_object_with_call_construct(l, call, construct, len)
[[ types(construct : Empty, #len : Num, l : Obj, #call : Str) * (l == _$l_#l) * (construct == empty) * (len == #len) * (call == #call) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_7) * ((_$l_#md, "@class") ->@d #lvar_8) * ((_$l_#md, "@extensible") ->@d #lvar_9) * ((_$l_#md, "@scope") ->@d #lvar_10) * ((_$l_#md, "@call") ->@d #lvar_11) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_6) ]]
[[ types(#len : Num, xret : Obj, #call : Str) * (xret == _$l_#l) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * (call == _lvar_call) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@call") ->@d #call) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal;

 [[ types(#construct : Str, #len : Num, l : Obj, #call : Str) * (l == _$l_#l) * (construct == #construct) * (len == #len) * (call == #call) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_13) * ((_$l_#md, "@class") ->@d #lvar_14) * ((_$l_#md, "@extensible") ->@d #lvar_15) * ((_$l_#md, "@scope") ->@d #lvar_16) * ((_$l_#md, "@call") ->@d #lvar_17) * ((_$l_#md, "@construct") ->@d #lvar_18) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_12) ]]
[[ types(#construct : Str, #len : Num, xret : Obj, #call : Str) * (xret == _$l_#l) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * (call == _lvar_call) * Extensible (_$l_#md, true) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@call") ->@d #call) * ((_$l_#md, "@construct") ->@d #construct) * Extensible (_$l_#l, true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal

proc create_object_with_call_construct (l, call, construct, len) {
			xret := "create_default_object"(l, $lfun_proto, "Function", true);
			[xret, "length"] := {{ "d", len, false, false, false }};
			m := metadata (xret);
			[m, "@scope"] := empty;
			[m, "@call"] := call;
			goto [(construct = empty)] rlab cstr;
	cstr:		[m, "@construct"] := construct;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec i__isPrimitive(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num, _lvar_85 : Num) * (v == _lvar_85) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool, _lvar_86 : Bool) * (v == _lvar_86) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_87 : Str) * (v == _lvar_87) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_88 : Obj) * (v == _lvar_88) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal

proc i__isPrimitive (v) {
			tv := typeOf(v);
	iu:		goto [((v = undefined) or ((v = null) or ((typeOf(v) = Bool) or ((typeOf(v) = Num) or (typeOf(v) = Str)))))] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Object_construct(xsc, vthis, l)
[[ types(#l : Undefined) * (#l == undefined) * (l == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#l : Undefined, xret : Obj) * (#l == undefined) * (xret == _$l_xret) * (l == _lvar_l) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_84, true) * MetaData (_$l__lvar_84, null) * empty_fields(_$l__lvar_84 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_84, "@proto") ->@d $lobj_proto) * ((_$l__lvar_84, "@class") ->@d "Object") * ((_$l__lvar_84, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_84) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Object_construct (xsc, vthis, l) {
			goto [(typeOf(l) = Obj)] obj l1b;
	obj:		xret := l;
			goto rlab;
	l1b:		goto [((typeOf(l) = Bool) or ((typeOf(l) = Num) or (typeOf(l) = Str)))] to_obj norm;
	to_obj:		xret := "i__toObject"(l);
			goto rlab;
	norm:		xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lobj_proto, "Object", true);
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__sameValue(v1, v2)
[[ types(v2 : Num, v1 : Num) * (v2 == 0.) * (v1 == 0.) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == -0.) * (v1 == -0.) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == 0.) * (v1 == -0.) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == -0.) * (v1 == 0.) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == _lvar_618) * (v1 == _lvar_618) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (! (_lvar_v1 == _lvar_v2)) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__sameValue (v1, v2) {
			goto [(typeOf(v1) = Num)] test2 nonum;
	test2:		goto [(typeOf(v2) = Num)] inan1 nonum;
	inan1:		goto [(not (v1 = v1))] inan2 zero1;
	inan2:		goto [(not (v2 = v2))] rt zero1;
	zero1:		goto [(v1 = 0.)] zero2 nonum;
	zero2:		goto [(v2 = 0.)] fix nonum;
	fix:		sv1 := (m_sgn v1);
			sv2 := (m_sgn v2);
			goto [(sv1 = sv2)] rt rf;
			goto rlab;
	nonum:		goto [(v1 = v2)] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toObject(v)
[[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_616, true) * MetaData (_$l__lvar_616, null) * empty_fields(_$l__lvar_616 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_616, "@proto") ->@d $lbool_proto) * ((_$l__lvar_616, "@class") ->@d "Boolean") * ((_$l__lvar_616, "@extensible") ->@d true) * ((_$l__lvar_616, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_616) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_617, true) * MetaData (_$l__lvar_617, null) * empty_fields(_$l__lvar_617 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_617, "@proto") ->@d $lnum_proto) * ((_$l__lvar_617, "@class") ->@d "Number") * ((_$l__lvar_617, "@extensible") ->@d true) * ((_$l__lvar_617, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_617) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc i__toObject (v) {
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw ib;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		xret := "Boolean_construct"(undefined, undefined, v);
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := "Number_construct"(undefined, undefined, v);
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := "String_construct"(undefined, undefined, v);
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := v;
			goto rlab;
	oops:		xret := "ToObject: This should not happen.";
	rlab:		skip;
	throw:		xret := "Here!";
			xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toBoolean(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num) * (v == 0.) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (! (#v == 0.)) * (v == #v) ]]
[[ types(#v : Num, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str) * (v == "") ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (! (#v == "")) * (v == #v) ]]
[[ types(#v : Str, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__toBoolean (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := false;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := false;
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		xret := v;
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		goto [((v = 0.) or (not (v = v)))] is_f is_t;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		goto [(v = "")] is_f is_t;
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := true;
			goto rlab;
	is_t:		xret := true;
			goto rlab;
	is_f:		xret := false;
			goto rlab;
	oops:		xret := "ToBoolean: This should not happen.";
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec getProperty(l, prop)
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (xret == #d) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc getProperty (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] next rlab;
	next:		m := metadata (l);
			proto := [m, "@proto"];
			goto [(proto = null)] rlab call;
	call:		xret := "getProperty"(proto, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec Number_construct(xsc, vthis, v)
[[ types(v : Num, #v : Num) * (v == #v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#v : Num, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_324, true) * MetaData (_$l__lvar_324, null) * empty_fields(_$l__lvar_324 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_324, "@proto") ->@d $lnum_proto) * ((_$l__lvar_324, "@class") ->@d "Number") * ((_$l__lvar_324, "@extensible") ->@d true) * ((_$l__lvar_324, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_324) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Number_construct (xsc, vthis, v) {
	init:		pv := "i__toNumber"(v) with elab;
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lnum_proto, "Number", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: pv, elab;
};


spec get(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #d : Undefined, #prop : Str) * (#d == undefined) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Undefined, #d : Undefined, #prop : Str) * (#d == undefined) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_182, _lvar_183, _lvar_184, _lvar_185 }}, #ls, #cls, #pv) * types(_lvar_185 : Bool, _lvar_184 : Bool, #pv : List, #ls : List, #cls : List, #l : Obj, _lvar_183 : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_182, _lvar_183, _lvar_184, _lvar_185 }}) * (! (_lvar_182 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #d : List, #prop : Str) * (xret == l-nth(#d, 1.)) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc get (l, prop) {
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, l) with elab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkObjectCoercible(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_176, true) * MetaData (_$l__lvar_176, null) * empty_fields(_$l__lvar_176 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_176, "@proto") ->@d $lterr_proto) * ((_$l__lvar_176, "@class") ->@d "Error") * ((_$l__lvar_176, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_176) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_177) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_177, true) * MetaData (_$l__lvar_177, null) * empty_fields(_$l__lvar_177 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_177, "@proto") ->@d $lterr_proto) * ((_$l__lvar_177, "@class") ->@d "Error") * ((_$l__lvar_177, "@extensible") ->@d true) ]]
normal;

 [[ types(_lvar_178 : Num, v : Num) * (v == _lvar_178) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(_lvar_179 : Bool, v : Bool) * (v == _lvar_179) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_180 : Str) * (v == _lvar_180) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_181 : Obj) * (v == _lvar_181) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal

proc i__checkObjectCoercible (v) {
			xret := empty;
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw other;
	other:		goto [((typeOf(v) = Bool) or ((typeOf(v) = Num) or ((typeOf(v) = Str) or (typeOf(v) = Obj))))] rlab oops;
	oops:		xret := "CheckObjectCoercible: This should not happen.";
	rlab:		skip;
	throw:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_167, true) * MetaData (_$l__lvar_167, null) * empty_fields(_$l__lvar_167 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_167, "@proto") ->@d $lserr_proto) * ((_$l__lvar_167, "@class") ->@d "Error") * ((_$l__lvar_167, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_167) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc SyntaxError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lserr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__getValue(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Null) * (xret == null) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, v : List, #lcls : List, #obj : Obj, #ls : List, #d : Undefined, #lpv : List) * (#d == undefined) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #obj : Obj, #ls : List, xret : Undefined, #d : Undefined, #lpv : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, {{ "d", _lvar_145, _lvar_146, _lvar_147, _lvar_148 }}, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, v : List, _lvar_146 : Bool, #obj : Obj, #ls : List, _lvar_147 : Bool, #d : List, _lvar_148 : Bool, #lpv : List) * (#d == {{ "d", _lvar_145, _lvar_146, _lvar_147, _lvar_148 }}) * (! (_lvar_145 == empty)) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, #d, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #obj : Obj, #ls : List, #d : List, #lpv : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, v : List, #lcls : List, #ls : List, #d : Undefined, #lpv : List) * (#d == undefined) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #ls : List, xret : Undefined, #d : Undefined, #lpv : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, {{ "d", _lvar_149, _lvar_150, _lvar_151, _lvar_152 }}, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, v : List, _lvar_150 : Bool, #ls : List, _lvar_152 : Bool, _lvar_151 : Bool, #d : List, #lpv : List) * (#d == {{ "d", _lvar_149, _lvar_150, _lvar_151, _lvar_152 }}) * (! (_lvar_149 == empty)) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, #d, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #ls : List, #d : List, #lpv : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ types(v : List) * (v == {{ "v", _$l_#obj, #field }}) * ((_$l_#obj, #field) ->@d #value) ]]
[[ types() * (xret == #value) * (v == _lvar_v) * ((_$l_#obj, #field) ->@d #value) ]]
normal;

 [[ types(#field : Str, v : List) * (v == {{ "v", undefined, #field }}) ]]
[[ types(#field : Str, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_153, true) * MetaData (_$l__lvar_153, null) * empty_fields(_$l__lvar_153 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_153, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_153, "@class") ->@d "Error") * ((_$l__lvar_153, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_153) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#field : Str, v : List) * (v == {{ "o", undefined, #field }}) ]]
[[ types(#field : Str, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_154, true) * MetaData (_$l__lvar_154, null) * empty_fields(_$l__lvar_154 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_154, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_154, "@class") ->@d "Error") * ((_$l__lvar_154, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_154) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi($lbool_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, v : List, #plcls : List, #d : Undefined) * (#d == undefined) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, xobj : Obj, #plcls : List, xret : Undefined, #d : Undefined) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_155) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_155, true) * MetaData (_$l__lvar_155, null) * empty_fields(_$l__lvar_155 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_155, "@proto") ->@d $lbool_proto) * ((_$l__lvar_155, "@class") ->@d "Boolean") * ((_$l__lvar_155, "@extensible") ->@d true) * ((_$l__lvar_155, "@primitiveValue") ->@d #b) ]]
normal;

 [[ Pi($lbool_proto, #field, {{ "d", _lvar_156, _lvar_157, _lvar_158, _lvar_159 }}, #pls, #plcls, #plpv) * types(#pls : List, #field : Str, #b : Bool, _lvar_157 : Bool, #plpv : List, _lvar_159 : Bool, v : List, _lvar_158 : Bool, #plcls : List, #d : List) * (#d == {{ "d", _lvar_156, _lvar_157, _lvar_158, _lvar_159 }}) * (! (_lvar_156 == empty)) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, #d, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, xobj : Obj, #plcls : List, #d : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_160) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_160, true) * MetaData (_$l__lvar_160, null) * empty_fields(_$l__lvar_160 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_160, "@proto") ->@d $lbool_proto) * ((_$l__lvar_160, "@class") ->@d "Boolean") * ((_$l__lvar_160, "@extensible") ->@d true) * ((_$l__lvar_160, "@primitiveValue") ->@d #b) ]]
normal;

 [[ Pi($lnum_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, v : List, #n : Num, #plcls : List, #d : Undefined) * (#d == undefined) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, xobj : Obj, #n : Num, #plcls : List, xret : Undefined, #d : Undefined) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_161) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_161, true) * MetaData (_$l__lvar_161, null) * empty_fields(_$l__lvar_161 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_161, "@proto") ->@d $lnum_proto) * ((_$l__lvar_161, "@class") ->@d "Number") * ((_$l__lvar_161, "@extensible") ->@d true) * ((_$l__lvar_161, "@primitiveValue") ->@d #n) ]]
normal;

 [[ Pi($lnum_proto, #field, {{ "d", _lvar_162, _lvar_163, _lvar_164, _lvar_165 }}, #pls, #plcls, #plpv) * types(#pls : List, #field : Str, #plpv : List, v : List, _lvar_163 : Bool, #n : Num, #plcls : List, #d : List, _lvar_165 : Bool, _lvar_164 : Bool) * (#d == {{ "d", _lvar_162, _lvar_163, _lvar_164, _lvar_165 }}) * (! (_lvar_162 == empty)) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, #d, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, xobj : Obj, #n : Num, #plcls : List, #d : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, true) * MetaData (_$l_#o, _$l__lvar_166) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_166, true) * MetaData (_$l__lvar_166, null) * empty_fields(_$l__lvar_166 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_166, "@proto") ->@d $lnum_proto) * ((_$l__lvar_166, "@class") ->@d "Number") * ((_$l__lvar_166, "@extensible") ->@d true) * ((_$l__lvar_166, "@primitiveValue") ->@d #n) ]]
normal

proc i__getValue (v) {
			goto [(typeOf(v) = List)] rcand dflt;
	rcand:		rtype := l-nth(v, 0.);
			goto [((rtype = "v") or (rtype = "o"))] init dflt;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr ref;
	is_pr:		xobj := "i__toObject"(rbase) with pelab;
			[* fold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			xret := "getProperty"(xobj, rfield) with pelab;
			[* unfold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase) with pelab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	ref:		goto [((typeOf(v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	er:		xret := [rbase, rfield];
			goto rlab;
	dflt:		xret := v;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	pelab:		xret := PHI(xobj, xret, xret, xret, xret, xret);
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_144) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_144, true) * MetaData (_$l__lvar_144, null) * empty_fields(_$l__lvar_144 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_144, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_144, "@class") ->@d "Error") * ((_$l__lvar_144, "@extensible") ->@d true) ]]
normal

proc ReferenceError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lrferr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_103, true) * MetaData (_$l__lvar_103, null) * empty_fields(_$l__lvar_103 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_103, "@proto") ->@d $lserr_proto) * ((_$l__lvar_103, "@class") ->@d "Error") * ((_$l__lvar_103, "@extensible") ->@d true) * Extensible (_$l_xret, true) * MetaData (_$l_xret, _$l__lvar_103) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc SyntaxError (v) {
			xret := "SyntaxError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};



