pred ErrorObject (l, pr): 
types(l : Obj, _lvar_846 : Obj, pr : Obj) * (pr == _lvar_846) * (l == _$l_l) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l__lvar_58) * Extensible (_$l__lvar_58, extensible) * MetaData (_$l__lvar_58, null) * empty_fields(_$l__lvar_58 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_58, "@proto") ->@d _lvar_846) * ((_$l__lvar_58, "@class") ->@d "Error") * ((_$l__lvar_58, "@extensible") ->@d true);

pred isClass (c, case): 
types(c : Str, case : Str, _lvar_791 : Str) * (! (_lvar_791 == "String")) * (case == "Non-String") * (c == _lvar_791),
 types(c : Str, case : Str, _lvar_789 : Str) * (! (_lvar_789 == "Array")) * (case == "Non-Array") * (c == _lvar_789),
 types(c : Str, case : Str) * (case == "String") * (c == "String"),
 types(c : Str, case : Str) * (case == "Array") * (c == "Array");

pred DataPropConst (l, prop, v): 
types(#e : Bool, l : Obj, prop : Str, _lvar_792 : Str) * (! (_lvar_v == empty)) * (v == _lvar_v) * (prop == _lvar_792) * (l == _$l_l) * ((_$l_l, _lvar_792) ->@d {{ "d", _lvar_v, false, #e, false }});

pred initialHeapPost (globals): 
types(globals : Set, _lvar_849 : Set) * (globals == _lvar_849) * Extensible ($lbool_proto, extensible) * MetaData ($lbool_proto, _$l__lvar_62) * empty_fields($lbool_proto : -{ "constructor", "toString", "valueOf" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l__lvar_65, extensible) * MetaData (_$l__lvar_65, null) * empty_fields(_$l__lvar_65 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_65, "@proto") ->@d null) * ((_$l__lvar_65, "@class") ->@d "Object") * ((_$l__lvar_65, "@extensible") ->@d true) * Extensible ($lnum_proto, extensible) * MetaData ($lnum_proto, _$l__lvar_61) * empty_fields($lnum_proto : -{ "constructor", "toExponential", "toFixed", "toLocaleString", "toPrecision", "toString", "valueOf" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l__lvar_59, extensible) * MetaData (_$l__lvar_59, null) * empty_fields(_$l__lvar_59 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_59, "@proto") ->@d $lobj_proto) * ((_$l__lvar_59, "@class") ->@d "Error") * ((_$l__lvar_59, "@extensible") ->@d true) * Extensible (_$l__lvar_63, extensible) * MetaData (_$l__lvar_63, null) * empty_fields(_$l__lvar_63 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_63, "@scope") ->@d empty) * ((_$l__lvar_63, "@call") ->@d "FP_default") * ((_$l__lvar_63, "@proto") ->@d $lobj_proto) * ((_$l__lvar_63, "@class") ->@d "Function") * ((_$l__lvar_63, "@extensible") ->@d true) * Extensible ($lerr_proto, extensible) * MetaData ($lerr_proto, _$l__lvar_59) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible ($lobj_proto, extensible) * MetaData ($lobj_proto, _$l__lvar_65) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible ($lop_hasOwnProperty, extensible) * MetaData ($lop_hasOwnProperty, _$l__lvar_64) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible (_$l__lvar_64, extensible) * MetaData (_$l__lvar_64, null) * empty_fields(_$l__lvar_64 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_64, "@proto") ->@d $lfun_proto) * ((_$l__lvar_64, "@class") ->@d "Function") * ((_$l__lvar_64, "@extensible") ->@d true) * ((_$l__lvar_64, "@call") ->@d "OP_hasOwnProperty") * ((_$l__lvar_64, "@scope") ->@d empty) * Extensible (_$l__lvar_62, extensible) * MetaData (_$l__lvar_62, null) * empty_fields(_$l__lvar_62 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_62, "@proto") ->@d $lobj_proto) * ((_$l__lvar_62, "@class") ->@d "Boolean") * ((_$l__lvar_62, "@extensible") ->@d true) * ((_$l__lvar_62, "@primitiveValue") ->@d false) * Extensible ($lg, extensible) * MetaData ($lg, _$l__lvar_66) * empty_fields($lg : -u- (_lvar_849, -{ "Error" }-)) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, extensible) * MetaData ($lerr, _$l__lvar_60) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * Extensible ($lfun_proto, extensible) * MetaData ($lfun_proto, _$l__lvar_63) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_61, extensible) * MetaData (_$l__lvar_61, null) * empty_fields(_$l__lvar_61 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_61, "@proto") ->@d $lobj_proto) * ((_$l__lvar_61, "@class") ->@d "Number") * ((_$l__lvar_61, "@extensible") ->@d true) * ((_$l__lvar_61, "@primitiveValue") ->@d 0.) * Extensible (_$l__lvar_60, extensible) * MetaData (_$l__lvar_60, null) * empty_fields(_$l__lvar_60 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_60, "@call") ->@d "Error_call") * ((_$l__lvar_60, "@construct") ->@d "Error_construct") * ((_$l__lvar_60, "@proto") ->@d $lfun_proto) * ((_$l__lvar_60, "@class") ->@d "Function") * ((_$l__lvar_60, "@extensible") ->@d true) * ((_$l__lvar_60, "@scope") ->@d empty) * Extensible (_$l__lvar_66, extensible) * MetaData (_$l__lvar_66, null) * empty_fields(_$l__lvar_66 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_66, "@proto") ->@d $lobj_proto) * ((_$l__lvar_66, "@class") ->@d "Object") * ((_$l__lvar_66, "@extensible") ->@d true);

pred desc_enum (d, v): 
types(d : List, _lvar_848 : List) * (d == _lvar_848) * (v == l-nth(_lvar_848, 3.));

pred desc_set (d, v): 
types(_lvar_847 : List, d : List) * (d == _lvar_847) * (v == l-nth(_lvar_847, 2.));

pred desc_conf (d, v): 
types(d : List, _lvar_851 : List) * (d == _lvar_851) * (v == l-nth(_lvar_851, 4.));

pred desc_val (d, v): 
types(d : List, _lvar_850 : List) * (d == _lvar_850) * (v == l-nth(_lvar_850, 1.));

pred JSObjWithProto (l, proto): 
types(l : Obj) * (proto == _lvar_proto) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d _lvar_proto) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred DataDescriptor (d): 
types(#denum : Bool, d : List, #dwrit : Bool, #dconf : Bool) * (! (#dval == empty)) * (d == {{ "d", #dval, #dwrit, #denum, #dconf }});

pred GenericDescriptor (d): 
types(d : List) * (d == {{ "g", #genum, #gconf, #gval, #gwrit, #gget, #gset }});

pred JSObjGeneral (l, proto, class, ext): 
types(_lvar_795 : Str, class : Str, l : Obj, _lvar_794 : Bool, ext : Bool) * (proto == _lvar_proto) * (class == _lvar_795) * (ext == _lvar_794) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d _lvar_proto) * ((_$l_#md, "@class") ->@d _lvar_795) * ((_$l_#md, "@extensible") ->@d _lvar_794) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred Pi (l, prop, d, ls, lcls, lpv): 
types(ls : List, lcls : List, d : Undefined, l : Obj, #cls : Str, prop : Str, _lvar_833 : Str, lpv : List) * (! (#cls == "String")) * (lpv == {{ "" }}) * (d == undefined) * (ls == {{ _$l_l }}) * (prop == _lvar_833) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@proto") ->@d null) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_833) ->@d none),
 Pi(#lp, _lvar_829, _lvar_d, (#lp :: #ols), (#pcls :: #ocls), (#ppv :: #otv)) * types(#otv : List, #ocls : List, #lcls : List, lcls : List, ls : List, #lp : Obj, l : Obj, _lvar_829 : Str, #ols : List, prop : Str, #cls : Str, #ppv : Str, #lls : List, lpv : List, #pcls : Str, #lpv : List) * (#lcls == (#pcls :: #ocls)) * (#lls == (#lp :: #ols)) * (#lpv == (#ppv :: #otv)) * (! (#cls == "String")) * (lpv == ("" :: (#ppv :: #otv))) * (d == _lvar_d) * (ls == (_$l_l :: (#lp :: #ols))) * (prop == _lvar_829) * (l == _$l_l) * (lcls == (#cls :: (#pcls :: #ocls))) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@proto") ->@d #lp) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_829) ->@d none),
 types(lcls : List, ls : List, d : List, l : Obj, _lvar_824 : Str, _lvar_6 : Bool, prop : Str, _lvar_14 : Bool, lpv : List, _lvar_15 : Bool, _lvar_7 : Bool) * (_lvar_4 == _lvar_12) * (_lvar_6 == _lvar_14) * (_lvar_5 == _lvar_13) * (_lvar_7 == _lvar_15) * (! (_lvar_13 == empty)) * (! (_lvar_12 == empty)) * (lpv == {{ "" }}) * (d == {{ "a", _lvar_13, _lvar_12, _lvar_14, _lvar_15 }}) * (ls == {{ _$l_l }}) * (prop == _lvar_824) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_824) ->@d {{ "a", _lvar_13, _lvar_12, _lvar_14, _lvar_15 }}),
 types(_lvar_11 : Bool, _lvar_1 : Bool, lcls : List, ls : List, _lvar_2 : Bool, d : List, l : Obj, prop : Str, _lvar_10 : Bool, _lvar_809 : Str, lpv : List, _lvar_3 : Bool, _lvar_9 : Bool) * (_lvar_2 == _lvar_10) * (_lvar_3 == _lvar_11) * (_lvar_0 == _lvar_8) * (_lvar_1 == _lvar_9) * (! (_lvar_8 == empty)) * (lpv == {{ "" }}) * (d == {{ "d", _lvar_8, _lvar_9, _lvar_10, _lvar_11 }}) * (ls == {{ _$l_l }}) * (prop == _lvar_809) * (l == _$l_l) * (lcls == {{ #cls }}) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_l, _$l_#md) * ((_$l_l, _lvar_809) ->@d {{ "d", _lvar_8, _lvar_9, _lvar_10, _lvar_11 }});

pred isReferenceError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l__lvar_67) * empty_fields(_$l_l : -{  }-) * Extensible (_$l__lvar_67, extensible) * MetaData (_$l__lvar_67, null) * empty_fields(_$l__lvar_67 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_67, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_67, "@class") ->@d "Error") * ((_$l__lvar_67, "@extensible") ->@d true);

pred initialHeapPre (): 
types() * Extensible ($lbool_proto, extensible) * MetaData ($lbool_proto, _$l__lvar_36) * empty_fields($lbool_proto : -{  }-) * Extensible (_$l__lvar_35, extensible) * MetaData (_$l__lvar_35, null) * empty_fields(_$l__lvar_35 : -{  }-) * Extensible ($lnum_proto, extensible) * MetaData ($lnum_proto, _$l__lvar_35) * empty_fields($lnum_proto : -{  }-) * Extensible ($lerr_proto, extensible) * MetaData ($lerr_proto, _$l__lvar_33) * empty_fields($lerr_proto : -{  }-) * Extensible ($lobj_proto, extensible) * MetaData ($lobj_proto, _$l__lvar_38) * empty_fields($lobj_proto : -{  }-) * Extensible ($lop_hasOwnProperty, extensible) * MetaData ($lop_hasOwnProperty, _$l__lvar_32) * empty_fields($lop_hasOwnProperty : -{  }-) * Extensible (_$l__lvar_39, extensible) * MetaData (_$l__lvar_39, null) * empty_fields(_$l__lvar_39 : -{  }-) * Extensible ($lg, extensible) * MetaData ($lg, _$l__lvar_39) * empty_fields($lg : -{  }-) * Extensible ($lerr, extensible) * MetaData ($lerr, _$l__lvar_34) * empty_fields($lerr : -{  }-) * Extensible (_$l__lvar_34, extensible) * MetaData (_$l__lvar_34, null) * empty_fields(_$l__lvar_34 : -{  }-) * Extensible (_$l__lvar_36, extensible) * MetaData (_$l__lvar_36, null) * empty_fields(_$l__lvar_36 : -{  }-) * Extensible (_$l__lvar_38, extensible) * MetaData (_$l__lvar_38, null) * empty_fields(_$l__lvar_38 : -{  }-) * Extensible ($lfun_proto, extensible) * MetaData ($lfun_proto, _$l__lvar_37) * empty_fields($lfun_proto : -{  }-) * Extensible (_$l__lvar_37, extensible) * MetaData (_$l__lvar_37, null) * empty_fields(_$l__lvar_37 : -{  }-) * Extensible (_$l__lvar_33, extensible) * MetaData (_$l__lvar_33, null) * empty_fields(_$l__lvar_33 : -{  }-) * Extensible (_$l__lvar_32, extensible) * MetaData (_$l__lvar_32, null) * empty_fields(_$l__lvar_32 : -{  }-);

pred BooleanObject (l, b): 
types(_lvar_834 : Bool, l : Obj, b : Bool) * (b == _lvar_834) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lbool_proto) * ((_$l_#md, "@class") ->@d "Boolean") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@primitiveValue") ->@d _lvar_834) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred DataPropGen (l, prop, v, writ, enum, conf): 
types(_lvar_856 : Str, conf : Bool, writ : Bool, _lvar_854 : Bool, l : Obj, _lvar_853 : Bool, prop : Str, enum : Bool, _lvar_855 : Bool) * (! (_lvar_v == empty)) * (enum == _lvar_854) * (v == _lvar_v) * (conf == _lvar_853) * (writ == _lvar_855) * (prop == _lvar_856) * (l == _$l_l) * ((_$l_l, _lvar_856) ->@d {{ "d", _lvar_v, _lvar_855, _lvar_854, _lvar_853 }});

pred JSObject (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lobj_proto) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred isTypeError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l__lvar_40) * empty_fields(_$l_l : -{  }-) * Extensible (_$l__lvar_40, extensible) * MetaData (_$l__lvar_40, null) * empty_fields(_$l__lvar_40 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_40, "@proto") ->@d $lterr_proto) * ((_$l__lvar_40, "@class") ->@d "Error") * ((_$l__lvar_40, "@extensible") ->@d true);

pred isSyntaxError (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l__lvar_41, extensible) * MetaData (_$l__lvar_41, null) * empty_fields(_$l__lvar_41 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_41, "@proto") ->@d $lserr_proto) * ((_$l__lvar_41, "@class") ->@d "Error") * ((_$l__lvar_41, "@extensible") ->@d true) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l__lvar_41);

pred ErrorObjectWithMessage (l, m): 
types(_lvar_835 : Str, m : Str, l : Obj) * (l == _$l_l) * (m == _lvar_835) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lerr_proto) * ((_$l_#md, "@class") ->@d "Error") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "message") ->@d {{ "d", _lvar_835, true, false, true }}) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred DataProp (l, prop, v): 
types(_lvar_837 : Str, l : Obj, prop : Str) * (! (_lvar_v == empty)) * (v == _lvar_v) * (prop == _lvar_837) * (l == _$l_l) * ((_$l_l, _lvar_837) ->@d {{ "d", _lvar_v, true, true, true }});

pred desc_writ (d, v): 
types(_lvar_836 : List, d : List) * (d == _lvar_836) * (v == l-nth(_lvar_836, 2.));

pred NumberObject (l, n): 
types(l : Obj, _lvar_857 : Num, n : Num) * (n == _lvar_857) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#md, "@proto") ->@d $lnum_proto) * ((_$l_#md, "@class") ->@d "Number") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@primitiveValue") ->@d _lvar_857) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md);

pred NumberPrototype (): 
types() * Extensible ($lnum_proto, extensible) * MetaData ($lnum_proto, _$l_#npmd) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l_#npmd, extensible) * MetaData (_$l_#npmd, null) * empty_fields(_$l_#npmd : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#npmd, "@proto") ->@d $lobj_proto) * ((_$l_#npmd, "@class") ->@d "Number") * ((_$l_#npmd, "@extensible") ->@d true) * ((_$l_#npmd, "@primitiveValue") ->@d 0.);

pred BooleanPrototype (): 
types() * Extensible ($lbool_proto, extensible) * MetaData ($lbool_proto, _$l_#bpmd) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l_#bpmd, extensible) * MetaData (_$l_#bpmd, null) * empty_fields(_$l_#bpmd : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l_#bpmd, "@proto") ->@d $lobj_proto) * ((_$l_#bpmd, "@class") ->@d "Boolean") * ((_$l_#bpmd, "@extensible") ->@d true) * ((_$l_#bpmd, "@primitiveValue") ->@d false);

pred AccessorDescriptor (d): 
types(#denum : Bool, d : List, #dconf : Bool) * (! (#dget == empty)) * (! (#dset == empty)) * (d == {{ "a", #dget, #dset, #denum, #dconf }});

pred Descriptor (d): 
types(_lvar_48 : Bool, d : List, _lvar_49 : Bool) * (! (_lvar_47 == empty)) * (! (_lvar_46 == empty)) * (d == {{ "a", _lvar_47, _lvar_46, _lvar_48, _lvar_49 }}),
 types(_lvar_43 : Bool, d : List, _lvar_44 : Bool, _lvar_45 : Bool) * (! (_lvar_42 == empty)) * (d == {{ "d", _lvar_42, _lvar_43, _lvar_44, _lvar_45 }});

pred desc_get (d, v): 
types(_lvar_841 : List, d : List) * (d == _lvar_841) * (v == l-nth(_lvar_841, 1.));

pred Cell_s (l, prop, d): 
types(_lvar_844 : Str, d : List, _lvar_57 : Bool, l : Obj, prop : Str, _lvar_56 : Bool) * (! (_lvar_55 == empty)) * (! (_lvar_54 == empty)) * (d == {{ "a", _lvar_55, _lvar_54, _lvar_56, _lvar_57 }}) * (prop == _lvar_844) * (l == _$l_l) * ((_$l_l, _lvar_844) ->@d {{ "a", _lvar_55, _lvar_54, _lvar_56, _lvar_57 }}),
 types(_lvar_53 : Bool, _lvar_842 : Str, d : List, l : Obj, _lvar_51 : Bool, prop : Str, _lvar_52 : Bool) * (! (_lvar_50 == empty)) * (d == {{ "d", _lvar_50, _lvar_51, _lvar_52, _lvar_53 }}) * (prop == _lvar_842) * (l == _$l_l) * ((_$l_l, _lvar_842) ->@d {{ "d", _lvar_50, _lvar_51, _lvar_52, _lvar_53 }});

pred EmptyExtensibleObject (l): 
types(l : Obj) * (l == _$l_l) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{  }-) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) * empty_fields(_$l_l : -{  }-);

pred Cell_o (l, prop, d): 
types(_lvar_865 : Str, _lvar_75 : Bool, d : List, l : Obj, prop : Str, _lvar_74 : Bool) * (! (_lvar_73 == empty)) * (! (_lvar_72 == empty)) * (d == {{ "a", _lvar_73, _lvar_72, _lvar_74, _lvar_75 }}) * (prop == _lvar_865) * (l == _$l_l) * ((_$l_l, _lvar_865) ->@d {{ "a", _lvar_73, _lvar_72, _lvar_74, _lvar_75 }}),
 types(_lvar_69 : Bool, _lvar_863 : Str, _lvar_71 : Bool, d : List, l : Obj, _lvar_70 : Bool, prop : Str) * (! (_lvar_68 == empty)) * (d == {{ "d", _lvar_68, _lvar_69, _lvar_70, _lvar_71 }}) * (prop == _lvar_863) * (l == _$l_l) * ((_$l_l, _lvar_863) ->@d {{ "d", _lvar_68, _lvar_69, _lvar_70, _lvar_71 }}),
 types(_lvar_862 : Str, d : None, l : Obj, prop : Str) * (d == none) * (prop == _lvar_862) * (l == _$l_l) * ((_$l_l, _lvar_862) ->@d none);

pred JSFunctionObject (l, fid, sc, len, proto): 
types(sc : List, fid : Str, l : Obj, _lvar_859 : Num, len : Num, proto : Obj, _lvar_860 : List, _lvar_858 : Obj, _lvar_861 : Str) * (proto == _lvar_858) * (l == _$l_l) * (len == _lvar_859) * (fid == _lvar_861) * (sc == _lvar_860) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@call") ->@d _lvar_861) * ((_$l_#md, "@construct") ->@d _lvar_861) * ((_$l_#md, "@scope") ->@d _lvar_860) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_859, false, false, false }}) * ((_$l_l, "arguments") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_l, "caller") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_l, "prototype") ->@d {{ "d", _lvar_858, true, false, false }});

pred JSBIFunction (l, fid, len): 
types(fid : Str, _lvar_870 : Str, l : Obj, len : Num, _lvar_869 : Num) * (l == _$l_l) * (len == _lvar_869) * (fid == _lvar_870) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@call") ->@d _lvar_870) * ((_$l_#md, "@scope") ->@d empty) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_869, false, false, false }});

pred BIFunctionObject (l, len, proto): 
types(_lvar_867 : Obj, l : Obj, _lvar_868 : Num, len : Num, proto : Obj) * (proto == _lvar_867) * (l == _$l_l) * (len == _lvar_868) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * empty_fields(_$l_#md : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) * ((_$l_l, "length") ->@d {{ "d", _lvar_868, false, false, false }}) * ((_$l_l, "prototype") ->@d {{ "d", _lvar_867, false, false, false }});


spec TypeError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_765) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_765, extensible) * MetaData (_$l__lvar_765, null) * empty_fields(_$l__lvar_765 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_765, "@proto") ->@d $lterr_proto) * ((_$l__lvar_765, "@class") ->@d "Error") * ((_$l__lvar_765, "@extensible") ->@d true) ]]
normal

proc TypeError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lterr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec TypeError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_675, extensible) * MetaData (_$l__lvar_675, null) * empty_fields(_$l__lvar_675 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_675, "@proto") ->@d $lterr_proto) * ((_$l__lvar_675, "@class") ->@d "Error") * ((_$l__lvar_675, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_675) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc TypeError (v) {
			xret := "TypeError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec defineOwnProperty(l, prop, desc, throw)
[[ types(_lvar_333 : Bool, #desc : List, _lvar_331 : Bool, l : Obj, #cls : Str, _lvar_332 : Bool, #throw : Bool, #prop : Str) * (#desc == {{ "d", _lvar_330, _lvar_331, _lvar_332, _lvar_333 }}) * (! (_lvar_330 == empty)) * (! (#cls == "Array")) * (! (#cls == "String")) * (throw == #throw) * (desc == {{ "d", _lvar_330, _lvar_331, _lvar_332, _lvar_333 }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(_lvar_337 : Bool, #desc : List, _lvar_336 : Bool, #cls : Str, #throw : Bool, _lvar_335 : Bool, #prop : Str) * (#desc == {{ "d", _lvar_334, _lvar_335, _lvar_336, _lvar_337 }}) * (! (_lvar_334 == empty)) * (throw == _lvar_throw) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_334, _lvar_335, _lvar_336, _lvar_337 }}) ]]
normal;

 [[ types(#dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, #dec : Bool, #dcc : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_346, true, #dec, #dcc }}) * (#desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (! (_lvar_346 == empty)) * (! (#gval == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_346, true, #dec, #dcc }}) ]]
[[ types(#dcur : List, #desc : List, #cls : Str, #ext : Bool, #dec : Bool, xret : Bool, #dcc : Bool, #prop : Str) * (! (#gval == empty)) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", #gval, true, #dec, #dcc }}) ]]
normal;

 [[ types(_lvar_367 : Bool, #dcur : List, #desc : List, l : Obj, _lvar_375 : Bool, #cls : Str, _lvar_377 : Bool, #ext : Bool, _lvar_376 : Bool, #prop : Str, _lvar_368 : Bool) * (#dcur == {{ "d", _lvar_366, _lvar_367, _lvar_368, true }}) * (#desc == {{ "d", _lvar_374, _lvar_375, _lvar_376, _lvar_377 }}) * (! (_lvar_374 == empty)) * (! (_lvar_366 == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "d", _lvar_374, _lvar_375, _lvar_376, _lvar_377 }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_366, _lvar_367, _lvar_368, true }}) ]]
[[ types(_lvar_381 : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_380 : Bool, #ext : Bool, _lvar_379 : Bool, xret : Bool, #prop : Str) * (#desc == {{ "d", _lvar_378, _lvar_379, _lvar_380, _lvar_381 }}) * (! (_lvar_378 == empty)) * (! (#cls == "Array")) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_378, _lvar_379, _lvar_380, _lvar_381 }}) ]]
normal;

 [[ types(_lvar_387 : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, #enum : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_394, true, #enum, false }}) * (#desc == {{ "d", _lvar_386, _lvar_387, #enum, false }}) * (! (_lvar_394 == empty)) * (! (_lvar_386 == empty)) * (! (#cls == "Array")) * (throw == #throw) * (desc == {{ "d", _lvar_386, _lvar_387, #enum, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_394, true, #enum, false }}) ]]
[[ types(_lvar_405 : Bool, _lvar_403 : Bool, #dcur : List, #desc : List, #cls : Str, #ext : Bool, #enum : Bool, xret : Bool, _lvar_404 : Bool, #prop : Str) * (#desc == {{ "d", _lvar_402, _lvar_403, _lvar_404, _lvar_405 }}) * (! (_lvar_402 == empty)) * (throw == _lvar_throw) * (xret == true) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_402, _lvar_403, _lvar_404, _lvar_405 }}) ]]
normal;

 [[ types(l : Obj, #cls : Str, throw : Bool, #prop : Str) * (! (#cls == "Array")) * (throw == true) * (desc == #desc) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Obj, #prop : Str) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_418) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_418, extensible) * MetaData (_$l__lvar_418, null) * empty_fields(_$l__lvar_418 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_418, "@proto") ->@d $lterr_proto) * ((_$l__lvar_418, "@class") ->@d "Error") * ((_$l__lvar_418, "@extensible") ->@d true) ]]
error;

 [[ types(l : Obj, #cls : Str, throw : Bool, #prop : Str) * (! (#cls == "Array")) * (throw == false) * (desc == #desc) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Bool, #prop : Str) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(#dcur : List, #desc : List, _lvar_456 : Bool, l : Obj, _lvar_457 : Bool, _lvar_445 : Bool, #cls : Str, _lvar_444 : Bool, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_455, _lvar_456, _lvar_457, false }}) * (#desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, true }}) * (! (_lvar_455 == empty)) * (! (_lvar_443 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_455, _lvar_456, _lvar_457, false }}) ]]
[[ types(_lvar_465 : Bool, _lvar_467 : Bool, #dcur : List, #desc : List, _lvar_466 : Bool, #cls : Str, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "d", _lvar_464, _lvar_465, _lvar_466, _lvar_467 }}) * (! (_lvar_464 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * Extensible (_$l__lvar_463, extensible) * MetaData (_$l__lvar_463, null) * empty_fields(_$l__lvar_463 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_463, "@proto") ->@d $lterr_proto) * ((_$l__lvar_463, "@class") ->@d "Error") * ((_$l__lvar_463, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_464, _lvar_465, _lvar_466, _lvar_467 }}) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_463) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#dcur : List, #desc : List, _lvar_461 : Bool, l : Obj, _lvar_445 : Bool, #cls : Str, _lvar_444 : Bool, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_460, _lvar_459, _lvar_461, false }}) * (#desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, true }}) * (! (_lvar_460 == empty)) * (! (_lvar_459 == empty)) * (! (_lvar_443 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_443, _lvar_444, _lvar_445, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_460, _lvar_459, _lvar_461, false }}) ]]
[[ types(#dcur : List, #desc : List, #cls : Str, #ext : Bool, xret : Obj, _lvar_471 : Bool, _lvar_470 : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_469, _lvar_468, _lvar_470, _lvar_471 }}) * (! (_lvar_469 == empty)) * (! (_lvar_468 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * Extensible (_$l__lvar_463, extensible) * MetaData (_$l__lvar_463, null) * empty_fields(_$l__lvar_463 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_463, "@proto") ->@d $lterr_proto) * ((_$l__lvar_463, "@class") ->@d "Error") * ((_$l__lvar_463, "@extensible") ->@d true) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_469, _lvar_468, _lvar_470, _lvar_471 }}) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_463) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_485 : Bool, #dcur : List, #desc : List, _lvar_474 : Bool, l : Obj, _lvar_473 : Bool, #cls : Str, #ext : Bool, throw : Bool, #prop : Str, _lvar_486 : Bool) * (#dcur == {{ "d", _lvar_484, _lvar_485, _lvar_486, false }}) * (#desc == {{ "d", _lvar_472, _lvar_473, _lvar_474, true }}) * (! (_lvar_484 == empty)) * (! (_lvar_472 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_472, _lvar_473, _lvar_474, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_484, _lvar_485, _lvar_486, false }}) ]]
[[ types(_lvar_493 : Bool, #dcur : List, #desc : List, _lvar_495 : Bool, #cls : Str, _lvar_494 : Bool, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_492, _lvar_493, _lvar_494, _lvar_495 }}) * (! (_lvar_492 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_492, _lvar_493, _lvar_494, _lvar_495 }}) ]]
normal;

 [[ types(#dcur : List, #desc : List, _lvar_490 : Bool, _lvar_474 : Bool, l : Obj, _lvar_473 : Bool, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_489, _lvar_488, _lvar_490, false }}) * (#desc == {{ "d", _lvar_472, _lvar_473, _lvar_474, true }}) * (! (_lvar_489 == empty)) * (! (_lvar_488 == empty)) * (! (_lvar_472 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_472, _lvar_473, _lvar_474, true }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_489, _lvar_488, _lvar_490, false }}) ]]
[[ types(_lvar_498 : Bool, #dcur : List, #desc : List, #cls : Str, #ext : Bool, xret : Bool, #prop : Str, _lvar_499 : Bool) * (#dcur == {{ "a", _lvar_497, _lvar_496, _lvar_498, _lvar_499 }}) * (! (_lvar_497 == empty)) * (! (_lvar_496 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_497, _lvar_496, _lvar_498, _lvar_499 }}) ]]
normal;

 [[ types(_lvar_501 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str, _lvar_513 : Bool) * (#dcur == {{ "d", _lvar_512, _lvar_513, #ec, false }}) * (#desc == {{ "d", _lvar_500, _lvar_501, #ed, false }}) * (! (_lvar_512 == empty)) * (! (_lvar_500 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_500, _lvar_501, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_512, _lvar_513, #ec, false }}) ]]
[[ types(_lvar_524 : Bool, _lvar_522 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_523 : Bool, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "d", _lvar_521, _lvar_522, _lvar_523, _lvar_524 }}) * (! (_lvar_521 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_521, _lvar_522, _lvar_523, _lvar_524 }}) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_520) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_520, extensible) * MetaData (_$l__lvar_520, null) * empty_fields(_$l__lvar_520 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_520, "@proto") ->@d $lterr_proto) * ((_$l__lvar_520, "@class") ->@d "Error") * ((_$l__lvar_520, "@extensible") ->@d true) ]]
error;

 [[ types(_lvar_501 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_517, _lvar_516, #ec, false }}) * (#desc == {{ "d", _lvar_500, _lvar_501, #ed, false }}) * (! (_lvar_517 == empty)) * (! (_lvar_516 == empty)) * (! (_lvar_500 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_500, _lvar_501, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_517, _lvar_516, #ec, false }}) ]]
[[ types(_lvar_527 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, _lvar_528 : Bool, #cls : Str, #ext : Bool, xret : Obj, #prop : Str) * (#dcur == {{ "a", _lvar_526, _lvar_525, _lvar_527, _lvar_528 }}) * (! (_lvar_526 == empty)) * (! (_lvar_525 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_526, _lvar_525, _lvar_527, _lvar_528 }}) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_520) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_520, extensible) * MetaData (_$l__lvar_520, null) * empty_fields(_$l__lvar_520 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_520, "@proto") ->@d $lterr_proto) * ((_$l__lvar_520, "@class") ->@d "Error") * ((_$l__lvar_520, "@extensible") ->@d true) ]]
error;

 [[ types(_lvar_530 : Bool, #ec : Bool, #dcur : List, _lvar_542 : Bool, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_541, _lvar_542, #ec, false }}) * (#desc == {{ "d", _lvar_529, _lvar_530, #ed, false }}) * (! (_lvar_541 == empty)) * (! (_lvar_529 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_529, _lvar_530, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_541, _lvar_542, #ec, false }}) ]]
[[ types(_lvar_550 : Bool, _lvar_552 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_551 : Bool, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_549, _lvar_550, _lvar_551, _lvar_552 }}) * (! (_lvar_549 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_549, _lvar_550, _lvar_551, _lvar_552 }}) ]]
normal;

 [[ types(_lvar_530 : Bool, #ec : Bool, #dcur : List, #ed : Bool, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_546, _lvar_545, #ec, false }}) * (#desc == {{ "d", _lvar_529, _lvar_530, #ed, false }}) * (! (_lvar_546 == empty)) * (! (_lvar_545 == empty)) * (! (_lvar_529 == empty)) * (! (#ed == #ec)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_529, _lvar_530, #ed, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_546, _lvar_545, #ec, false }}) ]]
[[ types(_lvar_555 : Bool, _lvar_556 : Bool, #ec : Bool, #ed : Bool, #dcur : List, #desc : List, #cls : Str, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "a", _lvar_554, _lvar_553, _lvar_555, _lvar_556 }}) * (! (_lvar_554 == empty)) * (! (_lvar_553 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_554, _lvar_553, _lvar_555, _lvar_556 }}) ]]
normal;

 [[ types(#en : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_565, false, #en, false }}) * (#desc == {{ "d", _lvar_557, true, #en, false }}) * (! (_lvar_565 == empty)) * (! (_lvar_557 == empty)) * (! (#cls == "Array")) * (throw == true) * (desc == {{ "d", _lvar_557, true, #en, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_565, false, #en, false }}) ]]
[[ types(#en : Bool, #dcur : List, #desc : List, #cls : Str, _lvar_577 : Bool, _lvar_576 : Bool, #ext : Bool, xret : Obj, #prop : Str, _lvar_575 : Bool) * (#dcur == {{ "d", _lvar_574, _lvar_575, _lvar_576, _lvar_577 }}) * (! (_lvar_574 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_574, _lvar_575, _lvar_576, _lvar_577 }}) * Extensible (_$l__lvar_573, extensible) * MetaData (_$l__lvar_573, null) * empty_fields(_$l__lvar_573 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_573, "@proto") ->@d $lterr_proto) * ((_$l__lvar_573, "@class") ->@d "Error") * ((_$l__lvar_573, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_573) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#en : Bool, #dcur : List, #desc : List, l : Obj, #cls : Str, #ext : Bool, throw : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_590, false, #en, false }}) * (#desc == {{ "d", _lvar_582, true, #en, false }}) * (! (_lvar_590 == empty)) * (! (_lvar_582 == empty)) * (! (#cls == "Array")) * (throw == false) * (desc == {{ "d", _lvar_582, true, #en, false }}) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_590, false, #en, false }}) ]]
[[ types(_lvar_600 : Bool, #en : Bool, #dcur : List, #desc : List, _lvar_599 : Bool, #cls : Str, _lvar_601 : Bool, #ext : Bool, xret : Bool, #prop : Str) * (#dcur == {{ "d", _lvar_598, _lvar_599, _lvar_600, _lvar_601 }}) * (! (_lvar_598 == empty)) * (throw == _lvar_throw) * (xret == false) * (desc == _lvar_desc) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_598, _lvar_599, _lvar_600, _lvar_601 }}) ]]
normal

proc defineOwnProperty (l, prop, desc, throw) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "Array")] adop odop;
	adop:		xret := "a__defineOwnProperty"(l, prop, desc, throw) with elab;
			goto rlab;
	odop:		xret := "o__defineOwnProperty"(l, prop, desc, throw) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec Error_construct(xsc, vthis, v)
[[ types(vthis : Obj, v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _$l_#vthis) * Extensible (_$l_#mvt, extensible) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@class") ->@d #oc) * ((_$l_#mvt, "@extensible") ->@d #oe) * Extensible (_$l_#vthis, extensible) * MetaData (_$l_#vthis, _$l_#mvt) ]]
[[ types(xret : Obj) * (xret == _$l_#vthis) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l_#mvt, extensible) * MetaData (_$l_#mvt, null) * ((_$l_#mvt, "@class") ->@d "Error") * ((_$l_#mvt, "@extensible") ->@d true) * Extensible (_$l_#vthis, extensible) * MetaData (_$l_#vthis, _$l_#mvt) ]]
normal;

 [[ types(vthis : Obj, #m : Str) * (v == #m) * (xsc == _lvar_xsc) * (vthis == _$l_#vthis) * ((_$l_#mvt, "@class") ->@d #oc) * ((_$l_#mvt, "@extensible") ->@d #oe) * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d #om) ]]
[[ types(#m : Str, xret : Obj) * (xret == _$l_#vthis) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * ((_$l_#mvt, "@class") ->@d "Error") * ((_$l_#mvt, "@extensible") ->@d true) * MetaData (_$l_#vthis, _$l_#mvt) * ((_$l_#vthis, "message") ->@d {{ "d", #m, true, false, true }}) ]]
normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;
			m := metadata (vthis);
			[m, "@class"] := "Error";
			[m, "@extensible"] := true;
			goto [(v = undefined)] rlab mess;
	mess:		xerr := "i__toString"(v) with elab;
			[xret, "message"] := {{ "d", xerr, true, false, true }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xerr, elab;
};


spec canPut(l, prop)
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, l : Obj, #ls : List, #ext : Bool, #prop : Str, #lpv : List) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, #ext : Bool, #prop : Str, #lpv : List) * (xret == #ext) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_81, #writ, _lvar_83, _lvar_84 }}, {{ #l }}, #lcls, #lpv) * types(_lvar_84 : Bool, #writ : Bool, #lcls : List, _lvar_83 : Bool, #l : Obj, #d : List, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_81, #writ, _lvar_83, _lvar_84 }}) * (! (_lvar_81 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, {{ #l }}, #lcls, #lpv) * types(#writ : Bool, #lcls : List, #l : Obj, #d : List, #prop : Str, #lpv : List) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_87, _lvar_88, _lvar_89, _lvar_90 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(_lvar_89 : Bool, #lcls : List, _lvar_90 : Bool, l : Obj, #other : List, #ls : List, _lvar_88 : Bool, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_87, _lvar_88, _lvar_89, _lvar_90 }}) * (! (_lvar_87 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #other : List, #ls : List, xret : Bool, #d : List, #prop : Str, #lpv : List) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_91, #writ, _lvar_93, _lvar_94 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(#writ : Bool, #lcls : List, _lvar_93 : Bool, l : Obj, #other : List, #ls : List, _lvar_94 : Bool, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_91, #writ, _lvar_93, _lvar_94 }}) * (! (_lvar_91 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#writ : Bool, #lcls : List, #other : List, #ls : List, #d : List, #prop : Str, #lpv : List) * (xret == #writ) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal

proc canPut (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	op:		goto [(xret = undefined)] nop odesc;
	odesc:		d := l-nth(xret, 0.);
			goto [(d = "d")] odd nop;
	odd:		xret := l-nth(xret, 2.);
			goto rlab;
	nop:		m := metadata (l);
			e := [m, "@extensible"];
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] ext desc;
	desc:		d := l-nth(xret, 0.);
			v := l-nth(xret, 2.);
			goto [(d = "d")] dd ad;
	dd:		goto [e] wr ext;
	wr:		xret := v;
			goto rlab;
	ad:		xret := (not (v = undefined));
			goto rlab;
	ext:		xret := e;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec setupInitialHeap()
[[ types() * Extensible ($lbool_proto, extensible) * MetaData ($lbool_proto, _$l__lvar_770) * empty_fields($lbool_proto : -{  }-) * Extensible (_$l__lvar_768, extensible) * MetaData (_$l__lvar_768, null) * empty_fields(_$l__lvar_768 : -{  }-) * Extensible (_$l__lvar_769, extensible) * MetaData (_$l__lvar_769, null) * empty_fields(_$l__lvar_769 : -{  }-) * Extensible (_$l__lvar_767, extensible) * MetaData (_$l__lvar_767, null) * empty_fields(_$l__lvar_767 : -{  }-) * Extensible (_$l__lvar_773, extensible) * MetaData (_$l__lvar_773, null) * empty_fields(_$l__lvar_773 : -{  }-) * Extensible ($lnum_proto, extensible) * MetaData ($lnum_proto, _$l__lvar_769) * empty_fields($lnum_proto : -{  }-) * Extensible (_$l__lvar_772, extensible) * MetaData (_$l__lvar_772, null) * empty_fields(_$l__lvar_772 : -{  }-) * Extensible (_$l__lvar_770, extensible) * MetaData (_$l__lvar_770, null) * empty_fields(_$l__lvar_770 : -{  }-) * Extensible ($lerr_proto, extensible) * MetaData ($lerr_proto, _$l__lvar_767) * empty_fields($lerr_proto : -{  }-) * Extensible (_$l__lvar_766, extensible) * MetaData (_$l__lvar_766, null) * empty_fields(_$l__lvar_766 : -{  }-) * Extensible (_$l__lvar_771, extensible) * MetaData (_$l__lvar_771, null) * empty_fields(_$l__lvar_771 : -{  }-) * Extensible ($lobj_proto, extensible) * MetaData ($lobj_proto, _$l__lvar_772) * empty_fields($lobj_proto : -{  }-) * Extensible ($lop_hasOwnProperty, extensible) * MetaData ($lop_hasOwnProperty, _$l__lvar_766) * empty_fields($lop_hasOwnProperty : -{  }-) * Extensible ($lg, extensible) * MetaData ($lg, _$l__lvar_773) * empty_fields($lg : -{  }-) * Extensible ($lerr, extensible) * MetaData ($lerr, _$l__lvar_768) * empty_fields($lerr : -{  }-) * Extensible ($lfun_proto, extensible) * MetaData ($lfun_proto, _$l__lvar_771) * empty_fields($lfun_proto : -{  }-) ]]
[[ types(xret : Empty) * (xret == empty) * Extensible ($lbool_proto, extensible) * MetaData ($lbool_proto, _$l__lvar_778) * empty_fields($lbool_proto : -{ "constructor", "toString", "valueOf" }-) * (($lbool_proto, "constructor") ->@d {{ "d", $lbool, true, false, true }}) * (($lbool_proto, "toString") ->@d {{ "d", $lbp_toString, true, false, true }}) * (($lbool_proto, "valueOf") ->@d {{ "d", $lbp_valueOf, true, false, true }}) * Extensible (_$l__lvar_783, extensible) * MetaData (_$l__lvar_783, null) * empty_fields(_$l__lvar_783 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_783, "@proto") ->@d $lobj_proto) * ((_$l__lvar_783, "@class") ->@d "Object") * ((_$l__lvar_783, "@extensible") ->@d true) * Extensible ($lnum_proto, extensible) * MetaData ($lnum_proto, _$l__lvar_777) * empty_fields($lnum_proto : -{ "constructor", "toExponential", "toFixed", "toLocaleString", "toPrecision", "toString", "valueOf" }-) * (($lnum_proto, "constructor") ->@d {{ "d", $lnum, true, false, true }}) * (($lnum_proto, "toString") ->@d {{ "d", $lnp_toString, true, false, true }}) * (($lnum_proto, "toLocaleString") ->@d {{ "d", $lnp_toLocaleString, true, false, true }}) * (($lnum_proto, "valueOf") ->@d {{ "d", $lnp_valueOf, true, false, true }}) * (($lnum_proto, "toFixed") ->@d {{ "d", $lnp_toFixed, true, false, true }}) * (($lnum_proto, "toExponential") ->@d {{ "d", $lnp_toExponential, true, false, true }}) * (($lnum_proto, "toPrecision") ->@d {{ "d", $lnp_toPrecision, true, false, true }}) * Extensible (_$l__lvar_778, extensible) * MetaData (_$l__lvar_778, null) * empty_fields(_$l__lvar_778 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_778, "@proto") ->@d $lobj_proto) * ((_$l__lvar_778, "@class") ->@d "Boolean") * ((_$l__lvar_778, "@extensible") ->@d true) * ((_$l__lvar_778, "@primitiveValue") ->@d false) * Extensible (_$l__lvar_776, extensible) * MetaData (_$l__lvar_776, null) * empty_fields(_$l__lvar_776 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_776, "@call") ->@d "Error_call") * ((_$l__lvar_776, "@construct") ->@d "Error_construct") * ((_$l__lvar_776, "@proto") ->@d $lfun_proto) * ((_$l__lvar_776, "@class") ->@d "Function") * ((_$l__lvar_776, "@extensible") ->@d true) * ((_$l__lvar_776, "@scope") ->@d empty) * Extensible ($lerr_proto, extensible) * MetaData ($lerr_proto, _$l__lvar_774) * empty_fields($lerr_proto : -{ "message" }-) * (($lerr_proto, "message") ->@d {{ "d", "", true, false, true }}) * Extensible ($lobj_proto, extensible) * MetaData ($lobj_proto, _$l__lvar_782) * empty_fields($lobj_proto : -{ "hasOwnProperty" }-) * (($lobj_proto, "hasOwnProperty") ->@d {{ "d", $lop_hasOwnProperty, true, false, true }}) * Extensible ($lop_hasOwnProperty, extensible) * MetaData ($lop_hasOwnProperty, _$l__lvar_781) * empty_fields($lop_hasOwnProperty : -{ "length" }-) * (($lop_hasOwnProperty, "length") ->@d {{ "d", 1., false, false, false }}) * Extensible ($lg, extensible) * MetaData ($lg, _$l__lvar_783) * empty_fields($lg : -u- (-{  }-, -{ "Error" }-)) * (($lg, "Error") ->@d {{ "d", $lerr, true, false, true }}) * Extensible ($lerr, extensible) * MetaData ($lerr, _$l__lvar_776) * empty_fields($lerr : -{ "length", "prototype" }-) * (($lerr, "length") ->@d {{ "d", 1., false, false, false }}) * (($lerr, "prototype") ->@d {{ "d", $lerr_proto, false, false, false }}) * Extensible (_$l__lvar_777, extensible) * MetaData (_$l__lvar_777, null) * empty_fields(_$l__lvar_777 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_777, "@proto") ->@d $lobj_proto) * ((_$l__lvar_777, "@class") ->@d "Number") * ((_$l__lvar_777, "@extensible") ->@d true) * ((_$l__lvar_777, "@primitiveValue") ->@d 0.) * Extensible ($lfun_proto, extensible) * MetaData ($lfun_proto, _$l__lvar_780) * empty_fields($lfun_proto : -{ "length" }-) * (($lfun_proto, "length") ->@d {{ "d", 0., false, false, false }}) * Extensible (_$l__lvar_781, extensible) * MetaData (_$l__lvar_781, null) * empty_fields(_$l__lvar_781 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_781, "@proto") ->@d $lfun_proto) * ((_$l__lvar_781, "@class") ->@d "Function") * ((_$l__lvar_781, "@extensible") ->@d true) * ((_$l__lvar_781, "@call") ->@d "OP_hasOwnProperty") * ((_$l__lvar_781, "@scope") ->@d empty) * Extensible (_$l__lvar_780, extensible) * MetaData (_$l__lvar_780, null) * empty_fields(_$l__lvar_780 : -{ "@call", "@class", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_780, "@scope") ->@d empty) * ((_$l__lvar_780, "@call") ->@d "FP_default") * ((_$l__lvar_780, "@proto") ->@d $lobj_proto) * ((_$l__lvar_780, "@class") ->@d "Function") * ((_$l__lvar_780, "@extensible") ->@d true) * Extensible (_$l__lvar_782, extensible) * MetaData (_$l__lvar_782, null) * empty_fields(_$l__lvar_782 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_782, "@proto") ->@d null) * ((_$l__lvar_782, "@class") ->@d "Object") * ((_$l__lvar_782, "@extensible") ->@d true) * Extensible (_$l__lvar_774, extensible) * MetaData (_$l__lvar_774, null) * empty_fields(_$l__lvar_774 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_774, "@proto") ->@d $lobj_proto) * ((_$l__lvar_774, "@class") ->@d "Error") * ((_$l__lvar_774, "@extensible") ->@d true) ]]
normal

proc setupInitialHeap () {
			xret := "create_default_object"($lg, $lobj_proto, "Object", true);
			xret := "create_default_object"($lobj_proto, null, "Object", true);
			[$lobj_proto, "hasOwnProperty"] := {{ "d", $lop_hasOwnProperty, true, false, true }};
			xret := "create_object_with_call_construct"($lop_hasOwnProperty, "OP_hasOwnProperty", empty, 1.);
			xret := "create_object_with_call_construct"($lfun_proto, "FP_default", empty, 0.);
			m := metadata ($lfun_proto);
			[m, "@proto"] := $lobj_proto;
			xret := "create_default_object"($lbool_proto, $lobj_proto, "Boolean", true);
			m := metadata ($lbool_proto);
			[m, "@primitiveValue"] := false;
			[$lbool_proto, "constructor"] := {{ "d", $lbool, true, false, true }};
			[$lbool_proto, "toString"] := {{ "d", $lbp_toString, true, false, true }};
			[$lbool_proto, "valueOf"] := {{ "d", $lbp_valueOf, true, false, true }};
			xret := "create_default_object"($lnum_proto, $lobj_proto, "Number", true);
			m := metadata ($lnum_proto);
			[m, "@primitiveValue"] := 0.;
			[$lnum_proto, "constructor"] := {{ "d", $lnum, true, false, true }};
			[$lnum_proto, "toString"] := {{ "d", $lnp_toString, true, false, true }};
			[$lnum_proto, "toLocaleString"] := {{ "d", $lnp_toLocaleString, true, false, true }};
			[$lnum_proto, "valueOf"] := {{ "d", $lnp_valueOf, true, false, true }};
			[$lnum_proto, "toFixed"] := {{ "d", $lnp_toFixed, true, false, true }};
			[$lnum_proto, "toExponential"] := {{ "d", $lnp_toExponential, true, false, true }};
			[$lnum_proto, "toPrecision"] := {{ "d", $lnp_toPrecision, true, false, true }};
			xret := "create_object_with_call_construct"($lerr, "Error_call", "Error_construct", 1.);
			[$lg, "Error"] := {{ "d", $lerr, true, false, true }};
			[$lerr, "prototype"] := {{ "d", $lerr_proto, false, false, false }};
			xret := "create_default_object"($lerr_proto, $lobj_proto, "Error", true);
			[$lerr_proto, "message"] := {{ "d", "", true, false, true }};
	rlab:		xret := empty
} with {
	ret: xret, rlab;
};


spec s__getOwnProperty(l, prop)
[[ types(l : Obj, _lvar_621 : Bool, _lvar_622 : Bool, _lvar_620 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_619, _lvar_620, _lvar_621, _lvar_622 }}) * (! (_lvar_619 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_619, _lvar_620, _lvar_621, _lvar_622 }}) ]]
[[ types(_lvar_630 : Bool, _lvar_628 : Bool, _lvar_629 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_627, _lvar_628, _lvar_629, _lvar_630 }}) * (! (_lvar_627 == empty)) * (xret == {{ "d", _lvar_627, _lvar_628, _lvar_629, _lvar_630 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_627, _lvar_628, _lvar_629, _lvar_630 }}) ]]
normal;

 [[ types(l : Obj, _lvar_625 : Bool, _lvar_626 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_624, _lvar_623, _lvar_625, _lvar_626 }}) * (! (_lvar_624 == empty)) * (! (_lvar_623 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_624, _lvar_623, _lvar_625, _lvar_626 }}) ]]
[[ types(_lvar_633 : Bool, _lvar_634 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_632, _lvar_631, _lvar_633, _lvar_634 }}) * (! (_lvar_632 == empty)) * (! (_lvar_631 == empty)) * (xret == {{ "a", _lvar_632, _lvar_631, _lvar_633, _lvar_634 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_632, _lvar_631, _lvar_633, _lvar_634 }}) ]]
normal

proc s__getOwnProperty (l, prop) {
			xret := "o__getOwnProperty"(l, prop);
			goto [(xret = undefined)] str rlab;
	str:		idx := "i__toInteger"(prop) with elab;
			goto [(idx < 0.)] rlab next;
	next:		sidx := "i__toString"(idx);
			goto [(sidx = prop)] index rlab;
	index:		m := metadata (l);
			str := [m, "@primitiveValue"];
			len := (s-len str);
			goto [(len <= idx)] rlab return;
	return:		rstr := s-nth(str, idx);
			xret := {{ "d", rstr, false, true, false }};
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_function_object(xsc, call, construct, params)
[[ types(#construct : Str, #params : List, #xsc : List, #call : Str) * (#call == #construct) * (xsc == #xsc) * (construct == #construct) * (params == #params) * (call == #construct) ]]
[[ types(#construct : Str, #params : List, xret : Obj, #xsc : List, #call : Str) * (xret == _$l_xret) * (xsc == _lvar_xsc) * (construct == _lvar_construct) * (params == _lvar_params) * (call == _lvar_call) * Extensible (_$l_#prototype, extensible) * MetaData (_$l_#prototype, _$l__lvar_606) * empty_fields(_$l_#prototype : -{ "constructor" }-) * ((_$l_#prototype, "constructor") ->@d {{ "d", _$l_xret, true, false, true }}) * Extensible (_$l__lvar_607, extensible) * MetaData (_$l__lvar_607, null) * empty_fields(_$l__lvar_607 : -{ "@call", "@class", "@construct", "@extensible", "@proto", "@scope" }-) * ((_$l__lvar_607, "@proto") ->@d $lfun_proto) * ((_$l__lvar_607, "@class") ->@d "Function") * ((_$l__lvar_607, "@extensible") ->@d true) * ((_$l__lvar_607, "@call") ->@d #call) * ((_$l__lvar_607, "@construct") ->@d #call) * ((_$l__lvar_607, "@scope") ->@d #xsc) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_607) * empty_fields(_$l_xret : -{ "arguments", "caller", "length", "prototype" }-) * ((_$l_xret, "length") ->@d {{ "d", (l-len #params), false, false, false }}) * ((_$l_xret, "arguments") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_xret, "caller") ->@d {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }}) * ((_$l_xret, "prototype") ->@d {{ "d", _$l_#prototype, true, false, false }}) * Extensible (_$l__lvar_606, extensible) * MetaData (_$l__lvar_606, null) * empty_fields(_$l__lvar_606 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_606, "@proto") ->@d $lobj_proto) * ((_$l__lvar_606, "@class") ->@d "Object") * ((_$l__lvar_606, "@extensible") ->@d true) ]]
normal

proc create_function_object (xsc, call, construct, params) {
			len := (l-len params);
			m := new(null);
			l := new(m);
			l := "create_object_with_call_construct"(l, call, construct, len);
			[m, "@scope"] := xsc;
			prototype := "Object_construct"();
			[prototype, "constructor"] := {{ "d", l, true, false, true }};
			[l, "prototype"] := {{ "d", prototype, true, false, false }};
			[l, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			[l, "arguments"] := {{ "a", $lthrow_type_error, $lthrow_type_error, false, false }};
			xret := l;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Boolean_construct(xsc, vthis, v)
[[ types(v : Bool, #v : Bool) * (v == #v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#v : Bool, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_318, extensible) * MetaData (_$l__lvar_318, null) * empty_fields(_$l__lvar_318 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_318, "@proto") ->@d $lbool_proto) * ((_$l__lvar_318, "@class") ->@d "Boolean") * ((_$l__lvar_318, "@extensible") ->@d true) * ((_$l__lvar_318, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_318) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Boolean_construct (xsc, vthis, v) {
			pv := "i__toBoolean"(v);
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lbool_proto, "Boolean", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toNumber(v)
[[ types(v : Null) * (v == null) ]]
[[ types(xret : Num) * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == true) ]]
[[ types(xret : Num) * (xret == 1.) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == false) ]]
[[ types(xret : Num) * (xret == 0.) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str, xret : Num) * (xret == (string_to_num #v)) * (v == _lvar_v) ]]
normal

proc i__toNumber (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := nan;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := 0.;
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := 1.;
			goto rlab;
	is_f:		xret := 0.;
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := v;
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := (string_to_num v);
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "Number") with elab;
			xret := "i__toNumber"(xret);
			goto rlab;
	oops:		xret := "TypeError"("ToNumber: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_309, extensible) * MetaData (_$l__lvar_309, null) * empty_fields(_$l__lvar_309 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_309, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_309, "@class") ->@d "Error") * ((_$l__lvar_309, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_309) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc ReferenceError (v) {
			xret := "ReferenceError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_default_object(l, pr, cl, ext)
[[ types(l : Obj, #l : Obj, cl : Undefined, ext : Undefined) * (#l == _$l_l) * (pr == #pr) * (ext == undefined) * (l == _$l_l) * (cl == undefined) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_0) * ((_$l_#md, "@class") ->@d #lvar_1) * ((_$l_#md, "@extensible") ->@d #lvar_2) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, #l : Obj) * (xret == #l) * (pr == _lvar_pr) * (ext == _lvar_ext) * (l == _$l_l) * (cl == _lvar_cl) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@class") ->@d "Object") * ((_$l_#md, "@extensible") ->@d true) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) ]]
normal;

 [[ types(l : Obj, #cl : Str, #l : Obj, #ext : Bool) * (#l == _$l_l) * (pr == #pr) * (ext == #ext) * (l == _$l_l) * (cl == #cl) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_3) * ((_$l_#md, "@class") ->@d #lvar_4) * ((_$l_#md, "@extensible") ->@d #lvar_5) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) ]]
[[ types(l : Obj, #cl : Str, #l : Obj, #ext : Bool) * (xret == #l) * (pr == _lvar_pr) * (ext == _lvar_ext) * (l == _$l_l) * (cl == _lvar_cl) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #pr) * ((_$l_#md, "@class") ->@d #cl) * ((_$l_#md, "@extensible") ->@d #ext) * Extensible (_$l_l, extensible) * MetaData (_$l_l, _$l_#md) ]]
normal

proc create_default_object (l, pr, cl, ext) {
			goto [(cl = undefined)] scl text;
	scl:		cl := "Object";
	text:		goto [(ext = undefined)] sext setall;
	sext:		ext := true;
	setall:		m := metadata (l);
			[m, "@proto"] := pr;
			[m, "@class"] := cl;
			[m, "@extensible"] := ext;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec o__getOwnProperty(l, prop)
[[ types(l : Obj, #prop : Str) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(xret : Undefined, #prop : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_122 : Bool, _lvar_121 : Bool, _lvar_123 : Bool, l : Obj, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_120, _lvar_121, _lvar_122, _lvar_123 }}) * (! (_lvar_120 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_120, _lvar_121, _lvar_122, _lvar_123 }}) ]]
[[ types(_lvar_131 : Bool, _lvar_130 : Bool, _lvar_129 : Bool, #prop : Str, #dx : List) * (#dx == {{ "d", _lvar_128, _lvar_129, _lvar_130, _lvar_131 }}) * (! (_lvar_128 == empty)) * (xret == {{ "d", _lvar_128, _lvar_129, _lvar_130, _lvar_131 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_128, _lvar_129, _lvar_130, _lvar_131 }}) ]]
normal;

 [[ types(_lvar_127 : Bool, l : Obj, _lvar_126 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_125, _lvar_124, _lvar_126, _lvar_127 }}) * (! (_lvar_125 == empty)) * (! (_lvar_124 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_125, _lvar_124, _lvar_126, _lvar_127 }}) ]]
[[ types(_lvar_135 : Bool, _lvar_134 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_133, _lvar_132, _lvar_134, _lvar_135 }}) * (! (_lvar_133 == empty)) * (! (_lvar_132 == empty)) * (xret == {{ "a", _lvar_133, _lvar_132, _lvar_134, _lvar_135 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_133, _lvar_132, _lvar_134, _lvar_135 }}) ]]
normal

proc o__getOwnProperty (l, prop) {
			x := hasField(l,prop);
			goto [x] hp nhp;
	nhp:		xret := undefined;
			goto rlab;
	hp:		xret := [l, prop];
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec deleteProperty(l, prop, throw)
[[ types(l : Obj, #cls : Str, #prop : Str) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Bool, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(l : Obj, #cls : Str, _lvar_702 : Bool, _lvar_701 : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_700, _lvar_701, _lvar_702, true }}) * (! (_lvar_700 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_700, _lvar_701, _lvar_702, true }}) ]]
[[ types(#cls : Str, xret : Bool, #d : List, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_706 : Bool, l : Obj, #cls : Str, #d : List, #prop : Str) * (#d == {{ "a", _lvar_705, _lvar_704, _lvar_706, true }}) * (! (_lvar_705 == empty)) * (! (_lvar_704 == empty)) * (! (#cls == "String")) * (throw == _lvar_throw) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_705, _lvar_704, _lvar_706, true }}) ]]
[[ types(#cls : Str, xret : Bool, #d : List, #prop : Str) * (throw == _lvar_throw) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(_lvar_726 : Bool, l : Obj, #cls : Str, _lvar_725 : Bool, #d : List, throw : Bool, #prop : Str) * (#d == {{ "d", _lvar_724, _lvar_725, _lvar_726, false }}) * (! (_lvar_724 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_724, _lvar_725, _lvar_726, false }}) ]]
[[ types(_lvar_735 : Bool, _lvar_734 : Bool, _lvar_733 : Bool, #cls : Str, xret : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_732, _lvar_733, _lvar_734, _lvar_735 }}) * (! (_lvar_732 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_732, _lvar_733, _lvar_734, _lvar_735 }}) ]]
normal;

 [[ types(l : Obj, #cls : Str, _lvar_730 : Bool, #d : List, throw : Bool, #prop : Str) * (#d == {{ "a", _lvar_729, _lvar_728, _lvar_730, false }}) * (! (_lvar_729 == empty)) * (! (_lvar_728 == empty)) * (! (#cls == "String")) * (throw == false) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_729, _lvar_728, _lvar_730, false }}) ]]
[[ types(_lvar_739 : Bool, _lvar_738 : Bool, #cls : Str, xret : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_737, _lvar_736, _lvar_738, _lvar_739 }}) * (! (_lvar_737 == empty)) * (! (_lvar_736 == empty)) * (throw == _lvar_throw) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_737, _lvar_736, _lvar_738, _lvar_739 }}) ]]
normal;

 [[ types(_lvar_749 : Bool, l : Obj, #cls : Str, #d : List, _lvar_750 : Bool, throw : Bool, #prop : Str) * (#d == {{ "d", _lvar_748, _lvar_749, _lvar_750, false }}) * (! (_lvar_748 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_748, _lvar_749, _lvar_750, false }}) ]]
[[ types(#cls : Str, _lvar_760 : Bool, _lvar_758 : Bool, xret : Obj, #d : List, #prop : Str, _lvar_759 : Bool) * (#d == {{ "d", _lvar_757, _lvar_758, _lvar_759, _lvar_760 }}) * (! (_lvar_757 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_757, _lvar_758, _lvar_759, _lvar_760 }}) * Extensible (_$l__lvar_756, extensible) * MetaData (_$l__lvar_756, null) * empty_fields(_$l__lvar_756 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_756, "@proto") ->@d $lterr_proto) * ((_$l__lvar_756, "@class") ->@d "Error") * ((_$l__lvar_756, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_756) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(l : Obj, #cls : Str, _lvar_754 : Bool, #d : List, throw : Bool, #prop : Str) * (#d == {{ "a", _lvar_753, _lvar_752, _lvar_754, false }}) * (! (_lvar_753 == empty)) * (! (_lvar_752 == empty)) * (! (#cls == "String")) * (throw == true) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_753, _lvar_752, _lvar_754, false }}) ]]
[[ types(#cls : Str, _lvar_764 : Bool, xret : Obj, _lvar_763 : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_762, _lvar_761, _lvar_763, _lvar_764 }}) * (! (_lvar_762 == empty)) * (! (_lvar_761 == empty)) * (throw == _lvar_throw) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_762, _lvar_761, _lvar_763, _lvar_764 }}) * Extensible (_$l__lvar_756, extensible) * MetaData (_$l__lvar_756, null) * empty_fields(_$l__lvar_756 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_756, "@proto") ->@d $lterr_proto) * ((_$l__lvar_756, "@class") ->@d "Error") * ((_$l__lvar_756, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_756) * empty_fields(_$l_xret : -{  }-) ]]
error

proc deleteProperty (l, prop, throw) {
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] dt cont;
	cont:		c := l-nth(xret, 4.);
			goto [c] del reject;
	del:		delete(l,prop);
	dt:		xret := true;
			goto rlab;
	df:		xret := false;
	rlab:		skip;
	reject:		goto [throw] tt df;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec getOwnProperty(l, prop)
[[ types(l : Obj, #cls : Str, #prop : Str) * (! (#cls == "String")) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
[[ types(#cls : Str, xret : Undefined, #prop : Str) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d none) ]]
normal;

 [[ types(l : Obj, _lvar_660 : Bool, #prop : Str, #dx : List, _lvar_662 : Bool, _lvar_661 : Bool) * (#dx == {{ "d", _lvar_659, _lvar_660, _lvar_661, _lvar_662 }}) * (! (_lvar_659 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_659, _lvar_660, _lvar_661, _lvar_662 }}) ]]
[[ types(_lvar_668 : Bool, _lvar_669 : Bool, #prop : Str, #dx : List, _lvar_670 : Bool) * (#dx == {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) * (! (_lvar_667 == empty)) * (xret == {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "d", _lvar_667, _lvar_668, _lvar_669, _lvar_670 }}) ]]
normal;

 [[ types(l : Obj, _lvar_666 : Bool, _lvar_665 : Bool, #prop : Str, #dx : List) * (#dx == {{ "a", _lvar_664, _lvar_663, _lvar_665, _lvar_666 }}) * (! (_lvar_664 == empty)) * (! (_lvar_663 == empty)) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_664, _lvar_663, _lvar_665, _lvar_666 }}) ]]
[[ types(_lvar_674 : Bool, #prop : Str, #dx : List, _lvar_673 : Bool) * (#dx == {{ "a", _lvar_672, _lvar_671, _lvar_673, _lvar_674 }}) * (! (_lvar_672 == empty)) * (! (_lvar_671 == empty)) * (xret == {{ "a", _lvar_672, _lvar_671, _lvar_673, _lvar_674 }}) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@class") ->@d #cls) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, #prop) ->@d {{ "a", _lvar_672, _lvar_671, _lvar_673, _lvar_674 }}) ]]
normal

proc getOwnProperty (l, prop) {
			m := metadata (l);
			class := [m, "@class"];
			goto [(class = "String")] sgop ogop;
	sgop:		xret := "s__getOwnProperty"(l, prop) with elab;
			goto rlab;
	ogop:		xret := "o__getOwnProperty"(l, prop) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toString(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Str) * (xret == "undefined") * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Str) * (xret == "null") * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == true) ]]
[[ types(xret : Str) * (xret == "true") * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool) * (v == false) ]]
[[ types(xret : Str) * (xret == "false") * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num, xret : Str) * (xret == (num_to_string #v)) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str, xret : Str) * (xret == #v) * (v == _lvar_v) ]]
normal

proc i__toString (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := "undefined";
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := "null";
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		goto [(v = true)] is_t is_f;
	is_t:		xret := "true";
			goto rlab;
	is_f:		xret := "false";
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := (num_to_string v);
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := v;
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := "i__toPrimitive"(v, "String") with elab;
			xret := "i__toString"(xret) with elab;
			goto rlab;
	oops:		xret := "TypeError"("ToString: This should not happen.");
			goto elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkAssignmentErrors(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num, _lvar_310 : Num) * (v == _lvar_310) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool, _lvar_311 : Bool) * (v == _lvar_311) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_312 : Str) * (v == _lvar_312) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_313 : Obj) * (v == _lvar_313) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : List, #l : Obj, #prop : Str) * (#v == {{ "v", #l, #prop }}) * (! (#prop == "eval")) * (! (#prop == "arguments")) * (v == {{ "v", #l, #prop }}) ]]
[[ types(#v : List, #l : Obj, xret : Bool, #prop : Str) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : List, #l : Obj) * (#v == {{ "v", #l, "eval" }}) * (v == {{ "v", #l, "eval" }}) ]]
[[ types(#v : List, #l : Obj, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_314) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_314, extensible) * MetaData (_$l__lvar_314, null) * empty_fields(_$l__lvar_314 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_314, "@proto") ->@d $lserr_proto) * ((_$l__lvar_314, "@class") ->@d "Error") * ((_$l__lvar_314, "@extensible") ->@d true) ]]
error;

 [[ types(#v : List, #l : Obj) * (#v == {{ "v", #l, "arguments" }}) * (v == {{ "v", #l, "arguments" }}) ]]
[[ types(#v : List, #l : Obj, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_315, extensible) * MetaData (_$l__lvar_315, null) * empty_fields(_$l__lvar_315 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_315, "@proto") ->@d $lserr_proto) * ((_$l__lvar_315, "@class") ->@d "Error") * ((_$l__lvar_315, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_315) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(#field : Str, #v : List, #base : Obj) * (#v == {{ "o", #base, #field }}) * (v == {{ "o", #base, #field }}) ]]
[[ types(#field : Str, #v : List, #base : Obj, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__checkAssignmentErrors (v) {
			tv := typeOf(v);
			goto [((tv = List) and ((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o")))] prep rlab;
	prep:		fv := l-nth(v, 2.);
	csyn:		goto [((l-nth(v, 0.) = "v") and ((fv = "eval") or (fv = "arguments")))] se rlab;
	rlab:		xret := true;
	se:		xret := "SyntaxError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec put(l, prop, value, throw)
[[ Pi(_$l_#l, #prop, undefined, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#ccls :: #llcls)), ("" :: (#pv :: #llpv))) * types(#lllp : List, #lp : Obj, #pv : Str, l : Obj, #cls : Str, #throw : Bool, #ccls : Str, #llcls : List, #llpv : List, #prop : Str) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#ccls :: #llcls), (#pv :: #llpv)) * types(#lllp : List, #lp : Obj, #pv : Str, #cls : Str, #throw : Bool, #ccls : Str, xret : Empty, #llcls : List, #llpv : List, #prop : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#denum : Bool, l : Obj, #cls : Str, #throw : Bool, #ext : Bool, #dconf : Bool, #prop : Str, #lpv : List) * (! (#value == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, #lpv) * types(#denum : Bool, #cls : Str, #throw : Bool, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, l : Obj, #cls : Str, #throw : Bool, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#value == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #throw : Bool, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(l : Obj, #cls : Str, #throw : Bool, #prop : Str) * (! (#value == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (throw == #throw) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #value, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#cls : Str, #throw : Bool, xret : Empty, #prop : Str) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == empty) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, l : Obj, #ls : List, throw : Bool, #prop : Str, #lpv : List) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_291, extensible) * MetaData (_$l__lvar_291, null) * empty_fields(_$l__lvar_291 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_291, "@proto") ->@d $lterr_proto) * ((_$l__lvar_291, "@class") ->@d "Error") * ((_$l__lvar_291, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_291) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_292, false, _lvar_294, _lvar_295 }}, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, _lvar_295 : Bool, l : Obj, #ext : Bool, _lvar_294 : Bool, #d : List, throw : Bool, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_292, false, _lvar_294, _lvar_295 }}) * (! (_lvar_292 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, #ext : Bool, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d #ext) * Extensible (_$l__lvar_296, extensible) * MetaData (_$l__lvar_296, null) * empty_fields(_$l__lvar_296 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_296, "@proto") ->@d $lterr_proto) * ((_$l__lvar_296, "@class") ->@d "Error") * ((_$l__lvar_296, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_296) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_299, _lvar_300, _lvar_301, _lvar_302 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(_lvar_300 : Bool, _lvar_302 : Bool, #lcls : List, _lvar_301 : Bool, #lp : Obj, l : Obj, #other : List, #ls : List, #d : List, throw : Bool, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_299, _lvar_300, _lvar_301, _lvar_302 }}) * (! (_lvar_299 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_303) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_303, extensible) * MetaData (_$l__lvar_303, null) * empty_fields(_$l__lvar_303 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_303, "@proto") ->@d $lterr_proto) * ((_$l__lvar_303, "@class") ->@d "Error") * ((_$l__lvar_303, "@extensible") ->@d true) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_304, false, _lvar_306, _lvar_307 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(_lvar_306 : Bool, _lvar_307 : Bool, #lcls : List, #lp : Obj, l : Obj, #other : List, #ls : List, #d : List, throw : Bool, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_304, false, _lvar_306, _lvar_307 }}) * (! (_lvar_304 == empty)) * (throw == true) * (value == #value) * (prop == #prop) * (l == _$l_#l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (throw == _lvar_throw) * (value == _lvar_value) * (xret == _$l_xret) * (prop == _lvar_prop) * (l == _lvar_l) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_308) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_308, extensible) * MetaData (_$l__lvar_308, null) * empty_fields(_$l__lvar_308 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_308, "@proto") ->@d $lterr_proto) * ((_$l__lvar_308, "@class") ->@d "Error") * ((_$l__lvar_308, "@extensible") ->@d true) ]]
error

proc put (l, prop, value, throw) {
			xret := "canPut"(l, prop) with elab;
			goto [xret] cp reject;
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	cp:		xret := "getOwnProperty"(l, prop) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] dd gp;
	dd:		desc := {{ "g", empty, empty, value, empty, empty, empty }};
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, #denum, #dconf }}, {{ #l }}, #lvar_19, #lvar_20) *]
			goto remp;
			[* fold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
	gp:		xret := "getProperty"(l, prop) with elab;
			ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad def;
	ad:		s := l-nth(xret, 2.);
			xsc := [s, "@scope"];
			fun := [s, "@call"];
			xret := fun(xsc, l, value) with elab;
			goto remp;
	def:		desc := {{ "d", value, true, true, true }};
			[* unfold Pi(#l, #prop, #d, #ls, #lcls, #lpv) *]
			xret := "defineOwnProperty"(l, prop, desc, throw) with elab;
			[* fold Pi(#l, #prop, {{ "d", #value, true, true, true }}, {{ #l }}, #lvar_21, #lvar_22) *]
			skip;
	remp:		xret := empty;
	rlab:		skip;
	reject:		xret := empty;
			goto [throw] tt rlab;
	tt:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__putValue(v, w)
[[ types(v : Undefined) * (v == undefined) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_178, extensible) * MetaData (_$l__lvar_178, null) * empty_fields(_$l__lvar_178 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_178, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_178, "@class") ->@d "Error") * ((_$l__lvar_178, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_178) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(v : Null) * (v == null) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_179, extensible) * MetaData (_$l__lvar_179, null) * empty_fields(_$l__lvar_179 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_179, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_179, "@class") ->@d "Error") * ((_$l__lvar_179, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_179) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(v : Num, _lvar_181 : Num) * (v == _lvar_181) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_180) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_180, extensible) * MetaData (_$l__lvar_180, null) * empty_fields(_$l__lvar_180 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_180, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_180, "@class") ->@d "Error") * ((_$l__lvar_180, "@extensible") ->@d true) ]]
error;

 [[ types(v : Bool, _lvar_183 : Bool) * (v == _lvar_183) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_182, extensible) * MetaData (_$l__lvar_182, null) * empty_fields(_$l__lvar_182 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_182, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_182, "@class") ->@d "Error") * ((_$l__lvar_182, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_182) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(_lvar_185 : Str, v : Str) * (v == _lvar_185) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_184, extensible) * MetaData (_$l__lvar_184, null) * empty_fields(_$l__lvar_184 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_184, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_184, "@class") ->@d "Error") * ((_$l__lvar_184, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_184) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ types(v : Obj, _lvar_187 : Obj) * (v == _lvar_187) * (w == _lvar_w) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_186) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_186, extensible) * MetaData (_$l__lvar_186, null) * empty_fields(_$l__lvar_186 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_186, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_186, "@class") ->@d "Error") * ((_$l__lvar_186, "@extensible") ->@d true) ]]
error;

 [[ types(v : List) * (! (#w == empty)) * (v == {{ "v", _$l_#obj, #field }}) * (w == #w) * ((_$l_#obj, #field) ->@d #lvar_23) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#obj, #field) ->@d #w) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, undefined, ($lg :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, undefined, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, v : List, #cls : Str, #ext : Bool, #dconf : Bool, #prop : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, #cls : Str, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dval, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, v : List, #cls : Str, #ext : Bool, #dconf : Bool, #prop : Str) * (! (#w == empty)) * (! (#dval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, #denum, #dconf }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * types(#denum : Bool, #cls : Str, #ext : Bool, xret : Empty, #dconf : Bool, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (_$l_#l :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi($lg, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, ($lg :: (#lp :: #lllp)), (#cls :: (#pcls :: #ocls)), ("" :: (#pv :: #llpv))) * types(#ocls : List, v : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (! (#w == empty)) * (! (#dcval == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, {{ "d", #w, true, true, true }}, {{ $lg }}, {{ #cls }}, {{ "" }}) * Pi(#lp, #prop, {{ "d", #dcval, true, #dcenum, #dcconf }}, (#lp :: #lllp), (#pcls :: #ocls), (#pv :: #llpv)) * types(#ocls : List, #lllp : List, #dcenum : Bool, #lp : Obj, #pv : Str, #cls : Str, xret : Empty, #dcconf : Bool, #llpv : List, #prop : Str, #pcls : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d #lp) * ((_$l_#md, "@extensible") ->@d true) * MetaData ($lg, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(v : List, #cls : Str, #prop : Str) * (! (#w == empty)) * (! (#cls == "String")) * (! (#cls == "Array")) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, {{ "d", #w, true, true, true }}, {{ _$l_#l }}, {{ #cls }}, {{ "" }}) * types(#cls : Str, xret : Empty, #prop : Str) * (xret == empty) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@proto") ->@d null) * ((_$l_#md, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) ]]
normal;

 [[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, v : List, #ls : List, #prop : Str, #lpv : List) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * Extensible (_$l__lvar_241, extensible) * MetaData (_$l__lvar_241, null) * empty_fields(_$l__lvar_241 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_241, "@proto") ->@d $lterr_proto) * ((_$l__lvar_241, "@class") ->@d "Error") * ((_$l__lvar_241, "@extensible") ->@d true) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_241) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_242, false, _lvar_244, _lvar_245 }}, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, v : List, _lvar_245 : Bool, _lvar_244 : Bool, #ext : Bool, #d : List, #prop : Str, #lpv : List) * (#d == {{ "d", _lvar_242, false, _lvar_244, _lvar_245 }}) * (! (_lvar_242 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, {{ _$l_#l }}, #lcls, #lpv) * types(#lcls : List, #ext : Bool, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * Extensible (_$l__lvar_246, extensible) * MetaData (_$l__lvar_246, null) * empty_fields(_$l__lvar_246 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_246, "@proto") ->@d $lterr_proto) * ((_$l__lvar_246, "@class") ->@d "Error") * ((_$l__lvar_246, "@extensible") ->@d true) * ((_$l_#md, "@extensible") ->@d #ext) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_246) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_249, _lvar_250, _lvar_251, _lvar_252 }}, (_$l_#l :: (#lp :: #other)), #cls, #lpv) * types(_lvar_250 : Bool, _lvar_251 : Bool, v : List, _lvar_252 : Bool, #lp : Obj, #other : List, #ls : List, #cls : List, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_249, _lvar_250, _lvar_251, _lvar_252 }}) * (! (_lvar_249 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #cls, #lpv) * types(#lp : Obj, #other : List, #ls : List, #cls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_253) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_253, extensible) * MetaData (_$l__lvar_253, null) * empty_fields(_$l__lvar_253 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_253, "@proto") ->@d $lterr_proto) * ((_$l__lvar_253, "@class") ->@d "Error") * ((_$l__lvar_253, "@extensible") ->@d true) ]]
error;

 [[ Pi(_$l_#l, #prop, {{ "d", _lvar_254, false, _lvar_256, _lvar_257 }}, (_$l_#l :: (#lp :: #other)), #lcls, #lpv) * types(#lcls : List, v : List, #lp : Obj, _lvar_256 : Bool, _lvar_257 : Bool, #other : List, #ls : List, #d : List, #prop : Str, #lpv : List) * (#ls == (_$l_#l :: (#lp :: #other))) * (#d == {{ "d", _lvar_254, false, _lvar_256, _lvar_257 }}) * (! (_lvar_254 == empty)) * (v == {{ "o", _$l_#l, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) ]]
[[ Pi(_$l_#l, #prop, #d, #ls, #lcls, #lpv) * types(#lcls : List, #lp : Obj, #other : List, #ls : List, xret : Obj, #d : List, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData (_$l_#l, _$l_#md) * Extensible (_$l__lvar_258, extensible) * MetaData (_$l__lvar_258, null) * empty_fields(_$l__lvar_258 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_258, "@proto") ->@d $lterr_proto) * ((_$l__lvar_258, "@class") ->@d "Error") * ((_$l__lvar_258, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_258) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, v : List, #ls : List, #prop : Str, #lpv : List) * (v == {{ "v", $lg, #prop }}) * (w == #w) * ((_$l_#md, "@extensible") ->@d false) * MetaData ($lg, _$l_#md) ]]
[[ Pi($lg, #prop, undefined, #ls, #lcls, #lpv) * types(#lcls : List, #ls : List, xret : Obj, #prop : Str, #lpv : List) * (xret == _$l_xret) * (v == _lvar_v) * (w == _lvar_w) * ((_$l_#md, "@extensible") ->@d false) * MetaData ($lg, _$l_#md) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_259) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_259, extensible) * MetaData (_$l__lvar_259, null) * empty_fields(_$l__lvar_259 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_259, "@proto") ->@d $lterr_proto) * ((_$l__lvar_259, "@class") ->@d "Error") * ((_$l__lvar_259, "@extensible") ->@d true) ]]
error

proc i__putValue (v, w) {
			goto [((typeOf(v) = List) and ((l-nth(v, 0.) = "v") or (l-nth(v, 0.) = "o")))] init throw;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr refr;
	refr:		goto [((typeOf(v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "put"(rbase, rfield, w, true) with elab;
			goto dflt;
	er:		[rbase, rfield] := w;
	dflt:		xret := empty;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	elab:		skip;
	is_pr:		xret := "i__toObject"(rbase) with elab;
			l := xret;
			xret := "canPut"(l, rfield) with elab;
			goto [xret] cp reject;
	cp:		xret := "getProperty"(l, rfield) with elab;
			dd := "i__isDataDescriptor"(xret);
			goto [dd] reject is_ad;
	is_ad:		ad := "i__isAccessorDescriptor"(xret);
			goto [ad] ad reject;
	ad:		s := l-nth(xret, 2.);
			m := metadata (s);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase, w) with elab;
			goto dflt;
	reject:		xret := "TypeError"();
			goto elab
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec hasProperty(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #prop : Str) * (xret == false) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_160, _lvar_161, _lvar_162, _lvar_163 }}, #ls, #cls, #pv) * types(_lvar_162 : Bool, _lvar_163 : Bool, #pv : List, #ls : List, #cls : List, #l : Obj, #d : List, #prop : Str, _lvar_161 : Bool) * (#d == {{ "d", _lvar_160, _lvar_161, _lvar_162, _lvar_163 }}) * (! (_lvar_160 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #d : List, #prop : Str) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "a", _lvar_165, _lvar_164, _lvar_166, _lvar_167 }}, #ls, #cls, #pv) * types(#pv : List, _lvar_166 : Bool, #ls : List, #cls : List, #l : Obj, _lvar_167 : Bool, #d : List, #prop : Str) * (#d == {{ "a", _lvar_165, _lvar_164, _lvar_166, _lvar_167 }}) * (! (_lvar_165 == empty)) * (! (_lvar_164 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Bool, #d : List, #prop : Str) * (xret == true) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc hasProperty (l, prop) {
			xret := "getProperty"(l, prop) with elab;
	rlab:		xret := (not (xret = undefined));
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec create_object_with_call_construct(l, call, construct, len)
[[ types(construct : Empty, #len : Num, l : Obj, #call : Str) * (l == _$l_#l) * (construct == empty) * (len == #len) * (call == #call) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_7) * ((_$l_#md, "@class") ->@d #lvar_8) * ((_$l_#md, "@extensible") ->@d #lvar_9) * ((_$l_#md, "@scope") ->@d #lvar_10) * ((_$l_#md, "@call") ->@d #lvar_11) * Extensible (_$l_#l, extensible) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_6) ]]
[[ types(#len : Num, xret : Obj, #call : Str) * (xret == _$l_#l) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * (call == _lvar_call) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@call") ->@d #call) * Extensible (_$l_#l, extensible) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal;

 [[ types(#construct : Str, #len : Num, l : Obj, #call : Str) * (l == _$l_#l) * (construct == #construct) * (len == #len) * (call == #call) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d #lvar_13) * ((_$l_#md, "@class") ->@d #lvar_14) * ((_$l_#md, "@extensible") ->@d #lvar_15) * ((_$l_#md, "@scope") ->@d #lvar_16) * ((_$l_#md, "@call") ->@d #lvar_17) * ((_$l_#md, "@construct") ->@d #lvar_18) * Extensible (_$l_#l, extensible) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d #lvar_12) ]]
[[ types(#construct : Str, #len : Num, xret : Obj, #call : Str) * (xret == _$l_#l) * (l == _lvar_l) * (construct == _lvar_construct) * (len == _lvar_len) * (call == _lvar_call) * Extensible (_$l_#md, extensible) * MetaData (_$l_#md, null) * ((_$l_#md, "@proto") ->@d $lfun_proto) * ((_$l_#md, "@class") ->@d "Function") * ((_$l_#md, "@extensible") ->@d true) * ((_$l_#md, "@scope") ->@d empty) * ((_$l_#md, "@call") ->@d #call) * ((_$l_#md, "@construct") ->@d #construct) * Extensible (_$l_#l, extensible) * MetaData (_$l_#l, _$l_#md) * ((_$l_#l, "length") ->@d {{ "d", #len, false, false, false }}) ]]
normal

proc create_object_with_call_construct (l, call, construct, len) {
			xret := "create_default_object"(l, $lfun_proto, "Function", true);
			[xret, "length"] := {{ "d", len, false, false, false }};
			m := metadata (xret);
			[m, "@scope"] := empty;
			[m, "@call"] := call;
			goto [(construct = empty)] rlab cstr;
	cstr:		[m, "@construct"] := construct;
	rlab:		xret := l
} with {
	ret: xret, rlab;
};


spec i__isPrimitive(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num, _lvar_77 : Num) * (v == _lvar_77) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool, _lvar_78 : Bool) * (v == _lvar_78) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_79 : Str) * (v == _lvar_79) ]]
[[ types(xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_80 : Obj) * (v == _lvar_80) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal

proc i__isPrimitive (v) {
			tv := typeOf(v);
	iu:		goto [((v = undefined) or ((v = null) or ((typeOf(v) = Bool) or ((typeOf(v) = Num) or (typeOf(v) = Str)))))] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec Object_construct(xsc, vthis, l)
[[ types(#l : Undefined) * (#l == undefined) * (l == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#l : Undefined, xret : Obj) * (#l == undefined) * (xret == _$l_xret) * (l == _lvar_l) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_76, extensible) * MetaData (_$l__lvar_76, null) * empty_fields(_$l__lvar_76 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_76, "@proto") ->@d $lobj_proto) * ((_$l__lvar_76, "@class") ->@d "Object") * ((_$l__lvar_76, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_76) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Object_construct (xsc, vthis, l) {
			goto [(typeOf(l) = Obj)] obj l1b;
	obj:		xret := l;
			goto rlab;
	l1b:		goto [((typeOf(l) = Bool) or ((typeOf(l) = Num) or (typeOf(l) = Str)))] to_obj norm;
	to_obj:		xret := "i__toObject"(l);
			goto rlab;
	norm:		xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lobj_proto, "Object", true);
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__sameValue(v1, v2)
[[ types(v2 : Num, v1 : Num) * (v2 == 0.) * (v1 == 0.) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == -0.) * (v1 == -0.) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == 0.) * (v1 == -0.) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types(v2 : Num, v1 : Num) * (v2 == -0.) * (v1 == 0.) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (v2 == _lvar_610) * (v1 == _lvar_610) ]]
[[ types(xret : Bool) * (xret == true) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal;

 [[ types() * (! (_lvar_v1 == _lvar_v2)) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
[[ types(xret : Bool) * (xret == false) * (v2 == _lvar_v2) * (v1 == _lvar_v1) ]]
normal

proc i__sameValue (v1, v2) {
			goto [(typeOf(v1) = Num)] test2 nonum;
	test2:		goto [(typeOf(v2) = Num)] inan1 nonum;
	inan1:		goto [(not (v1 = v1))] inan2 zero1;
	inan2:		goto [(not (v2 = v2))] rt zero1;
	zero1:		goto [(v1 = 0.)] zero2 nonum;
	zero2:		goto [(v2 = 0.)] fix nonum;
	fix:		sv1 := (m_sgn v1);
			sv2 := (m_sgn v2);
			goto [(sv1 = sv2)] rt rf;
			goto rlab;
	nonum:		goto [(v1 = v2)] rt rf;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec i__toObject(v)
[[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_608, extensible) * MetaData (_$l__lvar_608, null) * empty_fields(_$l__lvar_608 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_608, "@proto") ->@d $lbool_proto) * ((_$l__lvar_608, "@class") ->@d "Boolean") * ((_$l__lvar_608, "@extensible") ->@d true) * ((_$l__lvar_608, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_608) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_609, extensible) * MetaData (_$l__lvar_609, null) * empty_fields(_$l__lvar_609 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_609, "@proto") ->@d $lnum_proto) * ((_$l__lvar_609, "@class") ->@d "Number") * ((_$l__lvar_609, "@extensible") ->@d true) * ((_$l__lvar_609, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_609) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc i__toObject (v) {
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw ib;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		xret := "Boolean_construct"(undefined, undefined, v);
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		xret := "Number_construct"(undefined, undefined, v);
			goto rlab;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		xret := "String_construct"(undefined, undefined, v);
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := v;
			goto rlab;
	oops:		xret := "ToObject: This should not happen.";
	rlab:		skip;
	throw:		xret := "Here!";
			xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__toBoolean(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(v : Num) * (v == 0.) ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (! (#v == 0.)) * (v == #v) ]]
[[ types(#v : Num, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str) * (v == "") ]]
[[ types(xret : Bool) * (xret == false) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (! (#v == "")) * (v == #v) ]]
[[ types(#v : Str, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj, xret : Bool) * (xret == true) * (v == _lvar_v) ]]
normal

proc i__toBoolean (v) {
	iu:		goto [(v = undefined)] undef in;
	undef:		xret := false;
			goto rlab;
	in:		goto [(v = null)] nul ib;
	nul:		xret := false;
			goto rlab;
	ib:		goto [(typeOf(v) = Bool)] bool inum;
	bool:		xret := v;
			goto rlab;
	inum:		goto [(typeOf(v) = Num)] num is;
	num:		goto [((v = 0.) or (not (v = v)))] is_f is_t;
	is:		goto [(typeOf(v) = Str)] str io;
	str:		goto [(v = "")] is_f is_t;
			goto rlab;
	io:		goto [(typeOf(v) = Obj)] obj oops;
	obj:		xret := true;
			goto rlab;
	is_t:		xret := true;
			goto rlab;
	is_f:		xret := false;
			goto rlab;
	oops:		xret := "ToBoolean: This should not happen.";
	rlab:		skip
} with {
	ret: xret, rlab;
};


spec getProperty(l, prop)
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #prop : Str) * (xret == #d) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc getProperty (l, prop) {
			[* unfold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
			xret := "getOwnProperty"(l, prop) with elab;
			goto [(xret = undefined)] next rlab;
	next:		m := metadata (l);
			proto := [m, "@proto"];
			goto [(proto = null)] rlab call;
	call:		xret := "getProperty"(proto, prop) with elab;
			[* fold Pi(#l, #prop, #d, #ls, #cls, #pv) *]
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec Number_construct(xsc, vthis, v)
[[ types(v : Num, #v : Num) * (v == #v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(#v : Num, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_316, extensible) * MetaData (_$l__lvar_316, null) * empty_fields(_$l__lvar_316 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_316, "@proto") ->@d $lnum_proto) * ((_$l__lvar_316, "@class") ->@d "Number") * ((_$l__lvar_316, "@extensible") ->@d true) * ((_$l__lvar_316, "@primitiveValue") ->@d #v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_316) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc Number_construct (xsc, vthis, v) {
	init:		pv := "i__toNumber"(v) with elab;
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lnum_proto, "Number", true);
			m := metadata (xret);
			[m, "@primitiveValue"] := pv;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: pv, elab;
};


spec get(l, prop)
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #d : Undefined, #prop : Str) * (#d == undefined) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, undefined, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, xret : Undefined, #d : Undefined, #prop : Str) * (#d == undefined) * (xret == undefined) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal;

 [[ Pi(#l, #prop, {{ "d", _lvar_174, _lvar_175, _lvar_176, _lvar_177 }}, #ls, #cls, #pv) * types(_lvar_175 : Bool, #pv : List, #ls : List, #cls : List, #l : Obj, _lvar_177 : Bool, _lvar_176 : Bool, #d : List, #prop : Str) * (#d == {{ "d", _lvar_174, _lvar_175, _lvar_176, _lvar_177 }}) * (! (_lvar_174 == empty)) * (prop == #prop) * (l == #l) ]]
[[ Pi(#l, #prop, #d, #ls, #cls, #pv) * types(#pv : List, #ls : List, #cls : List, #l : Obj, #d : List, #prop : Str) * (xret == l-nth(#d, 1.)) * (prop == _lvar_prop) * (l == _lvar_l) ]]
normal

proc get (l, prop) {
			xret := "getProperty"(l, prop) with elab;
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, l) with elab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__checkObjectCoercible(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_168, extensible) * MetaData (_$l__lvar_168, null) * empty_fields(_$l__lvar_168 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_168, "@proto") ->@d $lterr_proto) * ((_$l__lvar_168, "@class") ->@d "Error") * ((_$l__lvar_168, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_168) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_169, extensible) * MetaData (_$l__lvar_169, null) * empty_fields(_$l__lvar_169 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_169, "@proto") ->@d $lterr_proto) * ((_$l__lvar_169, "@class") ->@d "Error") * ((_$l__lvar_169, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_169) * empty_fields(_$l_xret : -{  }-) ]]
normal;

 [[ types(v : Num, _lvar_170 : Num) * (v == _lvar_170) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(v : Bool, _lvar_171 : Bool) * (v == _lvar_171) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(v : Str, _lvar_172 : Str) * (v == _lvar_172) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal;

 [[ types(v : Obj, _lvar_173 : Obj) * (v == _lvar_173) ]]
[[ types(xret : Empty) * (xret == empty) * (v == _lvar_v) ]]
normal

proc i__checkObjectCoercible (v) {
			xret := empty;
	iu:		goto [(v = undefined)] throw in;
	in:		goto [(v = null)] throw other;
	other:		goto [((typeOf(v) = Bool) or ((typeOf(v) = Num) or ((typeOf(v) = Str) or (typeOf(v) = Obj))))] rlab oops;
	oops:		xret := "CheckObjectCoercible: This should not happen.";
	rlab:		skip;
	throw:		xret := "TypeError"();
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_159) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_159, extensible) * MetaData (_$l__lvar_159, null) * empty_fields(_$l__lvar_159 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_159, "@proto") ->@d $lserr_proto) * ((_$l__lvar_159, "@class") ->@d "Error") * ((_$l__lvar_159, "@extensible") ->@d true) ]]
normal

proc SyntaxError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lserr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec i__getValue(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ types(v : Null) * (v == null) ]]
[[ types(xret : Null) * (xret == null) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Obj) * (v == #v) ]]
[[ types(#v : Obj) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Num) * (v == #v) ]]
[[ types(#v : Num) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Bool) * (v == #v) ]]
[[ types(#v : Bool) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ types(#v : Str) * (v == #v) ]]
[[ types(#v : Str) * (xret == #v) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, v : List, #lcls : List, #obj : Obj, #ls : List, #d : Undefined, #lpv : List) * (#d == undefined) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #obj : Obj, #ls : List, xret : Undefined, #d : Undefined, #lpv : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi(#obj, #field, {{ "d", _lvar_137, _lvar_138, _lvar_139, _lvar_140 }}, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, v : List, #obj : Obj, _lvar_140 : Bool, #ls : List, _lvar_138 : Bool, _lvar_139 : Bool, #d : List, #lpv : List) * (#d == {{ "d", _lvar_137, _lvar_138, _lvar_139, _lvar_140 }}) * (! (_lvar_137 == empty)) * (v == {{ "o", #obj, #field }}) ]]
[[ Pi(#obj, #field, #d, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #obj : Obj, #ls : List, #d : List, #lpv : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, v : List, #lcls : List, #ls : List, #d : Undefined, #lpv : List) * (#d == undefined) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, undefined, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #ls : List, xret : Undefined, #d : Undefined, #lpv : List) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) ]]
normal;

 [[ Pi($lg, #field, {{ "d", _lvar_141, _lvar_142, _lvar_143, _lvar_144 }}, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, v : List, #ls : List, _lvar_143 : Bool, _lvar_144 : Bool, #d : List, #lpv : List, _lvar_142 : Bool) * (#d == {{ "d", _lvar_141, _lvar_142, _lvar_143, _lvar_144 }}) * (! (_lvar_141 == empty)) * (v == {{ "v", $lg, #field }}) ]]
[[ Pi($lg, #field, #d, #ls, #lcls, #lpv) * types(#field : Str, #lcls : List, #ls : List, #d : List, #lpv : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) ]]
normal;

 [[ types(v : List) * (v == {{ "v", _$l_#obj, #field }}) * ((_$l_#obj, #field) ->@d #value) ]]
[[ types() * (xret == #value) * (v == _lvar_v) * ((_$l_#obj, #field) ->@d #value) ]]
normal;

 [[ types(#field : Str, v : List) * (v == {{ "v", undefined, #field }}) ]]
[[ types(#field : Str, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_145) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_145, extensible) * MetaData (_$l__lvar_145, null) * empty_fields(_$l__lvar_145 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_145, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_145, "@class") ->@d "Error") * ((_$l__lvar_145, "@extensible") ->@d true) ]]
error;

 [[ types(#field : Str, v : List) * (v == {{ "o", undefined, #field }}) ]]
[[ types(#field : Str, xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l__lvar_146, extensible) * MetaData (_$l__lvar_146, null) * empty_fields(_$l__lvar_146 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_146, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_146, "@class") ->@d "Error") * ((_$l__lvar_146, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_146) * empty_fields(_$l_xret : -{  }-) ]]
error;

 [[ Pi($lbool_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, v : List, #plcls : List, #d : Undefined) * (#d == undefined) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, xobj : Obj, #plcls : List, xret : Undefined, #d : Undefined) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l__lvar_147, extensible) * MetaData (_$l__lvar_147, null) * empty_fields(_$l__lvar_147 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_147, "@proto") ->@d $lbool_proto) * ((_$l__lvar_147, "@class") ->@d "Boolean") * ((_$l__lvar_147, "@extensible") ->@d true) * ((_$l__lvar_147, "@primitiveValue") ->@d #b) * Extensible (_$l_#o, extensible) * MetaData (_$l_#o, _$l__lvar_147) * empty_fields(_$l_#o : -{  }-) ]]
normal;

 [[ Pi($lbool_proto, #field, {{ "d", _lvar_148, _lvar_149, _lvar_150, _lvar_151 }}, #pls, #plcls, #plpv) * types(#pls : List, #field : Str, #b : Bool, #plpv : List, v : List, _lvar_150 : Bool, #plcls : List, _lvar_151 : Bool, _lvar_149 : Bool, #d : List) * (#d == {{ "d", _lvar_148, _lvar_149, _lvar_150, _lvar_151 }}) * (! (_lvar_148 == empty)) * (v == {{ "o", #b, #field }}) ]]
[[ Pi($lbool_proto, #field, #d, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #b : Bool, #plpv : List, xobj : Obj, #plcls : List, #d : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, extensible) * MetaData (_$l_#o, _$l__lvar_152) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_152, extensible) * MetaData (_$l__lvar_152, null) * empty_fields(_$l__lvar_152 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_152, "@proto") ->@d $lbool_proto) * ((_$l__lvar_152, "@class") ->@d "Boolean") * ((_$l__lvar_152, "@extensible") ->@d true) * ((_$l__lvar_152, "@primitiveValue") ->@d #b) ]]
normal;

 [[ Pi($lnum_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, v : List, #n : Num, #plcls : List, #d : Undefined) * (#d == undefined) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, undefined, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, xobj : Obj, #n : Num, #plcls : List, xret : Undefined, #d : Undefined) * (#d == undefined) * (xret == undefined) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, extensible) * MetaData (_$l_#o, _$l__lvar_153) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_153, extensible) * MetaData (_$l__lvar_153, null) * empty_fields(_$l__lvar_153 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_153, "@proto") ->@d $lnum_proto) * ((_$l__lvar_153, "@class") ->@d "Number") * ((_$l__lvar_153, "@extensible") ->@d true) * ((_$l__lvar_153, "@primitiveValue") ->@d #n) ]]
normal;

 [[ Pi($lnum_proto, #field, {{ "d", _lvar_154, _lvar_155, _lvar_156, _lvar_157 }}, #pls, #plcls, #plpv) * types(#pls : List, #field : Str, _lvar_157 : Bool, #plpv : List, v : List, #n : Num, _lvar_155 : Bool, #plcls : List, #d : List, _lvar_156 : Bool) * (#d == {{ "d", _lvar_154, _lvar_155, _lvar_156, _lvar_157 }}) * (! (_lvar_154 == empty)) * (v == {{ "o", #n, #field }}) ]]
[[ Pi($lnum_proto, #field, #d, #pls, #plcls, #plpv) * types(#field : Str, #pls : List, #plpv : List, xobj : Obj, #n : Num, #plcls : List, #d : List) * (xret == l-nth(#d, 1.)) * (v == _lvar_v) * (xobj == _$l_#o) * Extensible (_$l_#o, extensible) * MetaData (_$l_#o, _$l__lvar_158) * empty_fields(_$l_#o : -{  }-) * Extensible (_$l__lvar_158, extensible) * MetaData (_$l__lvar_158, null) * empty_fields(_$l__lvar_158 : -{ "@class", "@extensible", "@primitiveValue", "@proto" }-) * ((_$l__lvar_158, "@proto") ->@d $lnum_proto) * ((_$l__lvar_158, "@class") ->@d "Number") * ((_$l__lvar_158, "@extensible") ->@d true) * ((_$l__lvar_158, "@primitiveValue") ->@d #n) ]]
normal

proc i__getValue (v) {
			goto [(typeOf(v) = List)] rcand dflt;
	rcand:		rtype := l-nth(v, 0.);
			goto [((rtype = "v") or (rtype = "o"))] init dflt;
	init:		rbase := l-nth(v, 1.);
			rfield := l-nth(v, 2.);
			goto [(rbase = undefined)] throw prim;
	prim:		prim := "i__isPrimitive"(rbase);
			goto [prim] is_pr ref;
	is_pr:		xobj := "i__toObject"(rbase) with pelab;
			[* fold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			xret := "getProperty"(xobj, rfield) with pelab;
			[* unfold Pi(xobj, #field, #d, #ls, #lcls, #lpv) *]
			goto [(xret = undefined)] rlab def;
	def:		d := l-nth(xret, 0.);
			xret := l-nth(xret, 1.);
			goto [(d = "d")] rlab acc;
	acc:		goto [(xret = undefined)] rlab get;
	get:		m := metadata (xret);
			xsc := [m, "@scope"];
			fun := [m, "@call"];
			xret := fun(xsc, rbase) with pelab;
			goto [(xret = empty)] undef rlab;
	undef:		xret := undefined;
	ref:		goto [((typeOf(v) = List) and (l-nth(v, 0.) = "o"))] oref vref;
	oref:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	vref:		goto [(rbase = $lg)] lg er;
	lg:		xret := "get"(rbase, rfield) with pelab;
			goto rlab;
	er:		xret := [rbase, rfield];
			goto rlab;
	dflt:		xret := v;
	rlab:		skip;
	throw:		xret := "ReferenceError"();
	pelab:		xret := PHI(xobj, xret, xret, xret, xret, xret);
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec ReferenceError_call(xsc, vthis, v)
[[ types(v : Undefined) * (v == undefined) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * (xsc == _lvar_xsc) * (vthis == _lvar_vthis) * Extensible (_$l__lvar_136, extensible) * MetaData (_$l__lvar_136, null) * empty_fields(_$l__lvar_136 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_136, "@proto") ->@d $lrferr_proto) * ((_$l__lvar_136, "@class") ->@d "Error") * ((_$l__lvar_136, "@extensible") ->@d true) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_136) * empty_fields(_$l_xret : -{  }-) ]]
normal

proc ReferenceError_call (xsc, vthis, v) {
			xmet := new();
			xret := new(xmet);
			xret := "create_default_object"(xret, $lrferr_proto, "Error", true);
			xret := "Error_construct"(undefined, xret, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};


spec SyntaxError(v)
[[ types(v : Undefined) * (v == undefined) ]]
[[ types(xret : Obj) * (xret == _$l_xret) * (v == _lvar_v) * Extensible (_$l_xret, extensible) * MetaData (_$l_xret, _$l__lvar_95) * empty_fields(_$l_xret : -{  }-) * Extensible (_$l__lvar_95, extensible) * MetaData (_$l__lvar_95, null) * empty_fields(_$l__lvar_95 : -{ "@class", "@extensible", "@proto" }-) * ((_$l__lvar_95, "@proto") ->@d $lserr_proto) * ((_$l__lvar_95, "@class") ->@d "Error") * ((_$l__lvar_95, "@extensible") ->@d true) ]]
normal

proc SyntaxError (v) {
			xret := "SyntaxError_call"(undefined, undefined, v) with elab;
	rlab:		skip;
	elab:		skip
} with {
	ret: xret, rlab;
	err: xret, elab;
};



