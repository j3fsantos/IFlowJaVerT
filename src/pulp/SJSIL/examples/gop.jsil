(* Internal properties *)
pred isInternalProperty (prop) :
  (0 <# s-len prop) * (s-nth (prop, 0) == "@") * types (prop : $$string_type);

(* Named properties *)
pred isNamedProperty (prop) :
  (0 <# s-len prop) * (! (s-nth (prop, 0) == "@")) * types (prop : $$string_type);

(* Location *)
pred isObjectLocation (v) :
  types (v : $$object_type);

(* Standard object cell stuff *)
pred Cell_o (l, prop, v) :
  isObjectLocation(v) * isNamedProperty(prop) * ((l, prop) -> v);

spec o__getOwnProperty (l, prop)
  [[ Cell_o (l, prop, None) ]]
  [[ Cell_o (l, prop, None) * (ret == $$undefined) ]]
  normal

proc o__getOwnProperty (l, prop) {
		(*
				l must be an object
				prop must be a non-empty string
				prop must not be an internal property
		*)
		ch0:		goto [typeOf(l) = $$object_type] ch1 elab;
		ch1:		goto [typeOf(prop) = $$string_type] ch2 elab;
		ch2:		goto [0 < s-len prop] ch3 elab;
		ch3:		goto [not (s-nth(prop, 0) = "@")] start elab;

    start:	x := hasField(l, prop);
            goto [x] hp nhp; 				(* Does the field exist? *)

    nhp:    xret := $$undefined;		(* Field doesn't exist; return undefined *)
            goto rlab;

    hp:     xret := [l, prop];			(* Field exists; return the descriptor *)

    rlab:   skip;

		elab:		xret := "TypeError" ("Incorrect use of [[getOwnProperty]]")
}
with
{
    ret: 	xret, rlab;
		err:	xret, elab;
};
