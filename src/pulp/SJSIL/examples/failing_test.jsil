pred ObjectProp (l, prop, v) :
	types(l : $$object_type, prop : $$string_type) * ((l, prop) -> v);
	
pred CommonMethods (l) :
	((l, "@getProperty") -> "o__getProperty") * ((l, "@getOwnProperty") -> "o__getOwnProperty");

pred ProtoLookup (l, prop, d) :
	ObjectProp (l, prop, d) * CommonMethods(l) * (! (prop == "@proto")),
	ObjectProp (l, prop, None) * CommonMethods(l) * ((l, "@proto") -> $$null) * (d == $$undefined) * (! (prop == "@proto")),
	ObjectProp (l, prop, None) * CommonMethods(l) * ((l, "@proto") -> #lp) * (!(#lp == $$null)) * CommonMethods(#lp) * (! (prop == "@proto")) * ProtoLookup(#lp, prop, d);

spec o__getProperty (l, prop)
	[[ ProtoLookup (l, prop, #d) ]]
	[[ ProtoLookup (l, prop, #d) * ret == #d ]]
	normal
proc o__getProperty (l, prop) {
			[* unfold (ProtoLookup (l, prop, #d)) *]
			gop := [l, "@getOwnProperty"];
			xret := gop (l, prop) with elab;
			goto [xret = $$undefined] next rlab;
			
	next:	proto := [l, "@proto"];
			goto [proto = $$null] rlab call;
			
	call:	gp := [proto, "@getProperty"];
			xret := gp (proto, prop) with elab;
	
    rlab:   skip;
    elab:	skip
}
with 
{
    ret: 	xret, rlab;
    err:	xret, elab;
};


spec o__getOwnProperty (l, prop)
	[[ ObjectProp (l, prop, None) ]]
	[[ ObjectProp (l, prop, None) * ret == $$undefined ]]
	normal;
	
	[[ ObjectProp (l, prop, #d) * (!(#d == None)) ]]
	[[ ObjectProp (l, prop, #d) * (!(#d == None)) * types(#d : $$list_type) * ret == #d ]]
	normal
proc o__getOwnProperty (l, prop) {
            x := hasField(l, prop);		
            goto [x] hp nhp; 			(* Does the field exist? *)
            
    nhp:    xret := $$undefined;		(* Field doesn't exist; return undefined *)
            goto rlab;					
            
    hp:     xret := [l, prop];			(* Field exists; return the descriptor *)
    
    rlab:   skip
}
with
{
    ret: 	xret, rlab;
};
