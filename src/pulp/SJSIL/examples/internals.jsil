(* ******************
   *** PREDICATES ***
   ****************** *)

(*
 * Predicate: isInternalProperty
 *
 * Resource: None
 *
 *)
pred isInternalProperty (prop) :
    (0 <# s-len prop) * (s-nth (prop, 0) == "@") * types (prop : $$string_type);

(*
 * Predicate: isNamedProperty
 *
 * Resource: None
 *
 *)
pred isNamedProperty (prop) :
    (0 <# s-len prop) * (! (s-nth (prop, 0) == "@")) * types (prop : $$string_type);

(*
 * Predicate: DataDescriptor
 *
 * Resource: None
 *
 *)
pred DataDescriptor (d) :
    types (d : $$list_type) * (d == {{ "d", #dval, #dwrit, #denum, #dconf }}) *
    types (#dwrit : $$boolean_type, #denum : $$boolean_type, #dconf : $$boolean_type);


(*
 * Predicate: GenericDescriptor
 *
 * Resource: None
 *
 *)
pred GenericDescriptor (d) :
    types (d : $$list_type) * (d == {{ "g", #genum, #gconf, #gval, #gwrit, #gget, #gset }});

(*
 * Predicate: Projection functions for descriptors
 *
 * Resource: None
 *
 *)
pred desc_val (d, v) :
    types (d : $$list_type) * v == l-nth(d, 1);

pred desc_writ (d, v) :
    types (d : $$list_type) * v == l-nth(d, 2);

pred desc_get (d, v) :
    types (d : $$list_type) * v == l-nth(d, 1);

pred desc_set (d, v) :
    types (d : $$list_type) * v == l-nth(d, 2);

pred desc_enum (d, v) :
    types (d : $$list_type) * v == l-nth(d, 3);

pred desc_conf (d, v) :
    types (d : $$list_type) * v == l-nth(d, 4);

(*
 * Predicate: Cell_o(l, prop, X)
 *
 * Resource:
 *      (l, prop)
 *
 * Note: We are not allowing accessor descriptors in the heap yet
 *)
pred Cell_o (l, prop, None) :
    types(l : $$object_type) * isNamedProperty(prop) * ((l, prop) -> None);

pred Cell_o (l, prop, d) :
    types(l : $$object_type) * isNamedProperty(prop) * ((l, prop) -> d) * DataDescriptor(d);

(*
 * Predicate: IsStringIndex
 *
 * Resource: None
 *
 *)
pred IsStringIndex(S, prop, i) :
    types(S : $$string_type, prop : $$string_type, i : $$int_type) *
    (prop == num_to_string i) * (!(i <# 0)) * (i <# s-len S);

(*
 * Predicate: Cell_s((l, prop, _, X, primitiveValue))
 *
 * Resource:
 *      (l, prop)               via Cell_o
 *      (l, "@primitiveValue")
 *
 * Note: Must be used with String objects,
 *       otherwise (l, "@primitiveValue") is $$empty
 *
 *)
pred Cell_s (l, prop, "None", None, pv) :
     Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i)) *
     types (pv : $$string_type);

pred Cell_s (l, prop, "SI", desc, pv) :
	 Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (#i == num_to_int (string_to_num prop)) * IsStringIndex(pv, prop, #i) *
     (#v == s-nth(pv, #i)) * (desc == {{ "d", #v, $$f, $$t, $$f }}) *
     types(#v : $$string_type, desc : $$list_type, #i : $$int_type, pv : $$string_type);

pred Cell_s (l, prop, "NSI", desc, pv) :
	 Cell_o (l, prop, desc) * ((l, "@primitiveValue") -> pv) *
	 (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i)) *
     (! (desc == None)) * DataDescriptor(desc) * types (desc : $$list_type, pv : $$string_type);

 (*
  * Predicate: CommonMethods(l)
  *
  * Resource:
  *      (l, "@getProperty")    (l, "@get")         (l, "@canPut")
  *      (l, "@put")            (l, "@hasProperty") (l, "@deleteProperty")
  *      (l, "@defaultValue")   (l, "@match")       (l, "@parameterMap")
  *
  * Note: Standard methods that are common to all objects.
  *       Should be used only when specifying ENTIRE objects.
  *
  *)
pred CommonMethods (l) :
    types (l : $$object_type) *
	((l, "@getProperty")    -> "o__getProperty") *
    ((l, "@get")            -> "o__get") *
    ((l, "@canPut")         -> "o__canPut") *
    ((l, "@put")            -> "o__put") *
    ((l, "@hasProperty")    -> "o__hasProperty") *
    ((l, "@deleteProperty") -> "o__deleteProperty") *
    ((l, "@defaultValue")   -> "o__defaultValue") *
    ((l, "@match")          -> $$empty) *
    ((l, "@parameterMap")   -> $$empty);

(*
 * Predicate: NonFunctionMethods(l)
 *
 * Resource:
 *      (l, "@getProperty")     (l, "@get")                 (l, "@canPut")
 *      (l, "@put")             (l, "@hasProperty")         (l, "@deleteProperty")
 *      (l, "@defaultValue")    (l, "@match")               (l, "@parameterMap")
 *      (l, "@construct")       (l, "@call")                (l, "@hasInstance")
 *      (l, "@scope")           (l, "@formalParameters")    (l, "@targetFunction")
 *      (l, "@boundThis")       (l, "@boundArguments")
 *
 * Note: Special Methods that are common to non-function objects.
 *       Should be used only when specifying ENTIRE objects.
 *
 *)
pred NonFunctionMethods (l) :
    CommonMethods(l) *
        ((l, "@construct") -> $$empty) *
        ((l, "@call") -> $$empty) *
        ((l, "@hasInstance") -> $$empty) *
        ((l, "@scope") -> $$empty) *
        ((l, "@formalParameters") -> $$empty) *
        ((l, "@targetFunction") -> $$empty) *
        ((l, "@boundThis") -> $$empty) *
        ((l, "@boundArguments") -> $$empty);

(*
 * Note: the mutable and non-unique methods are
 *
 *      (l, "@proto")       (l, "@class")
 *      (l, "@extensible")  (l, "@primitiveValue")
 *
 *      (l, "@getOwnProperty")    - different for Strings
 *      (l, "@defineOwnProperty") - different for Arrays
 *
 *)

pred ErrorObject (l, pr) :
	NonFunctionMethods(l) *
	((l, "@proto") -> pr) * ((l, "@class") -> "Error") *
	((l, "@extensible") -> $$t) * ((l, "@primitiveValue") -> $$empty) *
	((l, "@getOwnProperty") -> "o__getOwnProperty") *
	((l, "@defineOwnProperty") -> "o__defineOwnProperty");

pred isTypeError(l) :
    ErrorObject (l, $lterr_proto);

pred isSyntaxError(l) :
    ErrorObject (l, $lserr_proto);

pred isReferenceError(l) :
    ErrorObject (l, $lrferr_proto);

(*
 * Predicate: PiClass(l, X)
 *
 * Resource:
 *      (l, "@class")	(l, "@getOwnProperty")
 *
 *)
pred PiClass (l, "String") :
	 types (l : $$object_type) *
     ((l, "@class") -> "String") * ((l, "@getOwnProperty") -> "s__getOwnProperty");
pred PiClass (l, "Object") :
	 types (l : $$object_type) *
     ((l, "@class") -> #c) * (!(#c == "String")) * ((l, "@getOwnProperty") -> "o__getOwnProperty");

(*
 * The PI predicate
 *)

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *)
pred Pi (l, prop, "base", "General", $$undefined, ls, ltf, lpv) :
	PiClass (l, "Object") * Cell_o (l, prop, None) *
	((l, "@getProperty") -> "o__getProperty") * ((l, "@proto") -> $$null) *
    types(ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
    (ls == {{ l }}) * (ltf == {{ $$f }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *)
pred Pi (l, prop, "base", "General", d, ls, ltf, lpv) :
	PiClass (l, "Object") * Cell_o (l, prop, d) * DataDescriptor(d) *
	((l, "@getProperty") -> "o__getProperty") *
    types(ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
    (ls == {{ l }}) * (ltf == {{ $$f }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *		(l, "@primitiveValue")
 *)
pred Pi (l, prop, "base", "String", $$undefined, ls, ltf, lpv) :
    PiClass (l, "String") * Cell_s (l, prop, "None", None, #pv) *
	((l, "@getProperty") -> "o__getProperty") * ((l, "@proto") -> $$null) *
    types(ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
    (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *		(l, "@primitiveValue")
 *)
pred Pi (l, prop, "base", "StringSI", d, ls, ltf, lpv) :
	PiClass (l, "String") * Cell_s (l, prop, "SI", d, #pv) *
	((l, "@getProperty") -> "o__getProperty") *
    types(ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
    (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *		(l, "@primitiveValue")
 *)
pred Pi (l, prop, "base", "StringNSI", d, ls, ltf, lpv) :
	PiClass (l, "String") * Cell_s (l, prop, "NSI", d, #pv) *
	((l, "@getProperty") -> "o__getProperty") *
    types(ls : $$list_type, ltf : $$list_type, lpv : $$list_type) *
    (ls == {{ l }}) * (ltf == {{ $$t }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)
pred Pi (l, prop, "inductive", "General", d, ls, ltf, lpv) :
	PiClass (l, "Object") * Cell_o (l, prop, None) *
	((l, "@getProperty") -> "o__getProperty") *
    ((l, "@proto") -> #lp) * (! (#lp == $$null)) *
    Pi (#lp, prop, #caseType, #class, d, #lsp, #ltfp, #lpvp) *
	((#lp, "@getProperty") -> "o__getProperty") *
    types(  ls : $$list_type,   ltf : $$list_type,   lpv : $$list_type,
          #lsp : $$list_type, #ltfp : $$list_type, #lpvp : $$list_type) *
    (ls == l :: #lsp) * (ltf == $$f :: #ltfp) * (lpv == "" :: #lpvp) *
    (0 <# l-len #lsp) * (0 <# l-len #ltfp) * (0 <# l-len #lpvp);

(*
 * Resource:
 *		(l, "@class")   (l, "@getOwnProperty")  via PiClass
 *		(l, "proto")	(l, "prop")		(l, "@getProperty")
 *		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)
pred Pi (l, prop, "inductive", "String", d, ls, ltf, lpv) :
	PiClass (l, "String") * Cell_s (l, prop, "None", None, #pv) *
    ((l, "@getProperty") -> "o__getProperty") *
	((l, "@proto") -> #lp) * (! (#lp == $$null)) *
    Pi (#lp, prop, #caseType, #class, d, #lsp, #ltfp, #lpvp) *
	((#lp, "@getProperty") -> "o__getProperty") *
    types(  ls : $$list_type,   ltf : $$list_type,   lpv : $$list_type,
          #lsp : $$list_type, #ltfp : $$list_type, #lpvp : $$list_type) *
    (ls == l :: #lsp) * (ltf == $$t :: #ltfp) * (lpv == #pv :: #lpvp) *
    (0 <# l-len #lsp) * (0 <# l-len #ltfp) * (0 <# l-len #lpvp);

(* *************************************
   *** *** ***   AUXILIARY   *** *** ***
   ************************************* *)

(* **********************
   *** i__isPrimitive ***
   ********************** *)

spec i__isPrimitive (v)
   [[ v == $$undefined ]]
   [[ ret == $$t ]]
   normal;
   [[ v == $$null ]]
   [[ ret == $$t ]]
   normal;
   [[ types (v : $$string_type) ]]
   [[ (ret == $$t) ]]
   normal;
   [[ types (v : $$int_type) ]]
   [[ (ret == $$t) ]]
   normal;
   [[ types (v : $$boolean_type) ]]
   [[ (ret == $$t) ]]
   normal;
   [[ types (v : $$string_type) ]]
   [[ (ret == $$t) ]]
   normal;
   [[ types (v : $$object_type) ]]
   [[ (ret == $$f) ]]
   normal

proc i__isPrimitive (v) {
			tv := typeOf(v);

	iu:		goto [(v = $$undefined) or (v = $$null) or
	              (typeOf(v) = $$boolean_type) or (typeOf(v) <: $$number_type) or
	              (typeOf(v) = $$string_type)] rt rf;

	rt:		xret := $$t;
			goto rlab;

	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* *******************
   *** i__toNumber ***
   ******************* *)

spec i__toNumber (v)
	[[ types(v : $$string_type, #v : $$string_type) * (v == #v) ]]
	[[ types(ret : $$number_type) * (ret == (string_to_num #v)) ]]
	normal

proc i__toNumber (v) {
    iu:		goto [v = $$undefined] undef in;
	undef:	xret := nan;
    		goto rlab;

    in:		goto [v = $$null] null ib;
	null:	xret := 0;
    		goto rlab;

    ib:		goto [typeOf(v) = $$boolean_type] bool inum;
	bool:	goto [v = $$t] is_t is_f;
    is_t:	xret := 1;
    		goto rlab;
    is_f:	xret := 0;
    		goto rlab;

    inum:	goto [typeOf(v) = $$number_type] num is;
    num:	xret := v;
    		goto rlab;

    is:		goto [typeOf(v) = $$string_type] str io;
    str:	xret := string_to_num v;
    		goto rlab;

    io:		goto [typeOf(v) = $$object_type] obj oops;
    obj:	xret := "i__toPrimitive" (v, "Number") with elab;
    		xret := "i__toNumber" (xret);
    		goto rlab;

    oops:	xret := "TypeError" ("ToNumber: This should not happen.");
            goto elab;

    rlab:	skip;
    elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ********************
   *** i__toInteger ***
   ******************** *)

spec i__toInteger (v)
	[[ types(v : $$string_type, #v : $$string_type) * (v == #v) ]]
	[[ types(ret : $$int_type) * (ret == num_to_int (string_to_num #v)) ]]
	normal

proc i__toInteger (v) {
			xret := "i__toNumber" (v) with elab;
			xret := num_to_int (xret);

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *******************
   *** i__toString ***
   ******************* *)

spec i__toString (v)
	[[ types(v : $$int_type, #v : $$int_type) * (v == #v) ]]
	[[ types(ret : $$string_type) * (ret == (num_to_string #v)) ]]
	normal

proc i__toString (v) {
	iu:		goto [v = $$undefined] undef in;
	undef:	xret := "undefined";
			goto rlab;

	in:		goto [v = $$null] null ib;
	null:	xret := "null";
			goto rlab;

	ib:		goto [typeOf(v) = $$boolean_type] bool inum;
	bool:	goto [v = $$t] is_t is_f;
	is_t:	xret := "true";
			goto rlab;
	is_f:	xret := "false";
			goto rlab;

	inum:	goto [typeOf(v) <: $$number_type] num is;
	num:	xret := num_to_string v;
			goto rlab;

	is:		goto [typeOf(v) = $$string_type] str io;
	str:	xret := v;
			goto rlab;

	io:		goto [typeOf(v) = $$object_type] obj oops;
	obj:	xret := "i__toPrimitive" (v, "String") with elab;
			xret := "i__toString" (xret) with elab;
			goto rlab;

	oops:	xret := "TypeError" ("ToString: This should not happen.");
            goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************* *)
(* I__ISDATADESCRIPTOR *)
(* ******************* *)

spec i__isDataDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == $$t ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 3) == $$empty) * (l-nth (desc, 4) == $$empty) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, with value *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 3) == $$empty) ]]
    [[ ret == $$t ]]
    normal;

    (* Generic descriptor, with writable *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 4) == $$empty) ]]
    [[ ret == $$t ]]
    normal

proc i__isDataDescriptor (desc) {
			goto [desc = $$undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "d"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	v := l-nth (desc, 3);
			w := l-nth (desc, 4);
			goto [(v = $$empty) and (w = $$empty)] rf rt;
	rt:		xret := $$t;
			goto rlab;
	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* *********************** *)
(* I__ISACCESSORDESCRIPTOR *)
(* *********************** *)

spec i__isAccessorDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 5) == $$empty) * (l-nth (desc, 6) == $$empty) ]]
    [[ ret == $$f ]]
    normal;

    (* Generic descriptor, with get *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 5) == $$empty) ]]
    [[ ret == $$t ]]
    normal;

    (* Generic descriptor, with set *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 6) == $$empty) ]]
    [[ ret == $$t ]]
    normal

proc i__isAccessorDescriptor (desc) {
			goto [desc = $$undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "a"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	g := l-nth (desc, 5);
			s := l-nth (desc, 6);
			goto [(g = $$empty) and (s = $$empty)] rf rt;
	rt:		xret := $$t;
			goto rlab;
	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* ********************** *)
(* I__ISGENERICDESCRIPTOR *)
(* ********************** *)

spec i__isGenericDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == $$undefined ]]
    [[ ret == $$f ]]
    normal;

	(* Data descriptor *)
	[[ DataDescriptor(desc) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, no data descriptor components *)
	[[ GenericDescriptor(desc) *
	   (l-nth (desc, 3) == $$empty) * (l-nth (desc, 4) == $$empty) *
	   (l-nth (desc, 5) == $$empty) * (l-nth (desc, 6) == $$empty) ]]
	[[ ret == $$t ]]
	normal;

	(* Generic descriptor, with value *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 3) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with writable *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 4) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 5) == $$empty)) ]]
	[[ ret == $$f ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 6) == $$empty)) ]]
	[[ ret == $$f ]]
	normal

proc i__isGenericDescriptor (desc) {
			goto [desc = $$undefined] rf cont;

	cont:	dd := "i__isDataDescriptor" (desc);
			ad := "i__isAccessorDescriptor" (desc);
			xret := not (dd or ad);
			goto rlab;

	rf:		xret := $$f;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* ******************* *)
(* I__TODATADESCRIPTOR *)
(* ******************* *)

spec i__toDataDescriptor (desc)

    [[ DataDescriptor (#desc) * (desc == #desc) ]]
    [[ (ret == #desc) ]]
    normal

proc i__toDataDescriptor (desc) {
			d := l-nth (desc, 0);
			goto [d = "d"] rd cstr;

	cstr:	goto [d = "a"] ra gen;

	ra:		xret := {{ "d", $$undefined, $$f, l-nth (d, 3), l-nth (d, 4) }};
			goto rlab;

	gen:	e := l-nth (desc, 1);
			c := l-nth (desc, 2);
			v := l-nth (desc, 3);
			w := l-nth (desc, 4);

			goto [e = $$empty] fixe c;
	fixe:	e := $$f;
	c:		goto [c = $$empty] fixc v;
	fixc:	c := $$f;
	v:		goto [v = $$empty] fixv w;
	fixv:	v := $$undefined;
	w:		goto [w = $$empty] fixw fixed;
	fixw:	w := $$f;

	fixed:	xret := {{ "d", v, w, e, c }};
			goto rlab;

	rd:		xret := desc;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* *************** *)
(* OBJECT CREATION *)
(* *************** *)

(*
 * Note: the mutable and non-unique methods are
 *
 *      (l, "@proto")       (l, "@class")
 *      (l, "@extensible")  (l, "@primitiveValue")
 *
 *      (l, "@getOwnProperty")    - different for Strings
 *      (l, "@defineOwnProperty") - different for Arrays
 *
 *)

spec create_default_object (l, pr, cl, ext)

    [[ types(#l : $$object_type, pr : $$object_type) *
       (cl == $$undefined) * (ext == $$undefined) *
       ((#l, "@proto") -> $$null) * (l == #l)]]
    [[ NonFunctionMethods (#l) *
	   ((#l, "@proto") -> pr) * ((#l, "@class") -> "Object") *
	   ((#l, "@extensible") -> $$t) * ((#l, "@primitiveValue") -> $$empty) *
	   ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == #l) ]]
    normal;

    [[ types(l : $$object_type, pr : $$object_type, cl : $$string_type) *
       (ext == $$undefined) * ((#l, "@proto") -> $$null) * (l == #l) ]]
    [[ NonFunctionMethods (#l) *
	   ((#l, "@proto") -> pr) * ((#l, "@class") -> cl) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@primitiveValue") -> $$empty) *
	   ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == #l) ]]
    normal;

    [[ types(l : $$object_type, pr : $$object_type, ext : $$boolean_type) *
       (cl == $$undefined) * ((#l, "@proto") -> $$null) * (l == #l) ]]
    [[ NonFunctionMethods (#l) *
	   ((#l, "@proto") -> pr) * ((#l, "@class") -> "Object") *
	   ((#l, "@extensible") -> ext) * ((#l, "@primitiveValue") -> $$empty) *
	   ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == #l) ]]
    normal;

    [[ types(l : $$object_type, pr : $$object_type, cl : $$string_type, ext : $$boolean_type) *
       ((#l, "@proto") -> $$null) * (l == #l) ]]
    [[ NonFunctionMethods (#l) *
	   ((#l, "@proto") -> pr) * ((#l, "@class") -> cl) *
	   ((#l, "@extensible") -> ext) * ((#l, "@primitiveValue") -> $$empty) *
	   ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == #l) ]]
    normal

proc create_default_object (l, pr, cl, ext) {

			goto [cl = $$undefined] scl text;
	scl:	cl := "Object";
	text:	goto [ext = $$undefined] sext setall;
	sext:	ext := $$t;

	setall:	[l, "@proto"] := pr;
			[l, "@class"] := cl;
			[l, "@extensible"] := ext;

			[l, "@getOwnProperty"]    := "o__getOwnProperty";
			[l, "@getProperty"]       := "o__getProperty";
			[l, "@get"]               := "o__get";
			[l, "@canPut"]            := "o__canPut";
			[l, "@put"]               := "o__put";
			[l, "@hasProperty"]       := "o__hasProperty";
			[l, "@deleteProperty"]    := "o__deleteProperty";
			[l, "@defaultValue"]      := "o__defaultValue";
			[l, "@defineOwnProperty"] := "o__defineOwnProperty";

			[l, "@primitiveValue"]   := $$empty;
			[l, "@construct"]        := $$empty;
			[l, "@call"]             := $$empty;
			[l, "@hasInstance"]      := $$empty;
			[l, "@scope"]            := $$empty;
			[l, "@formalParameters"] := $$empty;
			[l, "@targetFunction"]   := $$empty;
			[l, "@boundThis"]        := $$empty;
			[l, "@boundArguments"]   := $$empty;
			[l, "@match"]            := $$empty;
			[l, "@parameterMap"]     := $$empty;

	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

(* ****** *)
(* ERRORS *)
(* ****** *)

spec Error_construct (xsc, vthis, v)

    (* Error constructor without message *)
    [[ (v == $$undefined) * (vthis == #vthis) * types (#vthis : $$object_type) *
       ((#vthis, "@class") -> #cls) * ((#vthis, "@extensible") -> #ext) ]]
    [[ (ret == #vthis) * ((#vthis, "@class") -> "Error") * ((#vthis, "@extensible") -> $$t) ]]
    normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;

			[vthis, "@class"] := "Error";
			[vthis, "@extensible"] := $$t;

			goto [v = $$undefined] rlab mess;

	mess:	xerr := "i__toString" (v) with elab;
			[xret, "message"] := {{ "d", xerr, $$t, $$f, $$t }};

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xerr, elab;
};

(* ********* *)
(* TYPEERROR *)
(* ********* *)

spec TypeError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lterr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec TypeError (v)

    [[ (v == $$undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError (v) {
			xret := "TypeError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* ************** *)
(* REFERENCEERROR *)
(* ************** *)

spec ReferenceError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lrferr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec ReferenceError (v)

    [[ (v == $$undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError (v) {
			xret := "ReferenceError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* *********** *)
(* SYNTAXERROR *)
(* *********** *)

spec SyntaxError_call (xsc, vthis, v)

    [[ (v == $$undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lserr_proto, "Error", $$t);

			xret := "Error_construct" ($$undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec SyntaxError (v)

    [[ (v == $$undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError (v) {
			xret := "SyntaxError_call" ($$undefined, $$undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* **********************************************
   *** *** ***   INTERNAL FUNCTIONS   *** *** ***
   ********************************************** *)

(* *************************
   *** O__GETOWNPROPERTY ***
   ************************* *)

spec o__getOwnProperty (l, prop)
    [[ Cell_o (#l, #prop, None) * (l == #l) * (prop == #prop) ]]
    [[ Cell_o (#l, #prop, None) * (ret == $$undefined) ]]
    normal;
    [[ Cell_o (#l, #prop, #dx) * (l == #l) * (prop == #prop) *
	   DataDescriptor(#dx) * types (#dx : $$list_type) ]]
    [[ Cell_o (#l, #prop, #dx) * (ret == #dx) ]]
    normal

proc o__getOwnProperty (l, prop) {
	(*
		l must be an object
		prop must be a non-empty string
		prop must not be an internal property
	*)
	ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
	ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
	ch2:	goto [0 < s-len prop] ch3 elab;
	ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

    start:	x := hasField(l, prop);
            goto [x] hp nhp;

    nhp:    xret := $$undefined;
            goto rlab;

    hp:     xret := [l, prop];

    rlab:   skip;

	elab:	xret := "TypeError" ()
}
with
{
    ret: 	xret, rlab;
	err:	xret, elab;
};

(* *************************
   *** S__GETOWNPROPERTY ***
   ************************* *)

spec s__getOwnProperty (l, prop)
    [[ Cell_s (#l, #prop, "None", None, #pv) * (l == #l) * (prop == #prop) ]]
    [[ Cell_s (#l, #prop, "None", None, #pv) * (ret == $$undefined) ]]
   	normal;
   	(* Same comment as in o__getOwnProperty applies *)
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) * (l == #l) * (prop == #prop) ]]
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) * (ret == #u) ]]
   	normal;
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) * (l == #l) * (prop == #prop) ]]
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) * (ret == #u) ]]
   	normal

proc s__getOwnProperty (l, prop) {

    ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
    ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
    ch2:	goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

   	start:	xret := "o__getOwnProperty" (l, prop);
   			goto [xret = $$undefined] str rlab;

   	str:	idx := "i__toInteger" (prop) with elab;
   			goto [idx < 0] rlab next;

   	next:	sidx := "i__toString" (idx);

   			goto [sidx = prop] index rlab;

   	index:	str := [l, "@primitiveValue"];
   			len := s-len (str);
   			goto [len <= idx] rlab return;

   	return: rstr := s-nth (str, idx);
   			xret := {{ "d", rstr, $$f, $$t, $$f }};

   	rlab: 	skip;
   	elab:	skip
}
with
{
    ret: 	xret, rlab;
   	err: 	xret, elab;
};

(* **********************
   *** O__GETPROPERTY ***
   ********************** *)

spec o__getProperty (l, prop)
	[[ Pi (#l, #prop, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4, #gp_aux_5, #gp_aux_6) * (l == #l) * (prop == #prop) ]]
	[[ Pi (#l, #prop, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4, #gp_aux_5, #gp_aux_6) * (ret == #gp_aux_3) ]]
	normal

proc o__getProperty (l, prop) {

			[* unfold Pi (#l, #prop, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4, #gp_aux_5, #gp_aux_6) *]
    ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
    ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
    ch2:	goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

	start:  gop := [l, "@getOwnProperty"];
			xret := gop (l, prop) with elab;
			goto [xret = $$undefined] next rlab;

	next:	proto := [l, "@proto"];
			goto [proto = $$null] rlab call;

	call:	gp := [proto, "@getProperty"];
			xret := gp (proto, prop) with elab;

			[* fold Pi (#l, #prop, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4, #gp_aux_5, #gp_aux_6) *]
    rlab:   skip;
    elab:	skip

}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* **************
   *** O__GET ***
   ************** *)

spec o__get (l, prop)
    [[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (#g_aux_3 == $$undefined) * (l == #l) * (prop == #prop)]]
    [[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (#g_aux_3 == $$undefined) * (ret == $$undefined) ]]
    normal;
    [[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * DataDescriptor (#g_aux_3) * (l == #l) * (prop == #prop) ]]
    [[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * desc_val (#g_aux_3, #desc_val) * (ret == #desc_val) ]]
    normal

proc o__get (l, prop) {

            [* unfold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
    ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
    ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
    ch2:    goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

	start:  gp := [l, "@getProperty"];
            [* fold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
		    xret := gp (l, prop) with elab;
            goto [xret = $$undefined] rlab def;

	def:	d := l-nth (xret, 0);
			xret := l-nth (xret, 1);
			goto [d = "d"] rlab acc;

	acc:	goto [xret = $$undefined] rlab get;
	get:	xsc := [xret, "@scope"];
			fun := [xret, "@call"];
			xret := fun (xsc, l) with elab;
			goto [xret = $$empty] undef rlab;
	undef:	xret := $$undefined;

	rlab:	skip;
	elab:	skip
}
with
{
   ret: xret, rlab;
   err: xret, elab;
};

(* *******************
   *** I__GETVALUE ***
   ******************* *)

spec i__getValue (v)
    [[ v == $$undefined ]]
    [[ ret == $$undefined ]]
    normal;
    [[ v == $$null ]]
    [[ ret == $$null ]]
    normal;
    [[ types (v : $$string_type) ]]
    [[ (ret == v) ]]
    normal;
    [[ types (v : $$int_type) ]]
	[[ (ret == v) ]]
	normal;
    [[ types (v : $$boolean_type) ]]
    [[ (ret == v) ]]
    normal;
    [[ types (v : $$string_type) ]]
    [[ (ret == v) ]]
    normal;

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : $$object_type, #field : $$string_type) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * ((#obj, "@get") -> "o__get") * (#g_aux_3 == $$undefined) ]]
    [[ Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * ((#obj, "@get") -> "o__get") * (ret == $$undefined) ]]
    normal;

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : $$object_type, #field : $$string_type) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * ((#obj, "@get") -> "o__get") * DataDescriptor (#g_aux_3)  ]]
    [[ Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * ((#obj, "@get") -> "o__get") * desc_val (#g_aux_3, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (($lg, "@get") -> "o__get") * (#g_aux_3 == $$undefined) ]]
    [[ Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (($lg, "@get") -> "o__get") * (ret == $$undefined) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : $$string_type) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (($lg, "@get") -> "o__get") * DataDescriptor (#g_aux_3)  ]]
    [[ Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) * (($lg, "@get") -> "o__get") * desc_val (#g_aux_3, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "v", #obj, #field }}) * (! (#obj == $lg)) * ((#obj, #field) -> #value) * isNamedProperty(#field) *
       types (#obj : $$object_type, #field : $$string_type) ]]
    [[ ((#obj, #field) -> #value) * (ret == #value) ]]
    normal

proc i__getValue (v) {
			goto [(typeOf(v) = $$list_type)] rcand dflt;

    rcand:  rtype := l-nth (v, 0);
            goto [(rtype = "v") or (rtype = "o")] init dflt;

	init:	rbase := l-nth (v, 1);
			rfield := l-nth (v, 2);
			goto [rbase = $$undefined] throw prim;


	prim:	prim := "i__isPrimitive" (rbase);
            goto [prim] is_pr ref;

	is_pr:	xret := "i__toObject" (rbase) with elab;
			gp := [xret, "@getProperty"];
			xret := gp (xret, rfield) with elab;
			goto [xret = $$undefined] rlab def;
	def:	d := l-nth (xret, 0);						(* Get the descriptor type *)
			xret := l-nth (xret, 1);					(* Get the value/getter *)
			goto [d = "d"] rlab acc;				(* Is it a data descriptor? *)

	acc:	goto [xret = $$undefined] rlab get;		(* Is the getter defined? *)
	get:	xsc := [xret, "@scope"];				(* Get the scope of the getter *)
			fun := [xret, "@call"];					(* Get the name of the getter *)
			xret := fun (xsc, rbase) with elab;		(* Call the getter, errors could happen *)
			goto [xret = $$empty] undef rlab;
	undef:	xret := $$undefined;

	ref:	goto [(l-nth (v, 0) = "o")] oref vref;

            [* unfold Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
	oref:	gp := [rbase, "@get"];
            [* fold Pi (#obj, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
			xret := gp (rbase, rfield) with elab;
			goto rlab;

	vref:	goto [rbase = $lg] lg er;

            [* unfold Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
	lg:		gp := [$lg, "@get"];
            [* fold Pi ($lg, #field, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
			xret := gp (rbase, rfield) with elab;
			goto rlab;

	er:		xret := [rbase, rfield];
			goto rlab;

	dflt:	xret := v;

	rlab:	skip;

	throw:  xret := "ReferenceError" ();
    elab:   skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ************** *)
(* DELETEPROPERTY *)
(* ************** *)

spec o__deleteProperty (l, prop, throw)

    [[ Cell_o (#l, #prop, #v) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   DataDescriptor(#v) * desc_conf (#v, $$f) * (throw == $$t) * (l == #l) * (prop == #prop) ]]
    [[ Cell_o (#l, #prop, #v) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   isTypeError(err) ]]
    error;

    [[ Cell_o (#l, #prop, #v) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   DataDescriptor(#v) * desc_conf (#v, $$f) * (throw == $$f) * (l == #l) * (prop == #prop) ]]
    [[ Cell_o (#l, #prop, #v) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   (ret == $$f) ]]
    normal;

    [[ Cell_o (#l, #prop, #v) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   DataDescriptor(#v) * desc_conf (#v, $$t) * (l == #l) * (prop == #prop) ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   (ret == $$t) ]]
    normal;

    [[ Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * (l == #l) * (prop == #prop) ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   (ret == $$t) ]]
    normal;

	[[ Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * (l == #l) * (prop == #prop) ]]
	[[ Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   (ret == $$t)]]
	normal;

	[[ Cell_s (#l, #prop, "SI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   (throw == $$t) * (l == #l) * (prop == #prop)]]
	[[ Cell_s (#l, #prop, "SI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   isTypeError(err) ]]
	error;

	[[ Cell_s (#l, #prop, "SI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   DataDescriptor(#desc) * (throw == $$f) * (l == #l) * (prop == #prop)]]
	[[ Cell_s (#l, #prop, "SI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   (ret == $$f) ]]
	normal;

	[[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   (throw == $$t) * desc_conf (#desc, $$f) * (l == #l) * (prop == #prop)]]
	[[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   isTypeError(err) ]]
	error;

	[[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   DataDescriptor(#desc) * (throw == $$f) * desc_conf (#desc, $$f) * (l == #l) * (prop == #prop)]]
	[[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   (ret == $$f) ]]
	normal;

	[[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   DataDescriptor(#desc) * desc_conf (#desc, $$t) * (l == #l) * (prop == #prop)]]
	[[ Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   (ret == $$t) ]]
	normal

proc o__deleteProperty (l, prop, throw) {
    ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
    ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
    ch2:    goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

	start:	gop := [l, "@getOwnProperty"];
			xret := gop (l, prop) with elab;
			goto [xret = $$undefined] dt cont;

  	cont:	c := l-nth (xret, 4);
  			goto [c] del reject;
  	del:	delete (l, prop);

  	dt:		xret := $$t;
      		goto rlab;

	df:   	xret := $$f;
	rlab: 	skip;

	reject:	goto [throw] tt df;

    tt:     xret := "TypeError" ();
    elab:   skip
}
with
{
  ret: xret, rlab;
  err: xret, elab;
};

(* ****** *)
(* CANPUT *)
(* ****** *)

spec o__canPut (l, prop)

    (* Property not defined at all, returning "@extensible" *)
    [[ (l == #l) * (prop == #prop) *
	   Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
       ((#l, "@extensible") -> #ext) * types (#ext: $$boolean_type) ]]
    [[ Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
       ((#l, "@extensible") -> #ext) * (ret == #ext) ]]
    normal;

	(* Property defined in the object itself, returning writable *)
	[[ (l == #l) * (prop == #prop) *
	   Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * desc_writ(#g_aux_3, #writ) * types(#writ : $$boolean_type) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   (ret == #writ) ]]
	normal;

	(* Property defined as a data descriptor outside, but object not extensible, return false *)
	[[ (l == #l) * (prop == #prop) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * (1 <# l-len (#g_aux_4)) * ((#l, "@extensible") -> $$f) *
	   types (#g_aux_4 : $$list_type) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * (ret == $$f) ]]
	normal;

	(* Property defined as a data descriptor outside, object extensible, return writable *)
	[[ (l == #l) * (prop == #prop) *
	   Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * desc_writ(#g_aux_3, #writ) * (1 <# l-len (#g_aux_4)) *
	   ((#l, "@extensible") -> $$t) * types (#g_aux_4 : $$list_type, #writ : $$boolean_type) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$t) * (ret == #writ) ]]
	normal

proc o__canPut (l, prop) {
            [* unfold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
    ch0:	goto [typeOf(l) = $$object_type] ch1 elab;
    ch1:	goto [typeOf(prop) = $$string_type] ch2 elab;
    ch2:    goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

	start:  gop := [l, "@getOwnProperty"];
            xret := gop (l, prop) with elab;
	op:		goto [xret = $$undefined] nop odesc; 	(* Does the own property exist? *)

	odesc:	d := l-nth (xret, 0);					(* It does; get the descriptor type *)
			goto [d = "d"] odd nop;					(* Is the descriptor a data descriptor? *)

	odd:	xret := l-nth (xret, 2);				(* It is; return the Writable attribute *)
            [* fold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
			goto rlab;

	nop:	gp := [l, "@getProperty"];
            [* fold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
            xret := gp (l, prop) with elab;			(* Does the property exist? *)
            e := [l, "@extensible"];
            goto [xret = $$undefined] ext desc;		(* It doesn't; return extensible *)

	desc:	d := l-nth (xret, 0);					(* Get the descriptor type *)
			v := l-nth (xret, 2);					(* Get the writable/setter *)
			goto [d = "d"] dd ad;					(* Is it a data descriptor? *)

	dd:     goto [e] wr ext;						(* Yes; is the object extensible? *)
	wr:		xret := v;								(* Yes; return writable *)
			goto rlab;

	ad:		xret := not (v = $$undefined);		     (* Accessor descriptor *)
            goto rlab;

	ext:	xret := e;                				(* Return extensible *)

    rlab:   skip;
    elab:	skip
}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* ********* *)
(* SAMEVALUE *)
(* ********* *)

spec i__sameValue (v1, v2)

	[[ v1 == v2 ]]
	[[ ret == $$t ]]
	normal

proc i__sameValue (v1, v2) {
			xret := (v1 = v2);

			goto [(typeOf(v1) <: $$number_type)] test2 rlab;
	test2:	goto [(typeOf(v2) <: $$number_type)] inan  rlab;

	inan:	goto [(not (v1 = v1)) and (not (v2 = v2))] rt zero;
	zero:	goto [(v1 = 0) and (v2 = 0)] fix rlab;

	fix:	sv1 := m_sgn (v1);
			sv2 := m_sgn (v2);

			xret := (sv1 = sv2);
			goto rlab;

	rt:		xret := $$t;

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* ******************** *)
(* O__DEFINEOWNPROPERTY *)
(* ******************** *)

spec o__defineOwnProperty (l, prop, desc, throw)

	(*
	 *  1. {{ "d", _,   _,   _, $$f }} - {{ "d", _,   _,   _, $$t }} => Reject
	 *  2. {{ "d", _,   _, $$t, $$f }} - {{ "d", _,   _, $$f, $$f }} => Reject
	 *  3. {{ "d", _,   _, $$f, $$f }} - {{ "d", _,   _, $$t, $$f }} => Reject
	 *  4. {{ "d",     _, $$f,   _, $$f }} - {{ "d",     _,    $$t,      _,    $$f }} => Reject
 	 *  5. {{ "d", #cval, $$f,   _, $$f }} - {{ "d", #nval,    $$f,      _,    $$f }} => if #cval !== nval then Reject
	 *
	 *  6. {{ "d",     _,   _,   _, $$t }} - {{ "d", #nval, #nwrit, #nenum, #nconf }} => {{ "d", #nval, #nwrit, #nenum, #nconf }}
	 *
	 *)

    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
       DataDescriptor (#desc) * desc_val(#desc, #dv) * desc_writ(#desc, #dw) * desc_enum(#desc, #de) * desc_conf (#desc, #dc) *
       types (#dw : $$boolean_type, #de : $$boolean_type, #dc : $$boolean_type ) *
       (#throw == $$t) * Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@extensible") -> $$f) ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * ((#l, "@extensible") -> $$f) * isTypeError(err) ]]
    error;

    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
       DataDescriptor (#desc) * desc_val(#desc, #dv) * desc_writ(#desc, #dw) * desc_enum(#desc, #de) * desc_conf (#desc, #dc) *
       types (#dw : $$boolean_type, #de : $$boolean_type, #dc : $$boolean_type ) *
       (#throw == $$f) * Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@extensible") -> $$f) ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * ((#l, "@extensible") -> $$f) * (ret == $$f) ]]
    normal;

    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
       DataDescriptor (#desc) * desc_val(#desc, #dv) * desc_writ(#desc, #dw) * desc_enum(#desc, #de) * desc_conf (#desc, #dc) *
       types (#dw : $$boolean_type, #de : $$boolean_type, #dc : $$boolean_type ) *
       Cell_o (#l, #prop, None) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@extensible") -> $$t) ]]
    [[ Cell_o (#l, #prop, #desc) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * ((#l, "@extensible") -> $$t) * (ret == $$t) ]]
    normal;

	 [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
       DataDescriptor (#desc) * desc_val(#desc, #dv) * desc_writ(#desc, #dw) * desc_enum(#desc, #de) * desc_conf (#desc, #dc) *
       types (#dw : $$boolean_type, #de : $$boolean_type, #dc : $$boolean_type ) *
       Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty") *
	   ((#l, "@extensible") -> $$t) ]]
     [[ Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@getOwnProperty") -> "s__getOwnProperty")
    	* ((#l, "@extensible") -> $$t) * (ret == $$t) ]]
     normal;

    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #desc : $$list_type, #throw : $$boolean_type) *
       DataDescriptor (#desc) * desc_val(#desc, #dv) * desc_writ(#desc, #dw) * desc_enum(#desc, #de) * desc_conf (#desc, #dc) *
       types (#dw : $$boolean_type, #de : $$boolean_type, #dc : $$boolean_type ) *
       Cell_o (#l, #prop, {{ "d", #cv, #cw, #ce, $$t }}) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") *
	   ((#l, "@extensible") -> $$t) ]]
    [[ Cell_o (#l, #prop, #desc) * ((#l, "@getOwnProperty") -> "o__getOwnProperty") * ((#l, "@extensible") -> $$t) * (ret == $$t) ]]
    normal

proc o__defineOwnProperty (l, prop, desc, throw) {

			xret := $$t;

			gop := [l, "@getOwnProperty"];
			current := gop (l, prop) with celab;
			extensible := [l, "@extensible"];

			goto [(current = $$undefined) and (extensible = $$f)] reject l4;
	l4:		goto [(current = $$undefined) and (extensible = $$t)] l4a getall;

	l4a:	gd := "i__isGenericDescriptor" (desc);
			dd := "i__isDataDescriptor" (desc);

			goto [gd or dd] l4a1 l4b;

	l4a1:	ndesc := "i__toDataDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	l4b:	ndesc := "i__toAccessorDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	getall:	goto [l-nth (desc, 0) = "d"] ddd odd;

			(* Data *)
	ddd:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := l-nth (desc, 1);
			dw := l-nth (desc, 2);
			dg := $$empty;
			ds := $$empty;
			goto l5;

	odd:	goto [l-nth (desc, 0) = "a"] add gdd;

			(* Accessor *)
	add:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := $$empty;
			dw := $$empty;
			dg := l-nth (desc, 1);
			ds := l-nth (desc, 2);
			goto l5;

			(* Generic *)
	gdd:	de := l-nth (desc, 1);
			dc := l-nth (desc, 2);
			dv := l-nth (desc, 3);
			dw := l-nth (desc, 4);
			dg := l-nth (desc, 5);
			ds := l-nth (desc, 6);

	l5:		goto [(de = $$empty) and (dc = $$empty) and (dv = $$empty) and
			      (dw = $$empty) and (dg = $$empty) and (ds = $$empty)] acc_t l6;

	l6:		goto [l-nth (current, 0) = "d"] chd cha;

	chd:	t1 := "i__sameValue" (dv, l-nth (current, 1));
			t2 := "i__sameValue" (dw, l-nth (current, 2));
			t3 := "i__sameValue" (de, l-nth (current, 3));
			t4 := "i__sameValue" (dc, l-nth (current, 4));

			goto [t1 and t2 and t3 and t4 and
			      (dg = $$empty) and (ds = $$empty)] acc_t l7;

	cha:	t1 := "i__sameValue" (dg, l-nth (current, 1));
			t2 := "i__sameValue" (ds, l-nth (current, 2));
			t3 := "i__sameValue" (de, l-nth (current, 3));
			t4 := "i__sameValue" (dc, l-nth (current, 4));

			goto [t1 and t2 and t3 and t4 and
			      (dv = $$empty) and (dw = $$empty)] acc_t l7;

	l7:		ct := l-nth (current, 0);
			cvg := l-nth (current, 1);
			cws := l-nth (current, 2);
			ce := l-nth (current, 3);
			cc := l-nth (current, 4);

			goto [(cc = $$f) and ((dc = $$t) or ((not (de = $$empty)) and (not (ce = de))))] reject l8;

	l8:		gd := "i__isGenericDescriptor" (desc);
			goto [gd] l12 l9;

	l9:		cdd := "i__isDataDescriptor" (current);
			ddd := "i__isDataDescriptor" (desc);

			goto [not (cdd = ddd)] l9a l10;

	l9a:	goto [cc = $$f] reject change;
	change:	goto [cdd = $$t] toa tod;
	toa:	goto [dg = $$empty] sg gs;
	sg:		dg := $$undefined;
	gs:		goto [ds = $$empty] ss ge1;
	ss:		ds := $$undefined;
	ge1:	goto [de = $$empty] se1 gc1;
	se1:	de := ce;
	gc1:	goto [dc = $$empty] sc1 spa;
	sc1:	dc := cc;
	spa:	[l, prop] := {{ "a", dg, ds, de, dc }};
			goto acc_t;

	tod:	goto [dv = $$empty] sv gw;
	sv:		dv := $$undefined;
	gw:		goto [dw = $$empty] sw ge2;
	sw:		dw := $$f;
	ge2:	goto [de = $$empty] se2 gc2;
	se2:	de := ce;
	gc2:	goto [dc = $$empty] sc2 spd;
	sc2:	dc := cc;
	spd:	[l, prop] := {{ "d", dv, dw, de, dc }};
			goto acc_t;

	l10:	goto [cdd = $$t] l10a l11;

	l10a:	goto [cc = $$f] l10ai l12;
	l10ai:	goto [(not (dw = $$empty)) and ((cws = $$f) and (dw = $$t))] reject l10aii;
	l10aii:	t1 := "i__sameValue" (cvg, dv);
			goto [(cws = $$f) and (not (dv = $$empty)) and (not t1)] reject l12;

	l11: 	t1 := "i__sameValue" (dg, l-nth (current, 1));
			t2 := "i__sameValue" (ds, l-nth (current, 2));
			goto [(cc = $$f) and
	             (((not (dg = $$empty)) and (not t1)) or
	              ((not (ds = $$empty)) and (not t2)))] reject l12;

	l12:	re := de;
			rc := dc;
			goto [de = $$empty] rec red;
	rec:	re := l-nth (current, 3);
	red:	goto [dc = $$empty] rcd rd;
	rcd:	rc := l-nth (current, 4);

	rd: 	goto [ct = "d"] l12d l12a;

	l12d:	rv := dv;
			rw := dw;
			goto [dv = $$empty] rvc rvd;
	rvc:	rv := l-nth (current, 1);
	rvd:	goto [dw = $$empty] rwd setd;
	rwd:	rw := l-nth (current, 2);
	setd:	[l, prop] := {{ "d", rv, rw, re, rc }};
			goto acc_t;

	l12a:	rg := dg;
			rs := ds;
			goto [dg = $$empty] rgc rgd;
	rgc:	rg := l-nth (current, 1);
	rgd:	goto [ds = $$empty] rsd seta;
	rsd:	rs := l-nth (current, 2);
	seta:	[l, prop] := {{ "a", rg, rs, re, rc }};
			goto acc_t;

	acc_t:	xret := $$t;
			goto rlab;

	acc_f:	xret := $$f;
	rlab:	skip;

	celab:	xerr := current;
			goto elab;

    reject: goto [throw] tt acc_f;
    tt:     xerr := "TypeError" ();
    elab:   skip
}
with
{
	ret: xret, rlab;
	err: xerr, elab;
};

(* *** *)
(* PUT *)
(* *** *)

	(* ******* UNSUCCESSFUL PUT ******* *)

	(*
	 *	1. Property is not defined in the prototype chain at all, object is not extensible, throw
	 *  2. Property is not defined in the prototype chain at all, object is not extensible, no throw
	 *  3. Property is defined in the object (DD), data descriptor is not writable, throw
	 *  4. Property is defined in the object (DD), data descriptor is not writable, no throw
	 *  5. Property is defined in the prototype chain, not in the object (DD), object is not extensible, throw
	 *  6. Property is defined in the prototype chain, not in the object (DD), object is not extensible, no throw
     *  7. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is not writable, throw
	 *  8. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is not writable, no throw
	 *)

	 (* ******* SUCCESSFUL PUT ******* *)

	(*
	 *	1. Property is not defined in the prototype chain at all, prototype chain of length = 1, object is extensible
	 *  2. Property is not defined in the prototype chain at all, prototype chain of length > 1, object is extensible
	 *  3. Property is defined in the object (DD), data descriptor is writable
     *  4. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is writable
	 *)

spec o__put (l, prop, value, throw)

	(* 1. Property is not defined within the prototype chain at all, object not extensible, throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$t) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   isTypeError(err) ]]
    error;

	(* 2. Property is not defined within the prototype chain at all, object not extensible, don't throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$f) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, $$undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal;

	(* 3. Property is defined in the object, data descriptor that is not writable, throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * desc_writ(#g_aux_3, $$f) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$t) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   isTypeError(err) ]]
    error;

	(* 4. Property is defined in the object, data descriptor that is not writable, don't throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * desc_writ(#g_aux_3, $$f) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$f) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, {{ #l }}, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal;

	(* 5. Property is defined in the prototype chain, not in the object, object not extensible, throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * (1 <# l-len (#g_aux_4)) * types (#g_aux_4 : $$list_type) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$t) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   isTypeError(err) ]]
    error;

	(* 6. Property is defined in the prototype chain, not in the object, object not extensible, don't throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) * (1 <# l-len (#g_aux_4)) * types (#g_aux_4 : $$list_type) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$f) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$f) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal;

	(* 7. Property is defined in the prototype chain, not in the object, object extensible, property not writable, throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) *  desc_writ(#g_aux_3, $$f) * (1 <# l-len (#g_aux_4)) * types (#g_aux_4 : $$list_type) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$t) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   isTypeError(err) ]]
    error;

	(* 8. Property is defined in the prototype chain, not in the object, object extensible, property not writable, don't throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   DataDescriptor(#g_aux_3) *  desc_writ(#g_aux_3, $$f) * (1 <# l-len (#g_aux_4)) * types (#g_aux_4 : $$list_type) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (#throw == $$f) ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    error;

    (* ******* SUCCESSFUL PUT ******* *)

	(* 9a. Property is not defined within the prototype chain, only one element, string *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, "base", "String", $$undefined, {{ #l }}, {{ $$t }}, #g_aux_6) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") ]]
	[[ Pi (#l, #prop, "base", "StringNSI", {{ "d", #value, $$t, $$t, $$t }}, {{ #l }}, {{ $$t }}, #g_aux_6) * ((#l, "@proto") -> $$null) *
       ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal;

	(* 9b. Property is not defined within the prototype chain, only one element, non-string *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, "base", "General", $$undefined, {{ #l }}, {{ $$f }}, {{ "" }}) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") ]]
	[[ Pi (#l, #prop, "base", "General", {{ "d", #value, $$t, $$t, $$t }}, {{ #l }}, {{ $$f }}, {{ "" }}) * ((#l, "@proto") -> $$null) *
       ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal;

	(* 11. Property is defined in the object, data descriptor that is writable, don't throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, #g_aux_1, #g_aux_2, {{ "d", #dval, $$t, #denum, #dconf }}, {{ #l }}, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> #ext) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") ]]
	[[ Pi (#l, #prop, #g_aux_1, #g_aux_2, {{ "d", #value, #dwrit, #denum, #dconf }}, {{ #l }}, #g_aux_5, #g_aux_6) *
	   ((#l, "@extensible") -> #ext) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal

	(* Property is not defined within the prototype chain, more than one element, non-string
	   Must reform the prototype chain manually in the post-condition, extra tricky

    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : $$object_type, #prop : $$string_type, #throw : $$boolean_type) *
       Pi (#l, #prop, "inductive", "General", $$undefined, (#l :: #llp), ($$f :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   types (#llp : $$list_type, #lp : $$object_type, #lsp : $$list_type, #ltf : $$list_type, #lpv : $$list_type) *
	   ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") ]]
	[[ Cell_o (#l, #prop, {{ "d", #value, $$t, $$t, $$t }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #g_aux_01, #g_aux_02, $$undefined, (#lp :: #lsp), #ltf, #lpv) *
       ((#l, "@extensible") -> $$t) * ((#l, "@canPut") -> "o__canPut") * ((#l, "@defineOwnProperty") -> "o__defineOwnProperty") *
	   (ret == $$empty) ]]
    normal *)

proc o__put (l, prop, value, throw) {
			cp := [l, "@canPut"];
            xret := cp (l, prop) with elab;
            goto [xret] cp reject;

			[* unfold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
    cp:     gop := [l, "@getOwnProperty"];
    		xret := gop (l, prop) with elab;
    		dd := "i__isDataDescriptor" (xret);
    		goto [dd] dd gp;

    dd:		desc := {{ "g", $$empty, $$empty, value, $$empty, $$empty, $$empty }};
    		dop := [l, "@defineOwnProperty"];
    		xret := dop (l, prop, desc, throw) with elab;
    		goto remp;

    gp:		gp := [l, "@getProperty"];
			[* fold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
    		xret := gp (l, prop) with elab;
    		ad := "i__isAccessorDescriptor" (xret);
    		goto [ad] ad def;

    ad:		s := l-nth (xret, 2);
    		xsc := [s, "@scope"];
    		fun := [s, "@call"];
    		xret := fun (xsc, l, value) with elab;
    		goto remp;

			[* unfold Pi (#l, #prop, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4, #g_aux_5, #g_aux_6) *]
    def:	dop := [l, "@defineOwnProperty"];
    		desc := {{ "d", value, $$t, $$t, $$t }};
    		xret := dop (l, prop, desc, throw) with elab;

			(* Here, the property MUST have been defined, since canPut returned true - or not, we'll see later *)
			[* fold Pi (#l, #prop, #g_aux_new_1, #g_aux_new_2, {{ "d", #value, $$t, $$t, $$t }}, {{ #l }}, #g_aux_new_3, #g_aux_new_4) *]
    remp:   xret := $$empty;
    rlab:   skip;

    reject: xret := $$empty;
			goto [throw] tt rlab;

    tt:     xret := "TypeError" ();
    elab:   skip
}
with
{
    ret: xret, rlab;
    err: xret, elab;
};


(* ******** *)
(* PUTVALUE *)
(* ******** *)

spec i__putValue (v, w)
    [[ v == $$undefined ]]
    [[ isReferenceError(err) ]]
    error;
    [[ v == $$null ]]
    [[ isReferenceError(err) ]]
    error;
    [[ types (v : $$string_type) ]]
    [[ isReferenceError(err) ]]
    error;
    [[ types (v : $$int_type) ]]
	[[ isReferenceError(err) ]]
	error;
    [[ types (v : $$boolean_type) ]]
    [[ isReferenceError(err) ]]
    error;
    [[ types (v : $$string_type) ]]
    [[ isReferenceError(err) ]]
    error

proc i__putValue (v, w) {

			goto [(typeOf(v) = $$list_type)] ch1 throw;
	ch1:	goto [((l-nth (v, 0) = "v") or (l-nth (v, 0) = "o"))] init throw;

	init:	rbase := l-nth (v, 1);
			rfield := l-nth (v, 2);
			goto [rbase = $$undefined] throw prim;

	prim:	prim := "i__isPrimitive" (rbase);
            goto [prim] is_pr refr;

	refr:	goto [(typeOf(v) = $$list_type) and (l-nth (v, 0) = "o")] oref vref;

	oref:	p := [rbase, "@put"];
			xret := p (rbase, rfield, w, $$t) with elab;
			goto dflt;

	vref:	goto [rbase = $lg] lg er;

	lg:		p := [$lg, "@put"];
			xret := p (rbase, rfield, w, $$t) with elab;
			goto dflt;

	er:		[rbase, rfield] := w;

	dflt:	xret := $$empty;
	rlab:	skip;

	throw:  xret := "ReferenceError" ();
    elab:   skip;

    		(* WHY GOD, WHY THIS? *)

	is_pr:	xret := "i__toObject" (rbase) with elab;
			l := xret;
    		cp := [l, "@canPut"];
            xret := cp (l, rfield) with elab;
            goto [xret] cp reject;

    cp:     gp := [l, "@getProperty"];
    		xret := gp (l, rfield) with elab;
    		dd := "i__isDataDescriptor" (xret);
    		goto [dd] reject is_ad;

   	is_ad: 	ad := "i__isAccessorDescriptor" (xret);
    		goto [ad] ad reject;

    ad:		s := l-nth (xret, 2);
    		xsc := [s, "@scope"];
    		fun := [s, "@call"];
    		xret := fun (xsc, rbase, w) with elab;
    		goto dflt;

    reject: xret := "TypeError" ();
    		goto elab
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};
