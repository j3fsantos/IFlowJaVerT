[[ (l, prop) -> None   ]], [[ (l, prop) -> None   * xret .= $$empty ]]
[[ (l, prop) -> Some v ]], [[ (l, prop) -> Some v * xret .= v ]]
, [[ not (hasField(l, prop)) * xret = $$empty ]]
proc getOwnProperty (l, prop) {
	x := hasField(l, prop);
	goto [not x] 1 3;
	xret := $$empty;	
	goto 2;
	xret := [l, prop];
	skip;
}
with
{
	ret: xret, 5;
};


proc getProperty (l, prop)
{
	xret := protoField(l, prop);
	goto [not (xret = $$empty)] 1 2;
	xret := [l, prop];
	skip;
}
with
{
	ret: xret, 3;
};



proc get (l, prop)
{
	x := "getProperty" (l, prop) with 3;
	xret := x;
	skip;
	skip
}
with
{
	ret: xret, 2;
};



proc canPut (l, prop)
{
	x := "getOwnProperty" (l, prop) with 6;
	goto [not (x = $$undefined)] 1 3;
		xret := true;
		goto 5;
		xret := [l, "#extensible"];
	skip;
	skip;
}
with
{
	ret: xret, 5;
	err: xret, 6;
}



proc put (l, prop, v, t)
 {
	xret := $$empty;
	x := "canPut" (l, prop) with 6;
	goto [x = false] 1 2;
		goto [t = true] 5 6;
		[l, prop] := v;
	skip;
	skip;
} 
with 
{
	ret: xret, 5;
	err: xret, 6;
}