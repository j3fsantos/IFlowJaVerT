import Internals;

(* ****************** *) 
(* THE STRING LIBRARY *)
(* ****************** *) 

(* *** GETOWNPROPERTY *** *)

proc s__getOwnProperty (l, prop) {
			xret := "o__getOwnProperty" (l, prop);
			goto [xret = $$undefined] str rlab;
			
	str:	idx := string_to_num prop;
			goto [idx < 0] rlab next;
			
	next:	idx := num_to_int idx;
			sidx := num_to_string (idx);
	
			goto [sidx = prop] index rlab;
	
	index:	str := [l, "@primitiveValue"];
			len := "o__get" (l, "length");
			goto [len <= idx] rlab return;
			
	return: rstr := nth (str, idx);
			xret := {{ "d", rstr, $$f, $$t, $$f }};
	
	rlab: 	skip
}
with
{
	ret: xret, rlab;
};

(* *** CALL *** *)

proc String_call (xsc, vthis, s) {
			la := args;
			len := length (la);
			
			goto [len < 3] empty to_str;
	
	empty:	xret := "";
			goto rlab;
	
	to_str:	xret := "i__toString" (s) with elab;
			
	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
};

(* *** CONSTRUCT *** *)

proc String_construct (xsc, vthis, s) {
			la := args;
			len := length (la);
			
			goto [len < 3] empty to_str;
	empty:	pv := ""; 
			goto norm;
	to_str:	pv := "i__toString" (s) with elab;

	norm:	xret := new ();
			xret := "create_default_object" (xret, $lstr_proto, "String", $$t);
			s := xret;
			
			[s, "@getOwnProperty"] := "s__getOwnProperty";
			[s, "@primitiveValue"] := pv;
			
			len := length (pv);
			
			dop := [s, "@defineOwnProperty"];
			xret := dop (s, "length", {{ "d", len, $$f, $$f, $$f }}, $$t) with elab; 
			xret := s;
			
	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

(* *** VALUEOF *** *)

proc SP_valueOf (xsc, vthis) {
			goto [typeOf (vthis) = $$string_type] str iostr;
	str:	xret := vthis;
			goto rlab;
			
	iostr:	goto [typeOf (vthis) = $$object_type] ostr throw;
	ostr:	xret := [vthis, "@class"];
			goto [xret = "String"] retstr throw;
	retstr:	xret := [vthis, "@primitiveValue"];
			
	rlab:	skip;
	
	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

(* *** TOSTRING *** *)

proc SP_toString (xsc, vthis) {
			goto [typeOf (vthis) = $$string_type] str iostr;
	str:	xret := vthis;
			goto rlab;
			
	iostr:	goto [typeOf (vthis) = $$object_type] ostr throw;
	ostr:	xret := [vthis, "@class"];
			goto [xret = "String"] retstr throw;
	retstr:	xret := [vthis, "@primitiveValue"];
			
	rlab:	skip;
	
	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
}