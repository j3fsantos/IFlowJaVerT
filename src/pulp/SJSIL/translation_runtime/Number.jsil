import Internals;

(* ****************** *)
(* THE NUMBER LIBRARY *)
(* ****************** *)

(* *** CALL *** *)

proc Number_call (xsc, vthis, v) {
			la := args;
			len := l-len (la);

			goto [len < 3] zero rlab;

	zero:	v := 0;

	rlab:	xret := "i__toNumber" (v) with elab;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

(* *** CONSTRUCT *** *)

proc Number_construct (xsc, vthis, v) {
			la := args;
			len := l-len (la);

			goto [len < 3] zero init;

	zero:	v := 0;

	init:	pv := "i__toNumber" (v) with elab;

			xret := new ();
			xret := "create_default_object" (xret, $lnum_proto, "Number", $$t);

			[xret, "@primitiveValue"] := pv;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: pv, elab;
};

(* *** VALUEOF *** *)

proc NP_valueOf (xsc, vthis) {
			goto [typeOf (vthis) <: $$number_type] num ionum;
	num:	xret := vthis;
			goto rlab;

	ionum:	goto [typeOf (vthis) = $$object_type] onum throw;
	onum:	xret := [vthis, "@class"];
			goto [xret = "Number"] retnum throw;
	retnum:	xret := [vthis, "@primitiveValue"];

	rlab:	skip;

	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

(* *** TOSTRING *** *)

proc NP_toString (xsc, vthis, radix) {
			goto [typeOf (vthis) <: $$number_type] num ionum;
	num:	xret := vthis;
			goto retstr;

	ionum:	goto [typeOf (vthis) = $$object_type] onum throw;
	onum:	xret := [vthis, "@class"];
			goto [xret = "Number"] retnum throw;
	retnum:	xret := [vthis, "@primitiveValue"];
	retstr:	xret := num_to_string (xret);

	rlab:	skip;

	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};
