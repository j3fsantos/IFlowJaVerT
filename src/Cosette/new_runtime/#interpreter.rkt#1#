#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.8 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 4372 0 28 3 13 #"#lang rosette"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #" "
0 0 19 3 15 #"\"mem_model.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"wp.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"util.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 4 #"file"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"assertions.rkt\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"success"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"global-outcome"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"failure"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"print-cmds"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"max-depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"generate-tabs"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"tab"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"    \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 8 #"new-tabs"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"new-tabs"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 3 #"tab"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-tabs"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #") "
0 0 21 3 2 #"42"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 17 3 56 #";;(when (and print-cmds (<= call-stack-depth max-depth))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 17 3 48 #";;(let* ((tabs (generate-tabs call-stack-depth))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 17 3 2 #";;"
0 1 17 65 1 #"\t"
0 0 17 3 50 #"(new-str (string-append tabs proc-name \": \" str)))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 17 3 22 #";;(println new-str))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SSkip      ()                  'skip       DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; Assignment (var, expr)         'v-assign   DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SNew       (var)               'new        DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SLookup    (var, loc, field)   'h-read     DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SMutation  (loc, field, value) 'h-assign   DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SDelete    (loc, field)        'h-delete   DONE"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";; SHasField  (var, loc, field)   'has-field  DONE"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; SGetFields (var, loc)          'get-fields "
0 0 24 29 1 #"\n"
0 0 17 3 44 #";; SArguments (var)               'arguments"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 4 #";; +"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; 'assume"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";; 'assert"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";; 'discharge"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";; !!!!! RETURNS A HEAP AND A STORE !!!!!"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-bcmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 8 #"cmd-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 10 #";; ('skip)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"skip\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 15 #";; ('discharge)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"discharge"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 19 3 11 #"\"discharge\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 14 #"jsil-discharge"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 23 #";; ('h-assign e1 e2 e3)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"h-assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"loc-expr"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"rhs-expr"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"prop-val"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"rhs-val"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"rhs-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"heap"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"mutate-heap"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 72
(
 #";; (println (format \"Mutation: [~v, ~v] = ~v\" loc-val prop-val rhs"
 #"-val))"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"[~v, ~v] := ~v\""
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"rhs-expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 24 #";; ('v-assign lhs-var e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"v-assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"rhs-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"rhs-val"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"rhs-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 5 #"    ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 59
#";; (println (format \"Assignment: ~v = ~v\" lhs-var rhs-val))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"~v := ~v\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 17 #";; ('new lhs-var)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"new"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-new-loc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"heap"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"mutate-heap"
0 0 24 3 2 #"  "
0 0 14 3 4 #"heap"
0 0 24 3 2 #"  "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 6 #"protop"
0 0 24 3 1 #" "
0 0 14 3 5 #"jnull"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"~v := new()\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 29 #";; ('has-field lhs-var e1 e2)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"has-field"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"loc-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"get-fields"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"is-js-field"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 11 #"is-js-field"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 104
(
 #";; (println (format \"Has-field: ~v = hf [~v, ~v] : ~v, ~v\" lhs-var"
 #" loc-val prop-val is-js-field result))"
) 0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 62
#";; (println (format \"object: ~v\" (heap-get-obj heap loc-val)))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 46 #";; (println (format \"proplist: ~v\" prop-list))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"~v := has-field(~v, ~v)\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 26 #";; ('get-fields lhs-var e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 10 #"get-fields"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"loc-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 3 #"obj"
0 0 24 3 2 #" ("
0 0 14 3 12 #"heap-get-obj"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"petar-get-fields"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"jsil-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 22 #"\"~v := get-fields(~v)\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 26 #";; ('h-read lhs-var e1 e2)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"h-read"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"loc-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 8 #"heap-get"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 82
(
 #";; (println (format \"Lookup: ~v = [~v, ~v] : ~v\" lhs-var loc-val p"
 #"rop-val result))"
) 0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"~v := [~v, ~v]\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 23 #";; ('arguments lhs-var)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"arguments"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 8 #"heap-get"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 10 #"larguments"
0 0 24 3 1 #" "
0 0 14 3 10 #"parguments"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 36 #";;(displayln \"you called arguments\")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 21 #";;(displayln result) "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #"))] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 20 #";; ('h-delete e1 e2)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"h-delete"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"loc-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"prop-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 9 #"prop-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 17 3 48 #";;(println (format \"the current heap: ~v\" heap))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"heap"
0 0 24 3 2 #" ("
0 0 14 3 16 #"heap-delete-prop"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"delete(~v, ~v)\""
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 1 #" "
0 0 14 3 8 #"prop-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 21 #";; ('delete-object e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"delete-object"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"loc-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"loc-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"heap"
0 0 24 3 2 #" ("
0 0 14 3 18 #"heap-delete-object"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"delete-object(~v)\""
0 0 24 3 1 #" "
0 0 14 3 7 #"loc-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #";; ('assert e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"assert"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"expr-arg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"assert(~v)\""
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"op-assert"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #";; ('assume e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"assume"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 8 #"expr-arg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"assume(~v)\""
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"op-assume"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 13 #";; ('success)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"success"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Terminated: success\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 45 #";(println (format \"Success was: ~v\" success))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"success"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 47 #";(println (format \"And now it is: ~v\" success))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 13 #";; ('failure)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"failure"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 21 #"\"Terminated: failure\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 45 #";(println (format \"Failure was: ~v\" failure))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"failure"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 47 #";(println (format \"And now it is: ~v\" failure))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 16 #";; ('assert-* a)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"assert-*"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"assert-*(~v)\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"sep-assert"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"bcmd"
0 0 24 3 2 #") "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")] "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 5 #"print"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"Illegal Basic Command\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"goto-limit"
0 0 24 3 1 #" "
0 0 21 3 3 #"100"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"goto-stack"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-parameter"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-goto"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"key"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 23 #";; (print (goto-stack))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"count"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"goto-stack"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"kill"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 12 #"union-guards"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-prev-phi-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 65
#"\"Misplaced PSI node - every PSI node must have a PHI predecessor\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 12 #"v-phi-assign"
0 0 24 3 2 #") "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 12 #"v-psi-assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 17 #"find-prev-phi-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"#t"
0 0 24 3 2 #" ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 83
(
 #"\"A Psi node must have always have a PHI node between itself and the"
 #" other commands\""
) 0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"compute-next-prev"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 18 #"get-number-of-cmds"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    (("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #"))) "
0 0 21 3 1 #"'"
0 0 14 3 12 #"v-psi-assign"
0 0 24 3 2 #") "
0 0 14 3 10 #"prev-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"print-cmd"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 6 #"union?"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 2 #"uc"
0 0 24 3 2 #" ("
0 0 14 3 14 #"union-contents"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"values"
0 0 24 3 2 #" ("
0 0 14 3 10 #"lht-values"
0 0 24 3 1 #" "
0 0 14 3 2 #"uc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 35 #"\"Union command, yippie woo hoo hoo\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"  ~v\""
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"iter"
0 0 24 3 1 #" "
0 0 14 3 6 #"values"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"process-proc-outcome"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 9 #"ctx-entry"
0 0 24 3 2 #" ("
0 0 14 3 17 #"get-top-ctx-entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 9 #"ctx-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 9 #"ctx-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 9 #"ctx-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 9 #"ctx-entry"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"err-label"
0 0 24 3 2 #" ("
0 0 14 3 5 #"fifth"
0 0 24 3 1 #" "
0 0 14 3 9 #"ctx-entry"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 56
#";;(displayln (format \"process-proc-outcome ~v\" outcome))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"err"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 9 #"err-label"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"ret: (error, ~v)\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 9 #"err-label"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"err"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"ret: (error, ~v)\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 63
#"\"Procedures that throw errors must be called with error labels\""
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"normal"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"ret: (normal, ~v)\""
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Illegal Procedure Outcome\""
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"err-label"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 26 #"has-racket-implementation?"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 34 #";; Procedure Implemented in Racket"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"encontrei um rosette model!!!\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 11 #"racket-proc"
0 0 24 3 2 #" ("
0 0 14 3 25 #"get-racket-implementation"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 7 #"outcome"
0 0 24 3 2 #" ("
0 0 14 3 5 #"apply"
0 0 24 3 1 #" "
0 0 14 3 11 #"racket-proc"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 9 #"new-store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 32 #";; Procedure Implemented in JSIL"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 9 #"new-store"
0 0 24 3 2 #" ("
0 0 14 3 15 #"proc-init-store"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 8 #"new-heap"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"mutate-heap"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 10 #"larguments"
0 0 24 3 1 #" "
0 0 14 3 10 #"parguments"
0 0 24 3 2 #" ("
0 0 14 3 14 #"make-jsil-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"new-ctx"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 17 3 48 #";(displayln \"I am going to create a context!!!\")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 14 #"push-ctx-entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 9 #"err-label"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 17 3 91
(
 #";(displayln (format \"New ctx: ~v. New store: ~v. arg-vals: ~v\" new"
 #"-ctx new-store arg-vals))"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-heap"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-store"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-ctx"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 18 #"run-cmds-iter-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 15 #"next-prev-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-proc-name-from-ctx"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"ret-var"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-ret-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 7 #"err-var"
0 0 24 3 2 #" ("
0 0 14 3 11 #"get-err-var"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 40 #";;(displayln \"I am in a marvellous phi\")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 84
(
 #";;(displayln (format \"cur_index: ~v, err_index: ~v\" cur-index (get"
 #"-err-index proc)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 124
(
 #";;(println (format \"So, proc: ~v, cur: ~v, ret: ~v, err: ~v\" proc-"
 #"name cur-index (get-ret-index proc) (get-err-index proc)))"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-ret-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"outcome"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"normal"
0 0 24 3 2 #" ("
0 0 14 3 9 #"store-get"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"ret-var"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 101
(
 #";(displayln (format \"about to finish executing proc ~v with store: "
 #"~v. ctx: ~v\" proc-name store ctx))"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-top-ctx?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"next-state"
0 0 24 3 2 #" ("
0 0 14 3 20 #"process-proc-outcome"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"new-ctx"
0 0 24 3 2 #" ("
0 0 14 3 13 #"pop-ctx-entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"new-store"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"prev-index"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-store"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 13 #"get-err-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 7 #"outcome"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"err"
0 0 24 3 2 #" ("
0 0 14 3 9 #"store-get"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"err-var"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"is-top-ctx?"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 10 #"next-state"
0 0 24 3 2 #" ("
0 0 14 3 20 #"process-proc-outcome"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"new-ctx"
0 0 24 3 2 #" ("
0 0 14 3 13 #"pop-ctx-entry"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"new-store"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 10 #"prev-index"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-state"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 9 #"new-store"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 15 #"next-prev-index"
0 0 24 3 5 #")])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 22 #"get-proc-name-from-ctx"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 8 #"get-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"cmd"
0 0 24 3 2 #" ("
0 0 14 3 7 #"get-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"cmd-type"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 16 #";;(println (pc))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";;(print-cmd cmd)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 111
(
 #";;(println (format \"Run-cmds-iter: procedure: ~v, index ~v, command"
 #" ~v, ctx: ~v\" proc-name cur-index cmd  ctx))"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #";; ('print e) "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"print"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 51 #";; (println (format \"Program Print:: ~v\" expr-val))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 12 #";; ('goto i)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"goto"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"goto ~v\""
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #") "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 16 #";; ('goto e i j)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"goto"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"then-label"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 10 #"else-label"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 24 #"\"goto [~v] ~v ~v --> ~v\""
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"then-label"
0 0 24 3 1 #" "
0 0 14 3 10 #"else-label"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 12 #"parameterize"
0 0 24 3 3 #" (["
0 0 14 3 10 #"goto-stack"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #") ("
0 0 14 3 10 #"goto-stack"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 47 #"; (println (format \"branching on ~v\" expr-val))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 59
#";[(and (symbolic? expr-val) (equivalent-to-true? expr-val))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 65
#"; (run-cmds-iter prog proc-name heap store then-label cur-index)]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 60
#";[(and (symbolic? expr-val) (equivalent-to-false? expr-val))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 17 3 65
#"; (run-cmds-iter prog proc-name heap store else-label cur-index)]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 9 #"symbolic?"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 10 #"count-goto"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #") "
0 0 14 3 10 #"goto-limit"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 19 3 60
#"\"I am killing an execution because I reached the goto limit\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"kill"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 10 #"then-label"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"expr-val"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"run-cmds-iter"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 10 #"else-label"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 32 #"\"Illegal Conditional Goto Guard\""
0 0 24 3 6 #")])))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 33 #";; ('v-phi-assign x v1 v2 ... vn)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"v-phi-assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 8 #"var-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"var-index"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"wp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 10 #"target-var"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"var-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 9 #"next-prev"
0 0 24 3 2 #" ("
0 0 14 3 17 #"compute-next-prev"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 18 #"run-cmds-iter-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-prev"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 45 #";;  ('v-psi-assign var var_1 var_2 ... var_n)"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 12 #"v-psi-assign"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 8 #"var-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 12 #"ac-cur-index"
0 0 24 3 2 #" ("
0 0 14 3 17 #"find-prev-phi-cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"var-index"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"wp"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 1 #" "
0 0 14 3 12 #"ac-cur-index"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"target-var"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"var-list"
0 0 24 3 1 #" "
0 0 14 3 9 #"var-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 10 #"target-var"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 9 #"next-prev"
0 0 24 3 2 #" ("
0 0 14 3 17 #"compute-next-prev"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 10 #"prev-index"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 12 #"mutate-store"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"run-cmds-iter-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"next-prev"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                              "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 34 #";; ('call lhs-var e (e1 ... en) i)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 8 #"cmd-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"call"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"lhs-var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"proc-name-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"arg-exprs"
0 0 24 3 2 #" ("
0 0 14 3 6 #"fourth"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"err-label"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 3 #") ("
0 0 14 3 5 #"fifth"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 2 #") "
0 0 14 3 4 #"null"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 14 #"call-proc-name"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 14 #"proc-name-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")) "
0 0 14 3 9 #"arg-exprs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 34 #";; (newline (current-output-port))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 82
(
 #";; (println (format \"~v : Procedure call: ~v (~v)\" depth call-proc"
 #"-name arg-vals))"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"depth"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 10 #"print-info"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"~v :=~v~v -> ?\""
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 14 #"call-proc-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"run-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 14 #"call-proc-name"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 7 #"lhs-var"
0 0 24 3 1 #" "
0 0 14 3 8 #"arg-vals"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"err-label"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"             "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 16 #";; basic command"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-bcmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 9 #"proc-name"
0 0 24 3 1 #" "
0 0 14 3 3 #"cmd"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"heap"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"store"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 18 #"run-cmds-iter-next"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ctx"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 1 #" "
0 0 14 3 9 #"cur-index"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 40 #";;(println (format \"run-expr: ~v\" expr))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 11 #";; literals"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 8 #"literal?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval_literal"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 12 #";; variables"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 4 #"var?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #") ("
0 0 14 3 9 #"store-get"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 17 #";; symbolic value"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 9 #"symbolic?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 4 #"expr"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 3 #";; "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 14 #";; ('typeof e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 6 #"typeof"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 3 #"arg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 23 #";; for*/all ([val val])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"type-of"
0 0 24 3 2 #" ("
0 0 14 3 12 #"jsil-type-of"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"tabs"
0 0 24 3 2 #" ("
0 0 14 3 13 #"generate-tabs"
0 0 24 3 1 #" "
0 0 14 3 16 #"call-stack-depth"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 7 #"new-str"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 4 #"tabs"
0 0 24 3 1 #" "
0 0 19 3 4 #"\": \""
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"typeOf: typeof ~v -> ~v = ~v\""
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 7 #"type-of"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 17 3 20 #";; (println new-str)"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 7 #"type-of"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 17 #";; ('jsil-list l)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 9 #"jsil-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 2 #" ("
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"elist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"lexpr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 2 #"ac"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 2 #"ac"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 24 3 3 #" ) "
0 0 14 3 5 #"elist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               )"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"jsil-list"
0 0 24 3 1 #" "
0 0 14 3 5 #"lexpr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        )]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 15 #";; ('l-nth l e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"l-nth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 5 #"elist"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"eidx"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 5 #"vlist"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 5 #"elist"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"vidx"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"eidx"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 17 3 27 #";; for*/all ([vlist vlist])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 24 3 1 #" "
0 0 14 3 5 #"vlist"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"vlist"
0 0 24 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"vidx"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"println"
0 0 24 3 2 #" ("
0 0 14 3 6 #"format"
0 0 24 3 1 #" "
0 0 19 3 27 #"\"Illegal l-nth. l:~v; e:~v\""
0 0 24 3 1 #" "
0 0 14 3 5 #"vlist"
0 0 24 3 1 #" "
0 0 14 3 4 #"vidx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 29 #"\"Illegal list given to l-nth\""
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 15 #";; ('s-nth s e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 5 #"s-nth"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"estr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"vstr"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"estr"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"eidx"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"vidx"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"run-expr"
0 0 24 3 1 #" "
0 0 14 3 4 #"eidx"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"string?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vstr"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"string-at"
0 0 24 3 1 #" "
0 0 14 3 4 #"vstr"
0 0 24 3 2 #" ("
0 0 14 3 14 #"inexact->exact"
0 0 24 3 1 #" "
0 0 14 3 4 #"vidx"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 31 #"\"Illegal string given to s-nth\""
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 33 #";; (make-symbol-number symb-name)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 18 #"make-symbol-number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"constant"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 8 #"integer?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 33 #";; (make-symbol-string symb-name)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 18 #"make-symbol-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 8 #"constant"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 7 #"string?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 34 #";; (make-untyped-symbol symb-name)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 18 #"make-symbol-string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 14 #";; (binop e e)"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"and"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"larg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"larg"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"rarg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rarg"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           [("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 2 #"or"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"larg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"larg"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"rarg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"rarg"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"binop"
0 0 24 3 2 #" ("
0 0 14 3 12 #"to-interp-op"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"larg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"rarg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"third"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"apply-binop"
0 0 24 3 1 #" "
0 0 14 3 5 #"binop"
0 0 24 3 1 #" "
0 0 14 3 4 #"larg"
0 0 24 3 1 #" "
0 0 14 3 4 #"rarg"
0 0 24 3 6 #"))]))]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 11 #";; (unop e)"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 4 #"unop"
0 0 24 3 2 #" ("
0 0 14 3 12 #"to-interp-op"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 3 #"arg"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-expr"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 4 #"expr"
0 0 24 3 2 #") "
0 0 14 3 5 #"store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 10 #"apply-unop"
0 0 24 3 1 #" "
0 0 14 3 4 #"unop"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"       )]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"terminate"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 1 24 65 1 #"\t"
0 0 24 3 2 #"[("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"err"
0 0 24 3 3 #") ("
0 0 14 3 4 #"exit"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 1 24 65 1 #"\t"
0 0 24 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exit"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"run-program"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 14 #"jsil-discharge"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 7 #"outcome"
0 0 24 3 2 #" ("
0 0 14 3 8 #"run-proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"main\""
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 15 #"outcome-success"
0 0 24 3 2 #" ("
0 0 14 3 5 #"solve"
0 0 24 3 2 #" ("
0 0 14 3 6 #"assert"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-assumptions"
0 0 24 3 3 #") ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 7 #"success"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 15 #"get-assumptions"
0 0 24 3 2 #") "
0 0 14 3 7 #"success"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-assertions"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 44 #";;(outcome-failure (solve (assert failure)))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 75
(
 #";;(outcome-success-assume (solve (assert (and (get-assumptions) succ"
 #"ess))))"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 75
(
 #";;(outcome-failure-assume (solve (assert (and (get-assumptions) fail"
 #"ure))))"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 25 #";;(print \"Assumptions: \")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 29 #";;(println (get-assumptions))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 24 #";;(print \"Assertions: \")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 28 #";;(println (get-assertions))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #";;(print \"Success: \")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";;(println success)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 21 #";;(print \"Failure: \")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 19 #";;(println success)"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#";;(println (format \"Outcome Success: ~v\" outcome-success))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 58
#";;(println (format \"Outcome Failure: ~v\" outcome-failure))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 82
(
 #";;(println (format \"Outcome Success with assumptions: ~v\" outcome-"
 #"success-assume))"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 82
(
 #";;(println (format \"Outcome Failure with assumptions: ~v\" outcome-"
 #"failure-assume))"
) 0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 14 #"global-outcome"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 15 #"outcome-success"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"terminate"
0 0 24 3 1 #" "
0 0 14 3 7 #"outcome"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 1 #" "
0 0 14 3 11 #"run-program"
0 0 24 3 1 #" "
0 0 14 3 8 #"run-proc"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 9 #"procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"heap"
0 0 24 3 1 #" "
0 0 14 3 4 #"cell"
0 0 24 3 1 #" "
0 0 14 3 5 #"store"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 7 #"ret-ctx"
0 0 24 3 1 #" "
0 0 14 3 7 #"err-ctx"
0 0 24 3 1 #" "
0 0 14 3 6 #"jempty"
0 0 24 3 1 #" "
0 0 14 3 5 #"jnull"
0 0 24 3 1 #" "
0 0 14 3 10 #"jundefined"
0 0 24 3 1 #" "
0 0 14 3 6 #"protop"
0 0 24 3 1 #" "
0 0 14 3 14 #"get-assertions"
0 0 24 3 1 #" "
0 0 14 3 15 #"get-assumptions"
0 0 24 3 1 #" "
0 0 14 3 7 #"success"
0 0 24 3 1 #" "
0 0 14 3 7 #"failure"
0 0 24 3 1 #" "
0 0 14 3 14 #"global-outcome"
0 0 24 3 2 #") "
0 0 17 3 23 #";; jtrue jfalse protop)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";; (assertions-outcome (verify #:assume (assert (get-assumptions)) #"
 #":guarantee (assert success))))"
) 0           0
