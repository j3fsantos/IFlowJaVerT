
*********** Starting bi-abduction symbolic execution. ***********

----------------------------------
----------------------------------
Symbolic execution of main
----------------------------------
--0--
TIME: 1.372163
 ---- STATE: ---- 
Heap: 
	
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_0 := "setupInitialHeap"() 
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
----------------------------------
--1--
TIME: 1.376486
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_0: $$empty)
Pure Formulae: 	
Gamma: 	
	(x_0: $$empty_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_sc_0 := {{ $lg }}
----------------------------------
----------------------------------
--2--
TIME: 1.376611
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
Pure Formulae: 	
Gamma: 	
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x__this := $lg
----------------------------------
----------------------------------
--3--
TIME: 1.376727
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
Pure Formulae: 	
Gamma: 	
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: [$lg, "y"] := {{ "d", $$undefined, $$t, $$t, $$f }}
----------------------------------
Updtate-abs-heap. loc: $lg. field:"y". v:{{ "d", $$undefined, $$t, $$t, $$f }}----------------------------------
--4--
TIME: 1.376857
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
Pure Formulae: 	
Gamma: 	
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x__te := "TypeError"() 
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
----------------------------------
--5--
TIME: 1.377536
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__te: _$l_0)
Pure Formulae: 	
Gamma: 	
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x__se := "SyntaxError"() 
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
----------------------------------
--6--
TIME: 1.377866
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x__te: _$l_0)
Pure Formulae: 	
Gamma: 	
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(x__se: $$object_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_1_v := "i__getValue"(3.) with 16
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
anti_frame heap: 
	_$l_#obj |-> [(#field: #value), (default: $$unknown)]
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
----------------------------------
--7--
TIME: 1.379573
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x__te: _$l_0)
Pure Formulae: 	
Gamma: 	
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(x__se: $$object_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_2 := l-nth(x_sc_0, 0.)
----------------------------------
----------------------------------
--8--
TIME: 1.379737
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
Gamma: 	
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(x__se: $$object_type)
	(x_2: $$object_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_3 := {{ "v", x_2, "y" }}
----------------------------------
----------------------------------
--9--
TIME: 1.379901
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"y\": {{ \"d\", $$undefined, $$t, $$t, $$f }}), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Object\"), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
Gamma: 	
	(x_3: $$list_type)
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(x__se: $$object_type)
	(x_2: $$object_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_4 := "i__checkAssignmentErrors"(x_3) with 16
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
LIf. Time: 1.381071
LIf. Time: 1.381139
Fold. Time: 1.381209
----------------------------------
--10--
TIME: 1.382036
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(x_3: $$list_type)
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(#x2: $$list_type)
	(#x3: $$list_type)
	(x__se: $$object_type)
	(x_4: $$boolean_type)
	(x_2: $$object_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: Pi($lg, \"y\", {{ \"Object\" }}, {{ \"d\", $$undefined, $$t, $$t, $$f }}, {{ $lg }}, {{ $$f }}, {{ \"\" }})
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_5 := "i__putValue"(x_3, x_1_v) with 16
----------------------------------
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
I found the model: 

(define-fun _$l_3 () Extended_JSIL_Literal
  (Set (_ as-array k!275)))
(define-fun |_$l_#obj| () Extended_JSIL_Literal
  (Set (_ as-array k!276)))
(define-fun typeof ((x!0 Extended_JSIL_Literal)) JSIL_Type
  (ite (= x!0 (Elem Undefined)) UndefinedType
  (ite (= x!0 (Elem Null)) NullType
  (ite (= x!0 (Elem Empty)) EmptyType
    BooleanType))))
(define-fun k!275 ((x!0 JSIL_Literal)) Bool
  false)
(define-fun l-len ((x!0 JSIL_Literal_List)) Real
  0.0)
(define-fun k!276 ((x!0 JSIL_Literal)) Bool
  true)
(define-fun s-len ((x!0 Real)) Real
  0.0)
anti_frame heap: 
	_$l_#obj |-> [(#field: #oldvalue), (default: $$unknown)]
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
anti_frame heap: 
	_$l_#l |-> [("@extensible": #ext), (default: $$unknown)]
Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
LIf. Time: 1.399110
LIf. Time: 1.399251
RecUnfold. Time: 1.399388
----------------------------------
--11--
TIME: 1.400531
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(#x2: $$list_type)
	(#x3: $$list_type)
	(x__se: $$object_type)
	(x_4: $$boolean_type)
	(x_2: $$object_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: x_6 := $$empty
----------------------------------
----------------------------------
--12--
TIME: 1.400845
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: xret := x_6
----------------------------------
----------------------------------
--13--
TIME: 1.401243
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	_$l_0 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lterr_proto), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(#x2: $$list_type)
	(#x3: $$list_type)
	(x__se: $$object_type)
	(x_6: $$empty_type)
	(x_4: $$boolean_type)
	(x_2: $$object_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: deleteObject (x__te)
----------------------------------
----------------------------------
--14--
TIME: 1.401541
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	_$l_1 |-> [(\"@extensible\": $$t), (\"@class\": \"Error\"), (\"@proto\": $lserr_proto), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: deleteObject (x__se)
----------------------------------
----------------------------------
--15--
TIME: 1.401997
 ---- STATE: ---- 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_sc_0: $$list_type)
	(x_0: $$empty_type)
	(x__this: $$object_type)
	(x_1_v: $$number_type)
	(#x2: $$list_type)
	(#x3: $$list_type)
	(x__se: $$object_type)
	(x_6: $$empty_type)
	(x_4: $$boolean_type)
	(x_2: $$object_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
 -------- 
 ---- ANTI_FRAME: ----
Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
 -------- 
 CMD: skip
----------------------------------
About to bi-unify the current symb state against the posts. Here it is: Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 

Pfs to add to the antiframe after unify stores: 
Pfs to add to the antiframe after step 0: 
I AM in the case - fully unified with possible antiframe, MARICA!!!!
The substitution: Substitution: 
	#x4: #x4;
	 #x2: #x2;
	 #x3: #x3;
	 #x1: #x1;
	 #x0: #x0

Symb_state: Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 

anti_frame: Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 

Symb_state: Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 

anti_frame: Heap: 
	$lg |-> [(\"y\": _lvar_126), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 

Spec Var: ##s_0
Pre Spec Vars
Spec Var: #x0
Spec Var: #x1
Spec Var: #x2
Spec Var: #x3
Spec Var: #x4
Spec Var: x_0
Spec Var: x_5
Spec Var: x_6
Spec Var: xret

********** Finished bi-abduction symbolic execution. **********


**********    Starting normal symbolic execution.    **********

SPECS: 
i__sameValue
----------
[[ (v2 == $$undefined) * (v1 == $$undefined) * (#v2 == $$undefined) * (#v1 == $$undefined) * types(v2 : $$undefined_type, #v2 : $$undefined_type, v1 : $$undefined_type, #v1 : $$undefined_type) ]]
[[ (xret == $$t) * (#v2 == $$undefined) * (#v1 == $$undefined) * types(#v2 : $$undefined_type, xret : $$boolean_type, #v1 : $$undefined_type) ]]
Normal
[[ (v2 == $$null) * (v1 == $$null) * (#v2 == $$null) * (#v1 == $$null) * types(v2 : $$null_type, #v2 : $$null_type, v1 : $$null_type, #v1 : $$null_type) ]]
[[ (xret == $$t) * (#v2 == $$null) * (#v1 == $$null) * types(#v2 : $$null_type, xret : $$boolean_type, #v1 : $$null_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types(#v2 : $$boolean_type, #v1 : $$boolean_type) ]]
[[ (xret == $$t) * types(#v2 : $$boolean_type, #v1 : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types(#v2 : $$string_type, #v1 : $$string_type) ]]
[[ (xret == $$t) * types(#v2 : $$string_type, #v1 : $$string_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types(#v2 : $$object_type, #v1 : $$object_type) ]]
[[ (xret == $$t) * types(#v2 : $$object_type, #v1 : $$object_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (! (#v1 == #v2)) * types() ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (! (#v2 == 0.)) * (#v1 == #v2) * types(#v2 : $$number_type, #v1 : $$number_type) ]]
[[ (xret == $$t) * types(#v2 : $$number_type, #v1 : $$number_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == 0.) * (v2 == 0.) * types(v1 : $$number_type, v2 : $$number_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == 0.) * (v2 == -0.) * types(v1 : $$number_type, v2 : $$number_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == -0.) * (v2 == 0.) * types(v1 : $$number_type, v2 : $$number_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == -0.) * (v2 == -0.) * types(v1 : $$number_type, v2 : $$number_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal

ReferenceError
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

setupInitialHeap
----------
[[ empty_fields($lobj_proto : ) * empty_fields($lerr_proto : ) * empty_fields($lfun_proto : ) * empty_fields($lerr : ) * (($lg, "@class") -> None) * (($lg, "@proto") -> None) * (($lg, "@extensible") -> None) * types() ]]
[[ empty_fields($lfun_proto : "@class", "@proto", "@extensible", "@scope", "length", "@call") * (($lfun_proto, "@class") -> "Function") * (($lfun_proto, "@proto") -> $lobj_proto) * (($lfun_proto, "@extensible") -> $$t) * (($lfun_proto, "@scope") -> $$empty) * (($lfun_proto, "length") -> {{ "d", 0., $$f, $$f, $$f }}) * (($lfun_proto, "@call") -> "FP_default") * empty_fields($lerr : "@class", "@proto", "@extensible", "@scope", "length", "@call", "@construct", "prototype") * (($lerr, "@class") -> "Function") * (($lerr, "@proto") -> $lfun_proto) * (($lerr, "@extensible") -> $$t) * (($lerr, "@scope") -> $$empty) * (($lerr, "length") -> {{ "d", 1., $$f, $$f, $$f }}) * (($lerr, "@call") -> "Error_call") * (($lerr, "@construct") -> "Error_construct") * (($lerr, "prototype") -> {{ "d", $lerr_proto, $$f, $$f, $$f }}) * (($lg, "@class") -> "Object") * (($lg, "@proto") -> $lobj_proto) * (($lg, "@extensible") -> $$t) * (($lg, "Error") -> {{ "d", $lerr, $$t, $$f, $$t }}) * empty_fields($lobj_proto : "@class", "@proto", "@extensible") * (($lobj_proto, "@class") -> "Object") * (($lobj_proto, "@proto") -> $$null) * (($lobj_proto, "@extensible") -> $$t) * empty_fields($lerr_proto : "@class", "@proto", "@extensible", "message") * (($lerr_proto, "@class") -> "Error") * (($lerr_proto, "@proto") -> $lobj_proto) * (($lerr_proto, "@extensible") -> $$t) * (($lerr_proto, "message") -> {{ "d", "", $$t, $$f, $$t }}) * (xret == $$empty) * types(xret : $$empty_type) ]]
Normal

create_default_object
----------
[[ empty_fields(_$l_#l : ) * (l == _$l_#l) * (cl == $$undefined) * (ext == $$undefined) * (pr == #pr) * (#ext == $$undefined) * (#cl == $$undefined) * types(l : $$object_type, #cl : $$undefined_type, #l : $$object_type, cl : $$undefined_type, #ext : $$undefined_type, ext : $$undefined_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible") * ((_$l_#l, "@proto") -> #pr) * ((_$l_#l, "@class") -> "Object") * ((_$l_#l, "@extensible") -> $$t) * (xret == _$l_#l) * (#ext == $$undefined) * (#cl == $$undefined) * types(#cl : $$undefined_type, #l : $$object_type, #ext : $$undefined_type, xret : $$object_type) ]]
Normal
[[ empty_fields(_$l_#l : ) * (cl == #cl) * (l == _$l_#l) * (ext == #ext) * (pr == #pr) * types(#l : $$object_type, l : $$object_type, #cl : $$string_type, #ext : $$boolean_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible") * ((_$l_#l, "@proto") -> #pr) * ((_$l_#l, "@class") -> #cl) * ((_$l_#l, "@extensible") -> #ext) * (xret == _$l_#l) * types(#l : $$object_type, #cl : $$string_type, #ext : $$boolean_type, xret : $$object_type) ]]
Normal
[[ empty_fields(_$l_#l : "@proto") * ((_$l_#l, "@proto") -> $$null) * (l == _$l_#l) * (cl == $$undefined) * (ext == $$undefined) * (pr == #pr) * (#ext == $$undefined) * (#cl == $$undefined) * types(l : $$object_type, #cl : $$undefined_type, #l : $$object_type, cl : $$undefined_type, #ext : $$undefined_type, ext : $$undefined_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible") * ((_$l_#l, "@proto") -> #pr) * ((_$l_#l, "@class") -> "Object") * ((_$l_#l, "@extensible") -> $$t) * (xret == _$l_#l) * (#ext == $$undefined) * (#cl == $$undefined) * types(#cl : $$undefined_type, #l : $$object_type, #ext : $$undefined_type, xret : $$object_type) ]]
Normal
[[ empty_fields(_$l_#l : "@proto") * ((_$l_#l, "@proto") -> $$null) * (cl == #cl) * (l == _$l_#l) * (ext == #ext) * (pr == #pr) * types(#l : $$object_type, l : $$object_type, #cl : $$string_type, #ext : $$boolean_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible") * ((_$l_#l, "@proto") -> #pr) * ((_$l_#l, "@class") -> #cl) * ((_$l_#l, "@extensible") -> #ext) * (xret == _$l_#l) * types(#l : $$object_type, #cl : $$string_type, #ext : $$boolean_type, xret : $$object_type) ]]
Normal

TypeError_call
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

SyntaxError_call
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lserr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

i__getValue
----------
[[ (v == {{ "o", #obj, #field }}) * (! (#dval_39 == $$empty)) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (#g_aux_1 == {{ "d", #dval_39, #dwrit_39, #denum_39, #dconf_39 }}) * types(#denum_39 : $$boolean_type, #dwrit_39 : $$boolean_type, #field : $$string_type, #obj : $$object_type, #g_aux_1 : $$list_type, #dconf_39 : $$boolean_type, v : $$list_type) ]]
[[ (xret == #desc_val) * (#desc_val == l-nth(#g_aux_1, 1.)) * types(#denum_39 : $$boolean_type, #dwrit_39 : $$boolean_type, #field : $$string_type, #obj : $$object_type, #g_aux_1 : $$list_type, #dconf_39 : $$boolean_type) ]]
Normal
[[ ((_$l_#obj, #field) -> #value) * (v == {{ "v", _$l_#obj, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (! (_$l_#obj == $lg)) * types(#field : $$string_type, #obj : $$object_type, v : $$list_type) ]]
[[ ((_$l_#obj, #field) -> #value) * (xret == #value) * types(#field : $$string_type, #obj : $$object_type) ]]
Normal
[[ (v == {{ "v", $lg, #field }}) * (! (#dval_40 == $$empty)) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (#g_aux_1 == {{ "d", #dval_40, #dwrit_40, #denum_40, #dconf_40 }}) * types(#dwrit_40 : $$boolean_type, #field : $$string_type, #dconf_40 : $$boolean_type, #g_aux_1 : $$list_type, v : $$list_type, #denum_40 : $$boolean_type) ]]
[[ (xret == #desc_val) * (#desc_val == l-nth(#g_aux_1, 1.)) * types(#dwrit_40 : $$boolean_type, #field : $$string_type, #dconf_40 : $$boolean_type, #g_aux_1 : $$list_type, #denum_40 : $$boolean_type) ]]
Normal
[[ (v == {{ "o", #obj, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, #field : $$string_type, v : $$list_type, #obj : $$object_type) ]]
[[ (xret == $$undefined) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, #field : $$string_type, #obj : $$object_type, xret : $$undefined_type) ]]
Normal
[[ (v == {{ "v", $lg, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, #field : $$string_type, v : $$list_type) ]]
[[ (xret == $$undefined) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, #field : $$string_type, xret : $$undefined_type) ]]
Normal
[[ (v == $$null) * types(v : $$null_type) ]]
[[ (xret == $$null) * types(xret : $$null_type) ]]
Normal
[[ (v == #v) * types(#v : $$object_type) ]]
[[ (xret == #v) * types(#v : $$object_type) ]]
Normal
[[ (v == #v) * types(#v : $$number_type) ]]
[[ (xret == #v) * types(#v : $$number_type) ]]
Normal
[[ (v == #v) * types(#v : $$boolean_type) ]]
[[ (xret == #v) * types(#v : $$boolean_type) ]]
Normal
[[ (v == #v) * types(#v : $$string_type) ]]
[[ (xret == #v) * types(#v : $$string_type) ]]
Normal
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ (xret == $$undefined) * types(xret : $$undefined_type) ]]
Normal
[[ (v == {{ "o", $$undefined, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * types(#field : $$string_type, v : $$list_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#field : $$string_type, xret : $$object_type) ]]
Error
[[ (v == {{ "v", $$undefined, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * types(#field : $$string_type, v : $$list_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#field : $$string_type, xret : $$object_type) ]]
Error

create_object_with_call_construct
----------
[[ empty_fields(_$l_#l : "@proto") * ((_$l_#l, "@proto") -> $$null) * (call == #call) * (len == #len) * (construct == #construct) * (l == _$l_#l) * types(#l : $$object_type, l : $$object_type, #construct : $$string_type, #len : $$number_type, #call : $$string_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct") * ((_$l_#l, "@proto") -> $lfun_proto) * ((_$l_#l, "@class") -> "Function") * ((_$l_#l, "@extensible") -> $$t) * ((_$l_#l, "@scope") -> $$empty) * ((_$l_#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) * ((_$l_#l, "@call") -> #call) * ((_$l_#l, "@construct") -> #construct) * (xret == _$l_#l) * types(#l : $$object_type, #construct : $$string_type, #len : $$number_type, xret : $$object_type, #call : $$string_type) ]]
Normal
[[ empty_fields(_$l_#l : ) * (construct == $$empty) * (l == _$l_#l) * (call == #call) * (len == #len) * types(construct : $$empty_type, #len : $$number_type, l : $$object_type, call : $$string_type, len : $$number_type, #l : $$object_type, #call : $$string_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible", "@scope", "length", "@call") * ((_$l_#l, "@proto") -> $lfun_proto) * ((_$l_#l, "@class") -> "Function") * ((_$l_#l, "@extensible") -> $$t) * ((_$l_#l, "@scope") -> $$empty) * ((_$l_#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) * ((_$l_#l, "@call") -> #call) * (xret == _$l_#l) * types(#l : $$object_type, #len : $$number_type, xret : $$object_type, #call : $$string_type) ]]
Normal
[[ empty_fields(_$l_#l : ) * (call == #call) * (len == #len) * (construct == #construct) * (l == _$l_#l) * types(#l : $$object_type, l : $$object_type, #construct : $$string_type, #len : $$number_type, #call : $$string_type) ]]
[[ empty_fields(_$l_#l : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct") * ((_$l_#l, "@proto") -> $lfun_proto) * ((_$l_#l, "@class") -> "Function") * ((_$l_#l, "@extensible") -> $$t) * ((_$l_#l, "@scope") -> $$empty) * ((_$l_#l, "length") -> {{ "d", #len, $$f, $$f, $$f }}) * ((_$l_#l, "@call") -> #call) * ((_$l_#l, "@construct") -> #construct) * (xret == _$l_#l) * types(#l : $$object_type, #construct : $$string_type, #len : $$number_type, xret : $$object_type, #call : $$string_type) ]]
Normal

i__isDataDescriptor
----------
[[ (desc == $$undefined) * types(desc : $$undefined_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "d", #dval_18, #dwrit_18, #denum_18, #dconf_18 }}) * (! (#dval_18 == $$empty)) * types(#dwrit_18 : $$boolean_type, #denum_18 : $$boolean_type, #dconf_18 : $$boolean_type, desc : $$list_type) ]]
[[ (xret == $$t) * types(#dwrit_18 : $$boolean_type, #denum_18 : $$boolean_type, #dconf_18 : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_5, #gconf_5, $$empty, $$empty, #gget_5, #gset_5 }}) * (#gval_5 == $$empty) * (#gwrit_5 == $$empty) * types(desc : $$list_type, #gwrit_5 : $$empty_type, #gval_5 : $$empty_type) ]]
[[ (xret == $$f) * (#gval_5 == $$empty) * (#gwrit_5 == $$empty) * types(#gwrit_5 : $$empty_type, xret : $$boolean_type, #gval_5 : $$empty_type) ]]
Normal
[[ (desc == {{ "g", #genum_6, #gconf_6, #gval_6, #gwrit_6, #gget_6, #gset_6 }}) * (! (#gval_6 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_7, #gconf_7, #gval_7, #gwrit_7, #gget_7, #gset_7 }}) * (! (#gwrit_7 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal

ReferenceError_call
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

i__putValue
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ (v == $$null) * types(v : $$null_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ (v == _lvar_v) * types(_lvar_v : $$number_type, v : $$number_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ (v == _lvar_v) * types(_lvar_v : $$boolean_type, v : $$boolean_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ (v == _lvar_v) * types(_lvar_v : $$string_type, v : $$string_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ (v == _lvar_v) * types(_lvar_v : $$object_type, v : $$object_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lrferr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Error
[[ ((_$l_#obj, #field) -> #oldvalue) * (w == #w) * (v == {{ "v", _$l_#obj, #field }}) * (! (s-nth(#field, 0.) == "@")) * (! (#field == "")) * (! (_$l_#obj == $lg)) * types(#field : $$string_type, #obj : $$object_type, v : $$list_type) ]]
[[ ((_$l_#obj, #field) -> #w) * (xret == $$empty) * types(#field : $$string_type, #obj : $$object_type, xret : $$empty_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$f) * (v == {{ "o", _$l_#l, #prop }}) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$list_type, #l : $$object_type, #prop : $$string_type, v : $$list_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#cls : $$list_type, #l : $$object_type, #prop : $$string_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$f) * (v == {{ "o", _$l_#l, #prop }}) * (! (#dval_19 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#g_aux_1 == {{ "d", #dval_19, $$f, #denum_19, #dconf_19 }}) * (#dwrit_19 == $$f) * types(#dconf_19 : $$boolean_type, #cls : $$list_type, #l : $$object_type, #dwrit_19 : $$boolean_type, #denum_19 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, v : $$list_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#dconf_19 : $$boolean_type, #cls : $$list_type, #l : $$object_type, #dwrit_19 : $$boolean_type, #denum_19 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$f) * (v == {{ "o", _$l_#l, #prop }}) * (! (#dval_20 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#g_aux_1 == {{ "d", #dval_20, #dwrit_20, #denum_20, #dconf_20 }}) * types(#denum_20 : $$boolean_type, #dwrit_20 : $$boolean_type, #cls : $$list_type, #l : $$object_type, #dconf_20 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, v : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#denum_20 : $$boolean_type, #dwrit_20 : $$boolean_type, #cls : $$list_type, #l : $$object_type, #dconf_20 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$t) * (v == {{ "o", _$l_#l, #prop }}) * (! (#dval_21 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#dwrit_21 == $$f) * (#g_aux_1 == {{ "d", #dval_21, $$f, #denum_21, #dconf_21 }}) * types(#cls : $$list_type, #l : $$object_type, #dwrit_21 : $$boolean_type, #denum_21 : $$boolean_type, #dconf_21 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, v : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type) ]]
[[ ((_$l_#l, "@extensible") -> $$t) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#cls : $$list_type, #l : $$object_type, #dwrit_21 : $$boolean_type, #denum_21 : $$boolean_type, #dconf_21 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type) ]]
Error
[[ (($lg, "@extensible") -> $$f) * (v == {{ "v", $lg, #prop }}) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#prop : $$string_type, v : $$list_type) ]]
[[ (($lg, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#prop : $$string_type, xret : $$object_type) ]]
Error
[[ (($lg, "@extensible") -> $$f) * (v == {{ "v", $lg, #prop }}) * (! (#dval_22 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#dwrit_22 == $$f) * (#g_aux_1 == {{ "d", #dval_22, $$f, #denum_22, #dconf_22 }}) * types(#dwrit_22 : $$boolean_type, #denum_22 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dconf_22 : $$boolean_type, v : $$list_type) ]]
[[ (($lg, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#dwrit_22 : $$boolean_type, #denum_22 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dconf_22 : $$boolean_type, xret : $$object_type) ]]
Error
[[ (($lg, "@extensible") -> $$f) * (v == {{ "v", $lg, #prop }}) * (! (#dval_23 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#g_aux_2 == ($lg :: (#lp :: #other))) * (#g_aux_1 == {{ "d", #dval_23, #dwrit_23, #denum_23, #dconf_23 }}) * types(#denum_23 : $$boolean_type, #dconf_23 : $$boolean_type, #dwrit_23 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, v : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type) ]]
[[ (($lg, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#denum_23 : $$boolean_type, #dconf_23 : $$boolean_type, #dwrit_23 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type) ]]
Error
[[ (($lg, "@extensible") -> $$t) * (v == {{ "v", $lg, #prop }}) * (! (#dval_24 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#g_aux_2 == ($lg :: (#lp :: #other))) * (#g_aux_1 == {{ "d", #dval_24, $$f, #denum_24, #dconf_24 }}) * (#dwrit_24 == $$f) * types(#denum_24 : $$boolean_type, #dwrit_24 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, v : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, #dconf_24 : $$boolean_type) ]]
[[ (($lg, "@extensible") -> $$t) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#denum_24 : $$boolean_type, #dwrit_24 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type, #dconf_24 : $$boolean_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$t) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, #prop : $$string_type, v : $$list_type) ]]
[[ ((_$l_#l, "@proto") -> $$null) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#cls : $$string_type, #l : $$object_type, xret : $$empty_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$t) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, #llpv : $$list_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #prop : $$string_type, v : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type) ]]
[[ ((_$l_#l, "@proto") -> #lp) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type, #cls : $$string_type, #l : $$object_type, #lltf : $$list_type, xret : $$empty_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal
[[ (($lg, "@extensible") -> $$t) * (w == #w) * (v == {{ "v", $lg, #prop }}) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#llpv : $$list_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #prop : $$string_type, v : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type) ]]
[[ (($lg, "@proto") -> #lp) * (($lg, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type, #lltf : $$list_type, xret : $$empty_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> #ext) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#w == $$empty)) * (! (#dval == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, #dconf : $$boolean_type, #denum : $$boolean_type, #prop : $$string_type, v : $$list_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> #ext) * (xret == $$empty) * types(#denum : $$boolean_type, #cls : $$string_type, #l : $$object_type, #ext : $$boolean_type, xret : $$empty_type, #dconf : $$boolean_type, #prop : $$string_type) ]]
Normal
[[ (($lg, "@extensible") -> #ext) * (w == #w) * (v == {{ "v", $lg, #prop }}) * (! (#w == $$empty)) * (! (#dval == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#dconf : $$boolean_type, #denum : $$boolean_type, #prop : $$string_type, v : $$list_type, #ext : $$boolean_type) ]]
[[ (($lg, "@extensible") -> #ext) * (xret == $$empty) * types(#denum : $$boolean_type, #ext : $$boolean_type, xret : $$empty_type, #dconf : $$boolean_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$t) * (w == #w) * (v == {{ "o", _$l_#l, #prop }}) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dcconf : $$boolean_type, #llpv : $$list_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #dcenum : $$boolean_type, #prop : $$string_type, v : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type) ]]
[[ ((_$l_#l, "@proto") -> #lp) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #dcenum : $$boolean_type, #lp : $$object_type, #pv : $$string_type, #cls : $$string_type, #l : $$object_type, #lltf : $$list_type, #throw : $$boolean_type, xret : $$empty_type, #dcconf : $$boolean_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal
[[ (($lg, "@extensible") -> $$t) * (w == #w) * (v == {{ "v", $lg, #prop }}) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#throw : $$boolean_type, #dcconf : $$boolean_type, #llpv : $$list_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #dcenum : $$boolean_type, #prop : $$string_type, v : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type) ]]
[[ (($lg, "@proto") -> #lp) * (($lg, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #dcenum : $$boolean_type, #lp : $$object_type, #pv : $$string_type, #lltf : $$list_type, #throw : $$boolean_type, xret : $$empty_type, #dcconf : $$boolean_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal

put
----------
[[ ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == $$t) * types(#l : $$object_type, #throw : $$boolean_type, l : $$object_type, #prop : $$string_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#l : $$object_type, #throw : $$boolean_type, #prop : $$string_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == $$t) * (! (#dval_25 == $$empty)) * (#dwrit_25 == $$f) * (#g_aux_1 == {{ "d", #dval_25, $$f, #denum_25, #dconf_25 }}) * types(#denum_25 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, l : $$object_type, prop : $$string_type, #dconf_25 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dwrit_25 : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#denum_25 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, #dconf_25 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dwrit_25 : $$boolean_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == $$t) * (! (#dval_26 == $$empty)) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#g_aux_1 == {{ "d", #dval_26, #dwrit_26, #denum_26, #dconf_26 }}) * types(#denum_26 : $$boolean_type, #dconf_26 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_26 : $$boolean_type, l : $$object_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#denum_26 : $$boolean_type, #dconf_26 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_26 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == $$t) * (! (#dval_27 == $$empty)) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#dwrit_27 == $$f) * (#g_aux_1 == {{ "d", #dval_27, $$f, #denum_27, #dconf_27 }}) * types(#l : $$object_type, #throw : $$boolean_type, #dconf_27 : $$boolean_type, l : $$object_type, #denum_27 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #dwrit_27 : $$boolean_type, #g_aux_2 : $$list_type, #other : $$list_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$t) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#l : $$object_type, #throw : $$boolean_type, #dconf_27 : $$boolean_type, #denum_27 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #lp : $$object_type, #dwrit_27 : $$boolean_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == #throw) * (! (#cls == "Array")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, l : $$object_type, prop : $$string_type, #prop : $$string_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@proto") -> $$null) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, xret : $$empty_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == #throw) * (! (#cls == "Array")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #llpv : $$list_type, l : $$object_type, prop : $$string_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #prop : $$string_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@proto") -> #lp) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type, #cls : $$string_type, #l : $$object_type, #lltf : $$list_type, #throw : $$boolean_type, xret : $$empty_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> #ext) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == #throw) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#value == $$empty)) * (! (#dval == $$empty)) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf : $$boolean_type, l : $$object_type, prop : $$string_type, #denum : $$boolean_type, #prop : $$string_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> #ext) * (xret == $$empty) * types(#denum : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #ext : $$boolean_type, xret : $$empty_type, #dconf : $$boolean_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (value == #value) * (throw == #throw) * (! (#cls == "Array")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dcconf : $$boolean_type, #llpv : $$list_type, l : $$object_type, prop : $$string_type, #lltf : $$list_type, #tf : $$boolean_type, #pcls : $$string_type, #ocls : $$list_type, #dcenum : $$boolean_type, #prop : $$string_type, #lllp : $$list_type, #lp : $$object_type, #pv : $$string_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@proto") -> #lp) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$empty) * types(#ocls : $$list_type, #lllp : $$list_type, #dcenum : $$boolean_type, #lp : $$object_type, #pv : $$string_type, #cls : $$string_type, #l : $$object_type, #lltf : $$list_type, #throw : $$boolean_type, xret : $$empty_type, #dcconf : $$boolean_type, #tf : $$boolean_type, #prop : $$string_type, #pcls : $$string_type, #llpv : $$list_type) ]]
Normal

create_function_object
----------
[[ (call == #call) * (params == #params) * (construct == #construct) * (xsc == #xsc) * types(#xsc : $$list_type, #construct : $$string_type, #params : $$list_type, #call : $$string_type) ]]
[[ empty_fields(_$l_prototype : "@proto", "@class", "@extensible", "constructor") * ((_$l_prototype, "@proto") -> $lobj_proto) * ((_$l_prototype, "@class") -> "Object") * ((_$l_prototype, "@extensible") -> $$t) * ((_$l_prototype, "constructor") -> {{ "d", _$l_xret, $$t, $$f, $$t }}) * empty_fields(_$l_xret : "@proto", "@class", "@extensible", "@scope", "length", "@call", "@construct", "caller", "arguments", "prototype") * ((_$l_xret, "@proto") -> $lfun_proto) * ((_$l_xret, "@class") -> "Function") * ((_$l_xret, "@extensible") -> $$t) * ((_$l_xret, "@scope") -> #xsc) * ((_$l_xret, "length") -> {{ "d", (l-len #params), $$f, $$f, $$f }}) * ((_$l_xret, "@call") -> #call) * ((_$l_xret, "@construct") -> #construct) * ((_$l_xret, "caller") -> {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }}) * ((_$l_xret, "arguments") -> {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }}) * ((_$l_xret, "prototype") -> {{ "d", _$l_prototype, $$t, $$f, $$f }}) * (prototype == _$l_prototype) * (xret == _$l_xret) * (#len == (l-len #params)) * types(#l : $$object_type, prototype : $$object_type, #xsc : $$list_type, #construct : $$string_type, #params : $$list_type, #len : $$number_type, xret : $$object_type, #call : $$string_type) ]]
Normal

copy_object
----------
[[ ((_$l_#l, #f) -> #v) * (l == _$l_#l) * (fields == #fields) * (! (s-nth(#f, 0.) == "@")) * (! (#f == "")) * (#fields == {{ #f }}) * types(#fields : $$list_type, #f : $$string_type, l : $$object_type) ]]
[[ ((_$l_#l, #f) -> #v) * empty_fields(_$l_xret : #f, "@proto") * ((_$l_xret, #f) -> #v) * ((_$l_xret, "@proto") -> $$null) * (xret == _$l_xret) * types(#fields : $$list_type, #f : $$string_type, xret : $$object_type) ]]
Normal
[[ ((_$l_#l, #f1) -> #v1) * ((_$l_#l, "main") -> #v2) * (l == _$l_#l) * (fields == #fields) * (! (#f1 == "main")) * (! (s-nth(#f1, 0.) == "@")) * (! (#f1 == "")) * (#fields == {{ #f1, "main" }}) * types(#fields : $$list_type, l : $$object_type, #f1 : $$string_type) ]]
[[ ((_$l_#l, #f1) -> #v1) * ((_$l_#l, "main") -> #v2) * empty_fields(_$l_xret : #f1, "main", "@proto") * ((_$l_xret, #f1) -> #v1) * ((_$l_xret, "main") -> #v2) * ((_$l_xret, "@proto") -> $$null) * (xret == _$l_xret) * (! (#f1 == "main")) * types(#fields : $$list_type, #f1 : $$string_type, xret : $$object_type) ]]
Normal

get
----------
[[ (l == #l) * (prop == #prop) * (! (#dval_28 == $$empty)) * (#g_aux_1 == {{ "d", #dval_28, #dwrit_28, #denum_28, #dconf_28 }}) * types(#denum_28 : $$boolean_type, #l : $$object_type, #dconf_28 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dwrit_28 : $$boolean_type) ]]
[[ (xret == #desc_val) * (#desc_val == l-nth(#g_aux_1, 1.)) * types(#denum_28 : $$boolean_type, #l : $$object_type, #dconf_28 : $$boolean_type, #prop : $$string_type, #g_aux_1 : $$list_type, #dwrit_28 : $$boolean_type) ]]
Normal
[[ (l == #l) * (prop == #prop) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, l : $$object_type, prop : $$string_type, #l : $$object_type, #prop : $$string_type) ]]
[[ (xret == $$undefined) * (#g_aux_1 == $$undefined) * types(#g_aux_1 : $$undefined_type, #l : $$object_type, xret : $$undefined_type, #prop : $$string_type) ]]
Normal

o__defineOwnProperty
----------
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, l : $$object_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ empty_fields(_$l_xerr : "@proto", "@class", "@extensible") * ((_$l_xerr, "@proto") -> $lterr_proto) * ((_$l_xerr, "@class") -> "Error") * ((_$l_xerr, "@extensible") -> $$t) * ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (xerr == _$l_xerr) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, xerr : $$object_type, #prop : $$string_type, #desc : $$list_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, l : $$object_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (xret == $$f) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #prop : $$string_type, #desc : $$list_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_29 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (#desc == {{ "d", #dval_29, #dwrit_29, #denum_29, #dconf_29 }}) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_29 : $$boolean_type, l : $$object_type, #dwrit_29 : $$boolean_type, #prop : $$string_type, #dconf_29 : $$boolean_type, #desc : $$list_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> #desc) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$t) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_29 : $$boolean_type, #dwrit_29 : $$boolean_type, #prop : $$string_type, #dconf_29 : $$boolean_type, #desc : $$list_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> {{ "d", #dval_3_23, #dwrit_3_23, #denum_3_23, $$t }}) * ((_$l_#l, "@extensible") -> #ext) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_3_23 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_30 == $$empty)) * (#dconf_3_23 == $$t) * (#desc == {{ "d", #dval_30, #dwrit_30, #denum_30, #dconf_30 }}) * (#dcur == {{ "d", #dval_3_23, #dwrit_3_23, #denum_3_23, $$t }}) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_30 : $$boolean_type, l : $$object_type, #dconf_30 : $$boolean_type, #dwrit_3_23 : $$boolean_type, #denum_3_23 : $$boolean_type, #prop : $$string_type, #denum_30 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_23 : $$boolean_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> #desc) * ((_$l_#l, "@extensible") -> #ext) * (xret == $$t) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_30 : $$boolean_type, #dconf_30 : $$boolean_type, #dwrit_3_23 : $$boolean_type, #denum_3_23 : $$boolean_type, #prop : $$string_type, #denum_30 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_23 : $$boolean_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_24, #dwrit_3_24, #denum_3_24, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_24 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_31 == $$empty)) * (#dconf_3_24 == $$f) * (#desc == {{ "d", #dval_31, #dwrit_31, #denum_31, $$t }}) * (#dcur == {{ "d", #dval_3_24, #dwrit_3_24, #denum_3_24, $$f }}) * (#dconf_31 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_24 : $$boolean_type, #denum_3_24 : $$boolean_type, l : $$object_type, #dconf_3_24 : $$boolean_type, #dconf_31 : $$boolean_type, #denum_31 : $$boolean_type, #dwrit_31 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ empty_fields(_$l_xerr : "@proto", "@class", "@extensible") * ((_$l_xerr, "@proto") -> $lterr_proto) * ((_$l_xerr, "@class") -> "Error") * ((_$l_xerr, "@extensible") -> $$t) * ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xerr == _$l_xerr) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_24 : $$boolean_type, #denum_3_24 : $$boolean_type, #dconf_3_24 : $$boolean_type, #dconf_31 : $$boolean_type, #denum_31 : $$boolean_type, #dwrit_31 : $$boolean_type, xerr : $$object_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_25, #dwrit_3_25, #denum_3_25, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_25 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_32 == $$empty)) * (#dconf_3_25 == $$f) * (#desc == {{ "d", #dval_32, #dwrit_32, #denum_32, $$t }}) * (#dcur == {{ "d", #dval_3_25, #dwrit_3_25, #denum_3_25, $$f }}) * (#dconf_32 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_32 : $$boolean_type, #denum_3_25 : $$boolean_type, #dwrit_3_25 : $$boolean_type, #denum_32 : $$boolean_type, l : $$object_type, #prop : $$string_type, #dconf_32 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_25 : $$boolean_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_32 : $$boolean_type, #denum_3_25 : $$boolean_type, #dwrit_3_25 : $$boolean_type, #denum_32 : $$boolean_type, #prop : $$string_type, #dconf_32 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_25 : $$boolean_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_26, #dwrit_3_26, #denum_3_26, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_26 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#denum_33 == #denum_3_26)) * (! (#dval_33 == $$empty)) * (#desc == {{ "d", #dval_33, #dwrit_33, #denum_33, $$f }}) * (#dcur == {{ "d", #dval_3_26, #dwrit_3_26, #denum_3_26, $$f }}) * (#ed == #denum_33) * (#dconf_3_26 == $$f) * (#ec == #denum_3_26) * (#dconf_33 == $$f) * types(#dconf_33 : $$boolean_type, #ed : $$boolean_type, #dwrit_3_26 : $$boolean_type, #cls : $$string_type, #denum_3_26 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, l : $$object_type, #denum_33 : $$boolean_type, #ec : $$boolean_type, #dconf_3_26 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #dwrit_33 : $$boolean_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ empty_fields(_$l_xerr : "@proto", "@class", "@extensible") * ((_$l_xerr, "@proto") -> $lterr_proto) * ((_$l_xerr, "@class") -> "Error") * ((_$l_xerr, "@extensible") -> $$t) * ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xerr == _$l_xerr) * (! (#cls == "String")) * types(#dconf_33 : $$boolean_type, #ed : $$boolean_type, #dwrit_3_26 : $$boolean_type, #cls : $$string_type, #denum_3_26 : $$boolean_type, #l : $$object_type, #throw : $$boolean_type, #denum_33 : $$boolean_type, #ec : $$boolean_type, #dconf_3_26 : $$boolean_type, xerr : $$object_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #dwrit_33 : $$boolean_type, #ext : $$boolean_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_27, #dwrit_3_27, #denum_3_27, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_27 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#denum_34 == #denum_3_27)) * (! (#dval_34 == $$empty)) * (#dconf_3_27 == $$f) * (#desc == {{ "d", #dval_34, #dwrit_34, #denum_34, $$f }}) * (#dcur == {{ "d", #dval_3_27, #dwrit_3_27, #denum_3_27, $$f }}) * (#dconf_34 == $$f) * (#ed == #denum_34) * (#ec == #denum_3_27) * types(#ed : $$boolean_type, #dconf_34 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_27 : $$boolean_type, #denum_3_27 : $$boolean_type, l : $$object_type, #dconf_3_27 : $$boolean_type, #ec : $$boolean_type, #prop : $$string_type, #dwrit_34 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #denum_34 : $$boolean_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#ed : $$boolean_type, #dconf_34 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_27 : $$boolean_type, #denum_3_27 : $$boolean_type, #dconf_3_27 : $$boolean_type, #ec : $$boolean_type, #prop : $$string_type, #dwrit_34 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #denum_34 : $$boolean_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_28, $$f, #denum_35, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_28 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_35 == $$empty)) * (#dwrit_3_28 == $$f) * (#denum_3_28 == #denum_35) * (#desc == {{ "d", #dval_35, $$t, #denum_35, $$f }}) * (#dcur == {{ "d", #dval_3_28, $$f, #denum_35, $$f }}) * (#enum == #denum_35) * (#dconf_35 == $$f) * (#dconf_3_28 == $$f) * (#dwrit_35 == $$t) * types(#dwrit_35 : $$boolean_type, #dconf_3_28 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #denum_35 : $$boolean_type, l : $$object_type, #dconf_35 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #denum_3_28 : $$boolean_type, #dwrit_3_28 : $$boolean_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ empty_fields(_$l_xerr : "@proto", "@class", "@extensible") * ((_$l_xerr, "@proto") -> $lterr_proto) * ((_$l_xerr, "@class") -> "Error") * ((_$l_xerr, "@extensible") -> $$t) * ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xerr == _$l_xerr) * (! (#cls == "String")) * types(#dwrit_35 : $$boolean_type, #dconf_3_28 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #denum_35 : $$boolean_type, #dconf_35 : $$boolean_type, xerr : $$object_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #denum_3_28 : $$boolean_type, #dwrit_3_28 : $$boolean_type, #ext : $$boolean_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_29, $$f, #denum_36, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_29 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_36 == $$empty)) * (#dconf_36 == $$f) * (#denum_3_29 == #denum_36) * (#desc == {{ "d", #dval_36, $$t, #denum_36, $$f }}) * (#dcur == {{ "d", #dval_3_29, $$f, #denum_36, $$f }}) * (#dconf_3_29 == $$f) * (#enum == #denum_36) * (#dwrit_3_29 == $$f) * (#dwrit_36 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_29 : $$boolean_type, #enum : $$boolean_type, #denum_36 : $$boolean_type, l : $$object_type, #denum_3_29 : $$boolean_type, #dconf_36 : $$boolean_type, #dwrit_36 : $$boolean_type, #prop : $$string_type, #dconf_3_29 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dwrit_3_29 : $$boolean_type, #enum : $$boolean_type, #denum_36 : $$boolean_type, #denum_3_29 : $$boolean_type, #dconf_36 : $$boolean_type, #dwrit_36 : $$boolean_type, #prop : $$string_type, #dconf_3_29 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_30, $$t, #denum_37, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_3_30 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#dval_37 == $$empty)) * (#dconf_37 == $$f) * (#desc == {{ "d", #dval_37, #dwrit_37, #denum_37, $$f }}) * (#dcur == {{ "d", #dval_3_30, $$t, #denum_37, $$f }}) * (#enum == #denum_37) * (#denum_3_30 == #denum_37) * (#dwrit_3_30 == $$t) * (#dconf_3_30 == $$f) * types(#dconf_3_30 : $$boolean_type, #dwrit_37 : $$boolean_type, #denum_3_30 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dconf_37 : $$boolean_type, l : $$object_type, #denum_37 : $$boolean_type, #dwrit_3_30 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #desc) * (xret == $$t) * (! (#cls == "String")) * types(#dconf_3_30 : $$boolean_type, #dwrit_37 : $$boolean_type, #denum_3_30 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dconf_37 : $$boolean_type, #denum_37 : $$boolean_type, #dwrit_3_30 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_31, $$t, #denum_3_31, #dconf_3_31 }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_3_31 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#gval == $$empty)) * (#dwrit_3_31 == $$t) * (#dec == #denum_3_31) * (#desc == {{ "g", $$empty, $$empty, #gval, $$empty, $$empty, $$empty }}) * (#dcur == {{ "d", #dval_3_31, $$t, #denum_3_31, #dconf_3_31 }}) * (#dcc == #dconf_3_31) * types(#dconf_3_31 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_3_31 : $$boolean_type, l : $$object_type, #dec : $$boolean_type, #dwrit_3_31 : $$boolean_type, #dcc : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #gval, $$t, #dec, #dcc }}) * (xret == $$t) * types(#dconf_3_31 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_3_31 : $$boolean_type, #dec : $$boolean_type, #dwrit_3_31 : $$boolean_type, #dcc : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal

o__getOwnProperty
----------
[[ ((_$l_#l, #prop) -> None) * (l == _$l_#l) * (prop == #prop) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#l : $$object_type, l : $$object_type, #prop : $$string_type) ]]
[[ ((_$l_#l, #prop) -> None) * (xret == $$undefined) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#l : $$object_type, xret : $$undefined_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, #prop) -> {{ "d", #dval_3_34, #dwrit_3_34, #denum_3_34, #dconf_3_34 }}) * (l == _$l_#l) * (prop == #prop) * (! (#dval_3_34 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#dx == {{ "d", #dval_3_34, #dwrit_3_34, #denum_3_34, #dconf_3_34 }}) * types(#denum_3_34 : $$boolean_type, #l : $$object_type, #dx : $$list_type, l : $$object_type, #dwrit_3_34 : $$boolean_type, #dconf_3_34 : $$boolean_type, #prop : $$string_type) ]]
[[ ((_$l_#l, #prop) -> {{ "d", #dval_3_35, #dwrit_3_35, #denum_3_35, #dconf_3_35 }}) * (xret == #dx) * (! (#dval_3_35 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#dx == {{ "d", #dval_3_35, #dwrit_3_35, #denum_3_35, #dconf_3_35 }}) * types(#denum_3_34 : $$boolean_type, #l : $$object_type, #dx : $$list_type, #denum_3_35 : $$boolean_type, #dconf_3_35 : $$boolean_type, #dwrit_3_34 : $$boolean_type, #dconf_3_34 : $$boolean_type, #prop : $$string_type, #dwrit_3_35 : $$boolean_type) ]]
Normal

i__toPrimitive
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ (xret == $$undefined) * types(xret : $$undefined_type) ]]
Normal
[[ (v == $$null) * types(v : $$null_type) ]]
[[ (xret == $$null) * types(xret : $$null_type) ]]
Normal
[[ (v == #v) * types(#v : $$number_type) ]]
[[ (xret == #v) * types(#v : $$number_type) ]]
Normal
[[ (v == #v) * types(#v : $$boolean_type) ]]
[[ (xret == #v) * types(#v : $$boolean_type) ]]
Normal
[[ (v == #v) * types(#v : $$string_type) ]]
[[ (xret == #v) * types(#v : $$string_type) ]]
Normal

i__isGenericDescriptor
----------
[[ (desc == $$undefined) * types(desc : $$undefined_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "d", #dval_4, #dwrit_4, #denum_4, #dconf_4 }}) * (! (#dval_4 == $$empty)) * types(#dconf_4 : $$boolean_type, #denum_4 : $$boolean_type, #dwrit_4 : $$boolean_type, desc : $$list_type) ]]
[[ (xret == $$f) * types(#dconf_4 : $$boolean_type, #denum_4 : $$boolean_type, #dwrit_4 : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_0, #gconf_0, $$empty, $$empty, $$empty, $$empty }}) * (#gset_0 == $$empty) * (#gval_0 == $$empty) * (#gwrit_0 == $$empty) * (#gget_0 == $$empty) * types(#gget_0 : $$empty_type, #gval_0 : $$empty_type, desc : $$list_type, #gset_0 : $$empty_type, #gwrit_0 : $$empty_type) ]]
[[ (xret == $$t) * (#gset_0 == $$empty) * (#gval_0 == $$empty) * (#gwrit_0 == $$empty) * (#gget_0 == $$empty) * types(#gget_0 : $$empty_type, #gval_0 : $$empty_type, xret : $$boolean_type, #gset_0 : $$empty_type, #gwrit_0 : $$empty_type) ]]
Normal
[[ (desc == {{ "g", #genum_1, #gconf_1, #gval_1, #gwrit_1, #gget_1, #gset_1 }}) * (! (#gval_1 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_2, #gconf_2, #gval_2, #gwrit_2, #gget_2, #gset_2 }}) * (! (#gwrit_2 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_3, #gconf_3, #gval_3, #gwrit_3, #gget_3, #gset_3 }}) * (! (#gget_3 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_4, #gconf_4, #gval_4, #gwrit_4, #gget_4, #gset_4 }}) * (! (#gset_4 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal

SyntaxError
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lserr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

defineOwnProperty
----------
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * types(#cls : $$string_type, #l : $$object_type, l : $$object_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #prop : $$string_type, #desc : $$list_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * types(#cls : $$string_type, #l : $$object_type, l : $$object_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$f) * (xret == $$f) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #prop : $$string_type, #desc : $$list_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> None) * ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_9 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * (#desc == {{ "d", #dval_9, #dwrit_9, #denum_9, #dconf_9 }}) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_9 : $$boolean_type, l : $$object_type, #denum_9 : $$boolean_type, #prop : $$string_type, #dwrit_9 : $$boolean_type, #desc : $$list_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> #desc) * ((_$l_#l, "@extensible") -> $$t) * (xret == $$t) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_9 : $$boolean_type, #denum_9 : $$boolean_type, #prop : $$string_type, #dwrit_9 : $$boolean_type, #desc : $$list_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> {{ "d", #dval_3_9, #dwrit_3_9, #denum_3_9, $$t }}) * ((_$l_#l, "@extensible") -> #ext) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_3_9 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * (! (#dval_10 == $$empty)) * (#desc == {{ "d", #dval_10, #dwrit_10, #denum_10, #dconf_10 }}) * (#dcur == {{ "d", #dval_3_9, #dwrit_3_9, #denum_3_9, $$t }}) * (#dconf_3_9 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, l : $$object_type, #denum_10 : $$boolean_type, #dwrit_3_9 : $$boolean_type, #prop : $$string_type, #dconf_3_9 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #denum_3_9 : $$boolean_type, #dconf_10 : $$boolean_type, #ext : $$boolean_type, #dwrit_10 : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, #prop) -> #desc) * ((_$l_#l, "@extensible") -> #ext) * (xret == $$t) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_10 : $$boolean_type, #dwrit_3_9 : $$boolean_type, #prop : $$string_type, #dconf_3_9 : $$boolean_type, #dcur : $$list_type, #desc : $$list_type, #denum_3_9 : $$boolean_type, #dconf_10 : $$boolean_type, #ext : $$boolean_type, xret : $$boolean_type, #dwrit_10 : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_10, #dwrit_3_10, #denum_3_10, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_10 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * (! (#dval_11 == $$empty)) * (#dconf_11 == $$t) * (#desc == {{ "d", #dval_11, #dwrit_11, #denum_11, $$t }}) * (#dcur == {{ "d", #dval_3_10, #dwrit_3_10, #denum_3_10, $$f }}) * (#dconf_3_10 == $$f) * types(#dconf_3_10 : $$boolean_type, #dwrit_11 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_3_10 : $$boolean_type, #denum_11 : $$boolean_type, #dwrit_3_10 : $$boolean_type, l : $$object_type, #dconf_11 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * (! (#cls == "String")) * types(#dconf_3_10 : $$boolean_type, #dwrit_11 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_3_10 : $$boolean_type, #denum_11 : $$boolean_type, #dwrit_3_10 : $$boolean_type, #dconf_11 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_11, #dwrit_3_11, #denum_3_11, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_11 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "String")) * (! (#cls == "Array")) * (! (#dval_12 == $$empty)) * (#dconf_3_11 == $$f) * (#desc == {{ "d", #dval_12, #dwrit_12, #denum_12, $$t }}) * (#dcur == {{ "d", #dval_3_11, #dwrit_3_11, #denum_3_11, $$f }}) * (#dconf_12 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_12 : $$boolean_type, #dconf_3_11 : $$boolean_type, l : $$object_type, #dwrit_12 : $$boolean_type, #dwrit_3_11 : $$boolean_type, #dconf_12 : $$boolean_type, #denum_3_11 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #denum_12 : $$boolean_type, #dconf_3_11 : $$boolean_type, #dwrit_12 : $$boolean_type, #dwrit_3_11 : $$boolean_type, #dconf_12 : $$boolean_type, #denum_3_11 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_12, #dwrit_3_12, #denum_3_12, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_12 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#denum_13 == #denum_3_12)) * (! (#dval_13 == $$empty)) * (#dconf_3_12 == $$f) * (#desc == {{ "d", #dval_13, #dwrit_13, #denum_13, $$f }}) * (#dcur == {{ "d", #dval_3_12, #dwrit_3_12, #denum_3_12, $$f }}) * (#dconf_13 == $$f) * (#ed == #denum_13) * (#ec == #denum_3_12) * types(#dwrit_13 : $$boolean_type, #ed : $$boolean_type, #denum_13 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #dwrit_3_12 : $$boolean_type, #throw : $$boolean_type, #dconf_13 : $$boolean_type, l : $$object_type, #ec : $$boolean_type, #denum_3_12 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_12 : $$boolean_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * (! (#cls == "String")) * types(#dwrit_13 : $$boolean_type, #ed : $$boolean_type, #denum_13 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #dwrit_3_12 : $$boolean_type, #throw : $$boolean_type, #dconf_13 : $$boolean_type, #ec : $$boolean_type, #denum_3_12 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #dconf_3_12 : $$boolean_type, #ext : $$boolean_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_13, #dwrit_3_13, #denum_3_13, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_13 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#denum_14 == #denum_3_13)) * (! (#dval_14 == $$empty)) * (#desc == {{ "d", #dval_14, #dwrit_14, #denum_14, $$f }}) * (#dcur == {{ "d", #dval_3_13, #dwrit_3_13, #denum_3_13, $$f }}) * (#dconf_14 == $$f) * (#dconf_3_13 == $$f) * (#ed == #denum_14) * (#ec == #denum_3_13) * types(#dwrit_3_13 : $$boolean_type, #ed : $$boolean_type, #dconf_3_13 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_14 : $$boolean_type, #denum_14 : $$boolean_type, l : $$object_type, #ec : $$boolean_type, #dwrit_14 : $$boolean_type, #denum_3_13 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#dwrit_3_13 : $$boolean_type, #ed : $$boolean_type, #dconf_3_13 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_14 : $$boolean_type, #denum_14 : $$boolean_type, #ec : $$boolean_type, #dwrit_14 : $$boolean_type, #denum_3_13 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_14, $$f, #denum_15, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$t) * (! (#dval_3_14 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#dval_15 == $$empty)) * (#dwrit_3_14 == $$f) * (#desc == {{ "d", #dval_15, $$t, #denum_15, $$f }}) * (#dcur == {{ "d", #dval_3_14, $$f, #denum_15, $$f }}) * (#denum_3_14 == #denum_15) * (#enum == #denum_15) * (#dconf_15 == $$f) * (#dconf_3_14 == $$f) * (#dwrit_15 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #denum_3_14 : $$boolean_type, #denum_15 : $$boolean_type, l : $$object_type, #dwrit_3_14 : $$boolean_type, #dwrit_15 : $$boolean_type, #dconf_3_14 : $$boolean_type, #dconf_15 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #denum_3_14 : $$boolean_type, #denum_15 : $$boolean_type, #dwrit_3_14 : $$boolean_type, #dwrit_15 : $$boolean_type, #dconf_3_14 : $$boolean_type, #dconf_15 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$object_type) ]]
Error
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_15, $$f, #denum_16, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_15 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#dval_16 == $$empty)) * (#dconf_3_15 == $$f) * (#dconf_16 == $$f) * (#desc == {{ "d", #dval_16, $$t, #denum_16, $$f }}) * (#dcur == {{ "d", #dval_3_15, $$f, #denum_16, $$f }}) * (#denum_3_15 == #denum_16) * (#dwrit_3_15 == $$f) * (#enum == #denum_16) * (#dwrit_16 == $$t) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dconf_16 : $$boolean_type, l : $$object_type, #denum_16 : $$boolean_type, #dconf_3_15 : $$boolean_type, #dwrit_16 : $$boolean_type, #dwrit_3_15 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #denum_3_15 : $$boolean_type, #desc : $$list_type, #ext : $$boolean_type, throw : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #dcur) * (xret == $$f) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dconf_16 : $$boolean_type, #denum_16 : $$boolean_type, #dconf_3_15 : $$boolean_type, #dwrit_16 : $$boolean_type, #dwrit_3_15 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #denum_3_15 : $$boolean_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_16, $$t, #denum_17, $$f }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == $$f) * (! (#dval_3_16 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#dval_17 == $$empty)) * (#denum_3_16 == #denum_17) * (#desc == {{ "d", #dval_17, #dwrit_17, #denum_17, $$f }}) * (#dcur == {{ "d", #dval_3_16, $$t, #denum_17, $$f }}) * (#dwrit_3_16 == $$t) * (#enum == #denum_17) * (#dconf_3_16 == $$f) * (#dconf_17 == $$f) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dwrit_3_16 : $$boolean_type, l : $$object_type, #dconf_17 : $$boolean_type, #dconf_3_16 : $$boolean_type, #dwrit_17 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, #denum_17 : $$boolean_type, throw : $$boolean_type, #denum_3_16 : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> #desc) * (xret == $$t) * (! (#cls == "String")) * types(#cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #enum : $$boolean_type, #dwrit_3_16 : $$boolean_type, #dconf_17 : $$boolean_type, #dconf_3_16 : $$boolean_type, #dwrit_17 : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type, #denum_17 : $$boolean_type, #denum_3_16 : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #dval_3_17, $$t, #denum_3_17, #dconf_3_17 }}) * (l == _$l_#l) * (prop == #prop) * (desc == #desc) * (throw == #throw) * (! (#dval_3_17 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (! (#cls == "Array")) * (! (#cls == "String")) * (! (#gval == $$empty)) * (#dec == #denum_3_17) * (#desc == {{ "g", $$empty, $$empty, #gval, $$empty, $$empty, $$empty }}) * (#dcur == {{ "d", #dval_3_17, $$t, #denum_3_17, #dconf_3_17 }}) * (#dcc == #dconf_3_17) * (#dwrit_3_17 == $$t) * types(#dwrit_3_17 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_3_17 : $$boolean_type, #denum_3_17 : $$boolean_type, l : $$object_type, #dec : $$boolean_type, #dcc : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@class") -> #cls) * ((_$l_#l, "@extensible") -> #ext) * ((_$l_#l, #prop) -> {{ "d", #gval, $$t, #dec, #dcc }}) * (xret == $$t) * types(#dwrit_3_17 : $$boolean_type, #cls : $$string_type, #l : $$object_type, #throw : $$boolean_type, #dconf_3_17 : $$boolean_type, #denum_3_17 : $$boolean_type, #dec : $$boolean_type, #dcc : $$boolean_type, #prop : $$string_type, #dcur : $$list_type, #desc : $$list_type, #ext : $$boolean_type, xret : $$boolean_type) ]]
Normal

i__toString
----------
[[ (v == #v) * types(#v : $$number_type) ]]
[[ (xret == (num_to_string #v)) * types(#v : $$number_type, xret : $$string_type) ]]
Normal
[[ (v == #v) * types(#v : $$string_type) ]]
[[ (xret == #v) * types(#v : $$string_type, xret : $$string_type) ]]
Normal

i__toInteger
----------
[[ (v == #v) * types(#v : $$string_type) ]]
[[ (xret == (num_to_int (string_to_num #v))) * types(#v : $$string_type, xret : $$number_type) ]]
Normal

main
----------
[[ (($lg, "y") -> ##s_0) * types() ]]
[[ empty_fields($lfun_proto : "@class", "@proto", "@extensible", "@scope", "length", "@call") * (($lfun_proto, "@class") -> "Function") * (($lfun_proto, "@proto") -> $lobj_proto) * (($lfun_proto, "@extensible") -> $$t) * (($lfun_proto, "@scope") -> $$empty) * (($lfun_proto, "length") -> {{ "d", 0., $$f, $$f, $$f }}) * (($lfun_proto, "@call") -> "FP_default") * empty_fields($lerr : "@class", "@proto", "@extensible", "@scope", "length", "@call", "@construct", "prototype") * (($lerr, "@class") -> "Function") * (($lerr, "@proto") -> $lfun_proto) * (($lerr, "@extensible") -> $$t) * (($lerr, "@scope") -> $$empty) * (($lerr, "length") -> {{ "d", 1., $$f, $$f, $$f }}) * (($lerr, "@call") -> "Error_call") * (($lerr, "@construct") -> "Error_construct") * (($lerr, "prototype") -> {{ "d", $lerr_proto, $$f, $$f, $$f }}) * (($lg, "@proto") -> $lobj_proto) * (($lg, "Error") -> {{ "d", $lerr, $$t, $$f, $$t }}) * (($lg, "@extensible") -> $$t) * (($lg, "y") -> {{ "d", 3., $$t, $$t, $$f }}) * (($lg, "@class") -> "Object") * empty_fields($lobj_proto : "@class", "@proto", "@extensible") * (($lobj_proto, "@class") -> "Object") * (($lobj_proto, "@proto") -> $$null) * (($lobj_proto, "@extensible") -> $$t) * empty_fields($lerr_proto : "@class", "@proto", "@extensible", "message") * (($lerr_proto, "@class") -> "Error") * (($lerr_proto, "@proto") -> $lobj_proto) * (($lerr_proto, "@extensible") -> $$t) * (($lerr_proto, "message") -> {{ "d", "", $$t, $$f, $$t }}) * (x__te == _$l_0) * (x_2 == $lg) * (x_4 == $$t) * (x_6 == $$empty) * (x__se == _$l_1) * (x_0 == $$empty) * (x_sc_0 == {{ $lg }}) * (x__this == $lg) * (x_1_v == 3.) * (x_3 == {{ "v", $lg, "y" }}) * (x_5 == $$empty) * (xret == $$empty) * (#x4 == {{ "Object" }}) * (xret == $$empty) * (x_5 == $$empty) * (x_6 == $$empty) * (x_0 == $$empty) * (#x2 == {{ $lg }}) * (#x3 == {{ "d", $$undefined, $$t, $$t, $$f }}) * (#x1 == {{ $$f }}) * (#x0 == {{ "" }}) * types(x__te : $$object_type, #x0 : $$list_type, #x1 : $$list_type, x_6 : $$empty_type, x_4 : $$boolean_type, x_2 : $$object_type, #x3 : $$list_type, x__se : $$object_type, #x2 : $$list_type, x_sc_0 : $$list_type, x_0 : $$empty_type, x__this : $$object_type, x_1_v : $$number_type, x_3 : $$list_type, x_5 : $$empty_type, xret : $$empty_type, #x4 : $$list_type) ]]
Normal

i__abstractComparison
----------
[[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * (#v1 <# #v2) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type) ]]
[[ (xret == $$t) * (#v1 <# #v2) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * (#v1 == #v2) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type) ]]
[[ (xret == $$f) * (#v1 == #v2) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type, xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (leftFirst == #leftFirst) * (#v2 <# #v1) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type) ]]
[[ (xret == $$f) * (#v2 <# #v1) * types(#leftFirst : $$boolean_type, #v2 : $$number_type, #v1 : $$number_type, xret : $$boolean_type) ]]
Normal

Error_construct
----------
[[ ((_$l_#vthis, "@class") -> #cls) * ((_$l_#vthis, "@extensible") -> #ext) * (vthis == _$l_#vthis) * (v == $$undefined) * types(vthis : $$object_type, v : $$undefined_type, #vthis : $$object_type) ]]
[[ ((_$l_#vthis, "@class") -> "Error") * ((_$l_#vthis, "@extensible") -> $$t) * (xret == _$l_#vthis) * types(#vthis : $$object_type, xret : $$object_type) ]]
Normal
[[ ((_$l_#vthis, "@class") -> #cls) * ((_$l_#vthis, "@extensible") -> #ext) * (vthis == _$l_#vthis) * (v == #m) * types(vthis : $$object_type, #m : $$string_type, #vthis : $$object_type) ]]
[[ ((_$l_#vthis, "@class") -> "Error") * ((_$l_#vthis, "@extensible") -> $$t) * ((_$l_#vthis, "message") -> {{ "d", #m, $$t, $$f, $$t }}) * (xret == _$l_#vthis) * types(#m : $$string_type, #vthis : $$object_type, xret : $$object_type) ]]
Normal

canPut
----------
[[ ((_$l_#l, "@extensible") -> #ext) * (l == _$l_#l) * (prop == #prop) * types(l : $$object_type, #ext : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> #ext) * (xret == #ext) * types(#ext : $$boolean_type) ]]
Normal
[[ (l == #l) * (prop == #prop) * (! (#dval_41 == $$empty)) * (#writ == #dwrit_41) * (#g_aux_1 == {{ "d", #dval_41, #dwrit_41, #denum_41, #dconf_41 }}) * types(#denum_41 : $$boolean_type, #dwrit_41 : $$boolean_type, #dconf_41 : $$boolean_type, #g_aux_1 : $$list_type, #writ : $$boolean_type) ]]
[[ (xret == #writ) * types(#denum_41 : $$boolean_type, #dwrit_41 : $$boolean_type, #dconf_41 : $$boolean_type, #g_aux_1 : $$list_type, #writ : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$f) * (l == _$l_#l) * (prop == #prop) * (! (#dval_42 == $$empty)) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#g_aux_1 == {{ "d", #dval_42, #dwrit_42, #denum_42, #dconf_42 }}) * types(#l : $$object_type, l : $$object_type, #denum_42 : $$boolean_type, #g_aux_1 : $$list_type, #dwrit_42 : $$boolean_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, #dconf_42 : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$f) * (xret == $$f) * types(#l : $$object_type, #denum_42 : $$boolean_type, #g_aux_1 : $$list_type, #dwrit_42 : $$boolean_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, xret : $$boolean_type, #dconf_42 : $$boolean_type) ]]
Normal
[[ ((_$l_#l, "@extensible") -> $$t) * (l == _$l_#l) * (prop == #prop) * (! (#dval_43 == $$empty)) * (#g_aux_2 == (_$l_#l :: (#lp :: #other))) * (#writ == #dwrit_43) * (#g_aux_1 == {{ "d", #dval_43, #dwrit_43, #denum_43, #dconf_43 }}) * types(#l : $$object_type, l : $$object_type, #dconf_43 : $$boolean_type, #g_aux_1 : $$list_type, #writ : $$boolean_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, #dwrit_43 : $$boolean_type, #denum_43 : $$boolean_type) ]]
[[ ((_$l_#l, "@extensible") -> $$t) * (xret == #writ) * types(#l : $$object_type, #dconf_43 : $$boolean_type, #g_aux_1 : $$list_type, #writ : $$boolean_type, #lp : $$object_type, #g_aux_2 : $$list_type, #other : $$list_type, #dwrit_43 : $$boolean_type, #denum_43 : $$boolean_type) ]]
Normal

deleteProperty
----------
[[ (l == #l) * (prop == #prop) * (#desc == $$undefined) * types(#desc : $$undefined_type, l : $$object_type, prop : $$string_type, #l : $$object_type, #clsx : $$list_type, #prop : $$string_type) ]]
[[ (xret == $$t) * (#desc == $$undefined) * types(#desc : $$undefined_type, #l : $$object_type, #clsx : $$list_type, xret : $$boolean_type, #prop : $$string_type) ]]
Normal
[[ (l == #l) * (prop == #prop) * (! (#dval_5 == $$empty)) * (#dconf_5 == $$t) * (#desc == {{ "d", #dval_5, #dwrit_5, #denum_5, $$t }}) * types(#l : $$object_type, #clsx : $$list_type, #denum_5 : $$boolean_type, #dwrit_5 : $$boolean_type, l : $$object_type, prop : $$string_type, #prop : $$string_type, #desc : $$list_type, #dconf_5 : $$boolean_type) ]]
[[ (xret == $$t) * types(#l : $$object_type, #clsx : $$list_type, #denum_5 : $$boolean_type, #dwrit_5 : $$boolean_type, #prop : $$string_type, #desc : $$list_type, #dconf_5 : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ (l == #l) * (prop == #prop) * (throw == $$t) * (! (#dval_6 == $$empty)) * (#desc == {{ "d", #dval_6, #dwrit_6, #denum_6, $$f }}) * (#dconf_6 == $$f) * types(#dconf_6 : $$boolean_type, #l : $$object_type, #clsx : $$list_type, l : $$object_type, prop : $$string_type, #denum_6 : $$boolean_type, #dwrit_6 : $$boolean_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#dconf_6 : $$boolean_type, #l : $$object_type, #clsx : $$list_type, #denum_6 : $$boolean_type, #dwrit_6 : $$boolean_type, #prop : $$string_type, #desc : $$list_type, xret : $$object_type) ]]
Error
[[ (l == #l) * (prop == #prop) * (throw == $$f) * (! (#dval_7 == $$empty)) * (#desc == {{ "d", #dval_7, #dwrit_7, #denum_7, $$f }}) * (#dconf_7 == $$f) * types(#dconf_7 : $$boolean_type, #l : $$object_type, #clsx : $$list_type, l : $$object_type, prop : $$string_type, #denum_7 : $$boolean_type, #dwrit_7 : $$boolean_type, #prop : $$string_type, #desc : $$list_type, throw : $$boolean_type) ]]
[[ (xret == $$f) * types(#dconf_7 : $$boolean_type, #l : $$object_type, #clsx : $$list_type, #denum_7 : $$boolean_type, #dwrit_7 : $$boolean_type, #prop : $$string_type, #desc : $$list_type, xret : $$boolean_type) ]]
Error

i__isPrimitive
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == $$null) * types(v : $$null_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$number_type, v : $$number_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$boolean_type, v : $$boolean_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$string_type, v : $$string_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$object_type, v : $$object_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal

i__strictEquality
----------
[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types() ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == #v1) * (v2 == #v2) * (! (#v1 == #v2)) * types() ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal

TypeError
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal

copy_object_rec
----------
[[ (fields == $$nil) * types(fields : $$list_type) ]]
[[ (xret == #lt) * types() ]]
Normal
[[ ((_$l_#lf, #f) -> #v) * ((_$l_#lt, #f) -> None) * ((_$l_#lt, "@proto") -> $$null) * (lt == _$l_#lt) * (fields == #fields) * (lf == _$l_#lf) * (! (s-nth(#f, 0.) == "@")) * (! (#f == "")) * (#fields == {{ #f }}) * types(lt : $$object_type, #fields : $$list_type, #f : $$string_type, lf : $$object_type) ]]
[[ ((_$l_#lf, #f) -> #v) * ((_$l_#lt, #f) -> #v) * ((_$l_#lt, "@proto") -> $$null) * (xret == _$l_#lt) * types(#fields : $$list_type, #f : $$string_type, xret : $$object_type) ]]
Normal
[[ ((_$l_#lf, #f1) -> #v1) * ((_$l_#lf, "main") -> #v2) * ((_$l_#lt, #f1) -> None) * ((_$l_#lt, "main") -> None) * ((_$l_#lt, "@proto") -> $$null) * (lt == _$l_#lt) * (fields == #fields) * (lf == _$l_#lf) * (! (s-nth(#f1, 0.) == "@")) * (! (#f1 == "")) * (#fields == {{ #f1, "main" }}) * types(lt : $$object_type, #fields : $$list_type, lf : $$object_type, #f1 : $$string_type) ]]
[[ ((_$l_#lf, #f1) -> #v1) * ((_$l_#lf, "main") -> #v2) * ((_$l_#lt, #f1) -> #v1) * ((_$l_#lt, "main") -> #v2) * ((_$l_#lt, "@proto") -> $$null) * (xret == _$l_#lt) * types(#fields : $$list_type, #f1 : $$string_type, xret : $$object_type) ]]
Normal

i__toBoolean
----------
[[ (v == #v) * types(#v : $$boolean_type) ]]
[[ (xret == #v) * types(#v : $$boolean_type) ]]
Normal
[[ (v == 0.) * types(v : $$number_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (v == #v) * (! (#v == 0.)) * types(#v : $$number_type) ]]
[[ (xret == $$t) * types(#v : $$number_type, xret : $$boolean_type) ]]
Normal

i__toDataDescriptor
----------
[[ (desc == #desc) * (! (#dval_8 == $$empty)) * (#desc == {{ "d", #dval_8, #dwrit_8, #denum_8, #dconf_8 }}) * types(#denum_8 : $$boolean_type, #dconf_8 : $$boolean_type, #dwrit_8 : $$boolean_type, #desc : $$list_type) ]]
[[ (xret == #desc) * types(#denum_8 : $$boolean_type, #dconf_8 : $$boolean_type, #dwrit_8 : $$boolean_type, #desc : $$list_type) ]]
Normal

getProperty
----------
[[ (l == #l) * (prop == #prop) * types(#l : $$object_type, #prop : $$string_type) ]]
[[ (xret == #gp_aux_1) * types(#l : $$object_type, #prop : $$string_type) ]]
Normal

getOwnProperty
----------
[[ ((_$l_#l, #prop) -> None) * ((_$l_#l, "@class") -> #cls) * (l == _$l_#l) * (prop == #prop) * (! (#cls == "String")) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, l : $$object_type, #prop : $$string_type) ]]
[[ ((_$l_#l, #prop) -> None) * ((_$l_#l, "@class") -> #cls) * (xret == $$undefined) * (! (#cls == "String")) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * types(#cls : $$string_type, #l : $$object_type, xret : $$undefined_type, #prop : $$string_type) ]]
Normal
[[ ((_$l_#l, #prop) -> {{ "d", #dval_3_2, #dwrit_3_2, #denum_3_2, #dconf_3_2 }}) * ((_$l_#l, "@class") -> #cls) * (l == _$l_#l) * (prop == #prop) * (! (#cls == "String")) * (! (#dval_3_2 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#dx == {{ "d", #dval_3_2, #dwrit_3_2, #denum_3_2, #dconf_3_2 }}) * types(#cls : $$string_type, #l : $$object_type, #dx : $$list_type, l : $$object_type, #dconf_3_2 : $$boolean_type, #denum_3_2 : $$boolean_type, #prop : $$string_type, #dwrit_3_2 : $$boolean_type) ]]
[[ ((_$l_#l, #prop) -> {{ "d", #dval_3_3, #dwrit_3_3, #denum_3_3, #dconf_3_3 }}) * ((_$l_#l, "@class") -> #cls) * (xret == #dx) * (! (#cls == "String")) * (! (#dval_3_3 == $$empty)) * (! (s-nth(#prop, 0.) == "@")) * (! (#prop == "")) * (#dx == {{ "d", #dval_3_3, #dwrit_3_3, #denum_3_3, #dconf_3_3 }}) * types(#cls : $$string_type, #l : $$object_type, #denum_3_3 : $$boolean_type, #dx : $$list_type, #dconf_3_2 : $$boolean_type, #denum_3_2 : $$boolean_type, #prop : $$string_type, #dconf_3_3 : $$boolean_type, #dwrit_3_3 : $$boolean_type, #dwrit_3_2 : $$boolean_type) ]]
Normal

i__checkObjectCoercible
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal
[[ (v == $$null) * types(v : $$null_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lterr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(xret : $$object_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$number_type, v : $$number_type) ]]
[[ (xret == $$empty) * types(xret : $$empty_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$boolean_type, v : $$boolean_type) ]]
[[ (xret == $$empty) * types(xret : $$empty_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$string_type, v : $$string_type) ]]
[[ (xret == $$empty) * types(xret : $$empty_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$object_type, v : $$object_type) ]]
[[ (xret == $$empty) * types(xret : $$empty_type) ]]
Normal

i__abstractEquality
----------
[[ (v2 == $$null) * (v1 == $$null) * types(v2 : $$null_type, v1 : $$null_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v2 == $$null) * (v1 == _lvar_v1) * types(_lvar_v1 : $$object_type, _lvar_v2 : $$null_type, v2 : $$null_type, v1 : $$object_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (v1 == _lvar_v1) * (v2 == _lvar_v2) * (! (_lvar_v1 == _lvar_v2)) * types(v1 : $$number_type, _lvar_v2 : $$number_type, v2 : $$number_type, _lvar_v1 : $$number_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal

hasProperty
----------
[[ (l == #l) * (prop == #prop) * types(#l : $$object_type, #prop : $$string_type) ]]
[[ (xret == (not (#gp_aux_1 = $$undefined))) * types(#l : $$object_type, #prop : $$string_type, xret : $$boolean_type) ]]
Normal

i__isAccessorDescriptor
----------
[[ (desc == $$undefined) * types(desc : $$undefined_type) ]]
[[ (xret == $$f) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "d", #dval_38, #dwrit_38, #denum_38, #dconf_38 }}) * (! (#dval_38 == $$empty)) * types(#denum_38 : $$boolean_type, #dwrit_38 : $$boolean_type, #dconf_38 : $$boolean_type, desc : $$list_type) ]]
[[ (xret == $$f) * types(#denum_38 : $$boolean_type, #dwrit_38 : $$boolean_type, #dconf_38 : $$boolean_type, xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_8, #gconf_8, #gval_8, #gwrit_8, $$empty, $$empty }}) * (#gset_8 == $$empty) * (#gget_8 == $$empty) * types(#gget_8 : $$empty_type, desc : $$list_type, #gset_8 : $$empty_type) ]]
[[ (xret == $$f) * (#gset_8 == $$empty) * (#gget_8 == $$empty) * types(#gget_8 : $$empty_type, xret : $$boolean_type, #gset_8 : $$empty_type) ]]
Normal
[[ (desc == {{ "g", #genum_9, #gconf_9, #gval_9, #gwrit_9, #gget_9, #gset_9 }}) * (! (#gget_9 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (desc == {{ "g", #genum_10, #gconf_10, #gval_10, #gwrit_10, #gget_10, #gset_10 }}) * (! (#gset_10 == $$empty)) * types(desc : $$list_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal

i__checkAssignmentErrors
----------
[[ (v == $$undefined) * types(v : $$undefined_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == $$null) * types(v : $$null_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$number_type, v : $$number_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$boolean_type, v : $$boolean_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$string_type, v : $$string_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == _lvar_v) * types(_lvar_v : $$object_type, v : $$object_type) ]]
[[ (xret == $$t) * types(xret : $$boolean_type) ]]
Normal
[[ (v == #v) * (! (#prop == "arguments")) * (! (#prop == "eval")) * (#v == {{ "v", #l, #prop }}) * types(#l : $$object_type, #prop : $$string_type, #v : $$list_type) ]]
[[ (xret == $$t) * types(#l : $$object_type, #prop : $$string_type, #v : $$list_type, xret : $$boolean_type) ]]
Normal
[[ (v == #v) * (#v == {{ "v", #l, "eval" }}) * types(#l : $$object_type, #v : $$list_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lserr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#l : $$object_type, #v : $$list_type, xret : $$object_type) ]]
Error
[[ (v == #v) * (#v == {{ "v", #l, "arguments" }}) * types(#l : $$object_type, #v : $$list_type) ]]
[[ empty_fields(_$l_xret : "@proto", "@class", "@extensible") * ((_$l_xret, "@proto") -> $lserr_proto) * ((_$l_xret, "@class") -> "Error") * ((_$l_xret, "@extensible") -> $$t) * (xret == _$l_xret) * types(#l : $$object_type, #v : $$list_type, xret : $$object_type) ]]
Error
[[ (v == #v) * (#v == {{ "o", #base, #field }}) * types(#field : $$string_type, #v : $$list_type, #base : $$object_type) ]]
[[ (xret == $$t) * types(#field : $$string_type, #v : $$list_type, #base : $$object_type, xret : $$boolean_type) ]]
Normal

i__isCallable
----------
[[ ((_$l_l, "@call") -> None) * (l == _$l_l) * types(l : $$object_type) ]]
[[ ((_$l_l, "@call") -> None) * (l == _$l_l) * (xret == $$f) * types(l : $$object_type, xret : $$boolean_type) ]]
Normal
[[ ((_$l_l, "@call") -> #y) * (l == _$l_l) * (! (#y == None)) * types(l : $$object_type) ]]
[[ ((_$l_l, "@call") -> #y) * (l == _$l_l) * (xret == $$t) * types(l : $$object_type, xret : $$boolean_type) ]]
Normal

i__toNumber
----------
[[ (v == $$t) * types(v : $$boolean_type) ]]
[[ (xret == 1.) * types(xret : $$number_type) ]]
Normal
[[ (v == $$f) * types(v : $$boolean_type) ]]
[[ (xret == 0.) * types(xret : $$number_type) ]]
Normal
[[ (v == #v) * types(#v : $$number_type) ]]
[[ (xret == #v) * types(#v : $$number_type) ]]
Normal
[[ (v == #v) * types(#v : $$string_type) ]]
[[ (xret == (string_to_num #v)) * types(#v : $$string_type, xret : $$number_type) ]]
Normal

----------------------------------
----------------------------------
Symbolic execution of main
----------------------------------
--0--
TIME: 1.415840
STATE:
Heap: 
	$lg |-> [(\"y\": ##s_0), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 
CMD: x_0 := "setupInitialHeap"() 
----------------------------------
The EVALUATION OF THIS PROC GAVE AN ERROR: 0 No precondition found for procedure setupInitialHeap.!!!!

Verified: 0.		Prunings: 1.

RESULTS
Proc main  - Single Spec - normal

Precondition
Heap: 
	$lg |-> [(\"y\": ##s_0), (default: $$unknown)]
Store: 	
Pure Formulae: 	
Gamma: 	
Preds: 

Postconditions
Post 0: 
Heap: 
	$lerr_proto |-> [(\"message\": {{ \"d\", \"\", $$t, $$f, $$t }}), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Error\"), (default: None)]
	$lobj_proto |-> [(\"@extensible\": $$t), (\"@proto\": $$null), (\"@class\": \"Object\"), (default: None)]
	$lg |-> [(\"@class\": \"Object\"), (\"y\": {{ \"d\", 3., $$t, $$t, $$f }}), (\"@extensible\": $$t), (\"Error\": {{ \"d\", $lerr, $$t, $$f, $$t }}), (\"@proto\": $lobj_proto), (default: $$unknown)]
	$lerr |-> [(\"prototype\": {{ \"d\", $lerr_proto, $$f, $$f, $$f }}), (\"@construct\": \"Error_construct\"), (\"@call\": \"Error_call\"), (\"length\": {{ \"d\", 1., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lfun_proto), (\"@class\": \"Function\"), (default: None)]
	$lfun_proto |-> [(\"@call\": \"FP_default\"), (\"length\": {{ \"d\", 0., $$f, $$f, $$f }}), (\"@scope\": $$empty), (\"@extensible\": $$t), (\"@proto\": $lobj_proto), (\"@class\": \"Function\"), (default: None)]
Store: 	
	(xret: $$empty)
	(x_5: $$empty)
	(x_3: {{ \"v\", $lg, \"y\" }})
	(x_1_v: 3.)
	(x__this: $lg)
	(x_sc_0: {{ $lg }})
	(x_0: $$empty)
	(x__se: _$l_1)
	(x_6: $$empty)
	(x_4: $$t)
	(x_2: $lg)
	(x__te: _$l_0)
Pure Formulae: 	
	(#x4 == {{ \"Object\" }})
	(xret == $$empty)
	(x_5 == $$empty)
	(x_6 == $$empty)
	(x_0 == $$empty)
	(#x2 == {{ $lg }})
	(#x3 == {{ \"d\", $$undefined, $$t, $$t, $$f }})
	(#x1 == {{ $$f }})
	(#x0 == {{ \"\" }})
Gamma: 	
	(#x4: $$list_type)
	(xret: $$empty_type)
	(x_5: $$empty_type)
	(x_3: $$list_type)
	(x_1_v: $$number_type)
	(x__this: $$object_type)
	(x_0: $$empty_type)
	(x_sc_0: $$list_type)
	(#x2: $$list_type)
	(x__se: $$object_type)
	(#x3: $$list_type)
	(x_2: $$object_type)
	(x_4: $$boolean_type)
	(x_6: $$empty_type)
	(#x1: $$list_type)
	(#x0: $$list_type)
	(x__te: $$object_type)
Preds: 
;
 -- FAILED with msg: No precondition found for procedure setupInitialHeap.

There were Failures in 1.416025

**********     Ending normal symbolic execution.     **********

RESULT SPECS 
Generated specifications: 
 
main
----------
[[ (($lg, "y") -> ##s_0) * types() ]]
[[ empty_fields($lfun_proto : "@class", "@proto", "@extensible", "@scope", "length", "@call") * (($lfun_proto, "@class") -> "Function") * (($lfun_proto, "@proto") -> $lobj_proto) * (($lfun_proto, "@extensible") -> $$t) * (($lfun_proto, "@scope") -> $$empty) * (($lfun_proto, "length") -> {{ "d", 0., $$f, $$f, $$f }}) * (($lfun_proto, "@call") -> "FP_default") * empty_fields($lerr : "@class", "@proto", "@extensible", "@scope", "length", "@call", "@construct", "prototype") * (($lerr, "@class") -> "Function") * (($lerr, "@proto") -> $lfun_proto) * (($lerr, "@extensible") -> $$t) * (($lerr, "@scope") -> $$empty) * (($lerr, "length") -> {{ "d", 1., $$f, $$f, $$f }}) * (($lerr, "@call") -> "Error_call") * (($lerr, "@construct") -> "Error_construct") * (($lerr, "prototype") -> {{ "d", $lerr_proto, $$f, $$f, $$f }}) * (($lg, "@proto") -> $lobj_proto) * (($lg, "Error") -> {{ "d", $lerr, $$t, $$f, $$t }}) * (($lg, "@extensible") -> $$t) * (($lg, "y") -> {{ "d", 3., $$t, $$t, $$f }}) * (($lg, "@class") -> "Object") * empty_fields($lobj_proto : "@class", "@proto", "@extensible") * (($lobj_proto, "@class") -> "Object") * (($lobj_proto, "@proto") -> $$null) * (($lobj_proto, "@extensible") -> $$t) * empty_fields($lerr_proto : "@class", "@proto", "@extensible", "message") * (($lerr_proto, "@class") -> "Error") * (($lerr_proto, "@proto") -> $lobj_proto) * (($lerr_proto, "@extensible") -> $$t) * (($lerr_proto, "message") -> {{ "d", "", $$t, $$f, $$t }}) * (x__te == _$l_0) * (x_2 == $lg) * (x_4 == $$t) * (x_6 == $$empty) * (x__se == _$l_1) * (x_0 == $$empty) * (x_sc_0 == {{ $lg }}) * (x__this == $lg) * (x_1_v == 3.) * (x_3 == {{ "v", $lg, "y" }}) * (x_5 == $$empty) * (xret == $$empty) * (#x4 == {{ "Object" }}) * (xret == $$empty) * (x_5 == $$empty) * (x_6 == $$empty) * (x_0 == $$empty) * (#x2 == {{ $lg }}) * (#x3 == {{ "d", $$undefined, $$t, $$t, $$f }}) * (#x1 == {{ $$f }}) * (#x0 == {{ "" }}) * types(x__te : $$object_type, #x0 : $$list_type, #x1 : $$list_type, x_6 : $$empty_type, x_4 : $$boolean_type, x_2 : $$object_type, #x3 : $$list_type, x__se : $$object_type, #x2 : $$list_type, x_sc_0 : $$list_type, x_0 : $$empty_type, x__this : $$object_type, x_1_v : $$number_type, x_3 : $$list_type, x_5 : $$empty_type, xret : $$empty_type, #x4 : $$list_type) ]]
Normal

