spec set_literal_01 ()
	[[ emp ]]
	[[ (ret == -{- -}-) * types(ret : Set) ]]
	normal

proc set_literal_01 ()
{
			xret := -{- -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_02 ()
	[[ emp ]]
	[[ (ret == -{- 1 -}-) * types(ret : Set) ]]
	normal

proc set_literal_02 ()
{
			xret := -{- 1 -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_03 ()
	[[ emp ]]
	[[ (ret == -{- 1, 2, 3, 4, 5 -}-) * types(ret : Set) ]]
	normal

proc set_literal_03 ()
{
			xret := -{- 1, 2, 3, 4, 5 -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_04 ()
	[[ emp ]]
	[[ (ret == -{- 3, 5, 2, 4, 1 -}-) * types(ret : Set) ]]
	normal

proc set_literal_04 ()
{
			xret := -{- 2, 3, 1, 5, 4 -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_05 (x, y)
	[[ (x == #x) * (y == #y) * types(#x : Num, #y : Num) ]]
	[[ (ret == -{- (#x + #y) -}-) * types(ret : Set) ]]
	normal
	
proc set_literal_05 (x, y)
{
			xret := -{- (x + y) -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_06 (x, y)
	[[ (x == #x) * (y == #y) * types(#x : Num, #y : Num) ]]
	[[ (ret == -{- (2 * #x + 3 * #y) -}-) * types(ret : Set) ]]
	normal
	
proc set_literal_06 (x, y)
{
			xret := -{- (x + x + y + y + y) -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

spec set_literal_07 (x, y)
	[[ (x == #x) * (y == #y) * types(#x : Num, #y : Num) ]]
	[[ (ret == -{- (#x + #y), (#x * #y) -}-) * types(ret : Set) ]]
	normal
	
proc set_literal_07 (x, y)
{
			xret := -{- (x * y), (x + y) -}-;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};