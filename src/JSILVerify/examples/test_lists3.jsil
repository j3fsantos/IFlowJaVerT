(** Totals: 0 fails and 1 passes **)

pred ValidKey(key) : 
    types (key : $$string_type) * (! (key == "")) * (! (s-nth (key, 0) == "@")) *  
    (! (key == "hasOwnProperty"));


pred KVPairs (o, kvs, count) :
    (kvs == -{ }-) * (count == 0),

    (kvs == -u- (-{ {{ #key, #value }} }-,  #rkvs)) * (count == 1 + #count_rest) * (! (-{ #key, #value }- --e-- #rkvs)) *
          ValidKey(#key) * ((o, #key) -> #value) * KVPairs(o, #rkvs, #count_rest) * 
          types (count: $$number_type, #count_rest: $$number_type);


pred KeysfromKVPairs (kvs, keys, count) : 
    (kvs == -{}-) * (keys == -{}-) * (count == 0), 

    (kvs == -u- (-{ {{ #key, #value }} }-, #rkvs)) * 
          (count == 1 + #count_rest) * (keys == -u- (-{ #key }-, #rkeys)) * (! (-{ #key }- --e-- #rkeys)) *
          KeysfromKVPairs (#rkvs, #rkeys, #count_rest) *
          types (count: $$number_type, #count_rest: $$number_type, #key: $$string_type, #value: $$string_type);
 

pred Map (m, kvs) :
    ((m, "@proto") -> $$null) * ((m, "_contents") -> #c) * 
    ((#c, "@proto") -> $$null) * KVPairs(#c, kvs, #count) * 
    KeysfromKVPairs (kvs, #keys, #count) * empty_fields(#c : -u- (#keys, -{ "@proto" }-));


spec map_get (m, k)
   [[ Map (m, -u- (-{ {{ #key, #value }} }-, #rkvs)) * (k == #key) * 
          types(#key: $$string_type, #value: $$string_type)]]
   [[ Map (m, -u- (-{ {{ #key, #value }} }-, #rkvs)) * (ret == #value) * 
          types(#key: $$string_type, #value: $$string_type) ]]
   normal
proc map_get (m, k) {
          r := "xuxu"; 
  rlab:   skip
} with { ret: r, rlab; };


spec map_put (m, k, v)
   [[ Map (m, -u- (-{ {{ #key, #value_old }} }-, #rkvs)) * (v == #value_new) * 
        types(#key: $$string_type, #value_old: $$string_type, #value_new: $$string_type) ]]
   [[ Map (m, -u- (-{ {{ #key, #value_new }} }-, #rkvs)) * (ret == #value_new) * 
        types(#key: $$string_type, #value_old: $$string_type, #value_new: $$string_type) ]]
   normal
proc map_put (m, k, v) {
          r := "xuxu"; 
  rlab:   skip
} with { ret: r, rlab; };
