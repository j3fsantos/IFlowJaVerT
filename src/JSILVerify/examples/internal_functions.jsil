(* ******************
   *** PREDICATES ***
   ****************** *)

(*
 * Predicate: standardObject
 *
 * Resource: Some
 *
 *)
pred standardObject (l) :
    types (l : Obj) *
	((l, "@proto") -> $lobj_proto) *
	((l, "@class") -> "Object") *
	((l, "@extensible") -> true);

(*
 * Predicate: dataField
 *
 * Resource: Some
 *
 *)
pred dataField (l, prop, v) :
    types (l : Obj, prop : Str) *
	((l, prop) -> {{ "d", v, true, true, true }});

(*
 * Predicate: isInternalProperty
 *
 * Resource: None
 *
 *)
pred isInternalProperty (prop) :
    types (prop : Str) * (0 <# s-len prop) * (s-nth (prop, 0) == "@");

(*
 * Predicate: isNamedProperty
 *
 * Resource: None
 *
 *)
pred isNamedProperty (prop) :
    types (prop : Str) * (0 <# s-len prop) * (! (s-nth (prop, 0) == "@"));

(*
 * Predicate: DataDescriptor
 *
 * Resource: None
 *
 *)
pred DataDescriptor (d) :
    types (d : List, #dwrit : Bool, #denum : Bool, #dconf : Bool) *
	(d == {{ "d", #dval, #dwrit, #denum, #dconf }});

(*
 * Predicate: GenericDescriptor
 *
 * Resource: None
 *
 *)
pred GenericDescriptor (d) :
    types (d : List) * (d == {{ "g", #genum, #gconf, #gval, #gwrit, #gget, #gset }});

(*
 * Predicate: Projection functions for descriptors
 *
 * Resource: None
 *
 *)
pred desc_val (d, v) :
    types (d : List) * v == l-nth(d, 1);

pred desc_writ (d, v) :
    types (d : List) * v == l-nth(d, 2);

pred desc_get (d, v) :
    types (d : List) * v == l-nth(d, 1);

pred desc_set (d, v) :
    types (d : List) * v == l-nth(d, 2);

pred desc_enum (d, v) :
    types (d : List) * v == l-nth(d, 3);

pred desc_conf (d, v) :
    types (d : List) * v == l-nth(d, 4);

(*
 * Predicate: Cell_o(l, prop, X)
 *
 * Resource:
 *      (l, prop)
 *
 * Note: We are not allowing accessor descriptors in the heap yet
 *)
pred Cell_o (l, prop, None) :
    types(l : Obj) * isNamedProperty(prop) * ((l, prop) -> None);

pred Cell_o (l, prop, d) :
    types(l : Obj) * isNamedProperty(prop) * ((l, prop) -> d) * DataDescriptor(d);

(*
 * Predicate: IsStringIndex
 *
 * Resource: None
 *
 *)
pred IsStringIndex(S, prop, i) :
    types(S : Str, prop : Str, i : $$int_type) *
    (prop == num_to_string i) * (!(i <# 0)) * (i <# s-len S);

(*
 * Predicate: Cell_s(l, prop, _, X, primitiveValue)
 *
 * Resource:
 *      (l, prop)               via Cell_o
 *      (l, "@primitiveValue")
 *
 * Note: Must be used with String objects,
 *       otherwise (l, "@primitiveValue") WILL NOT EXIST OR BE STUPID
 *
 *)
pred Cell_s (l, prop, "None", None, pv) :
     types (l : Obj, prop : Str, pv : Str) *
	 Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i));

pred Cell_s (l, prop, "SI", desc, pv) :
     types(l : Obj, prop : Str, desc : List, pv : Str, #i : $$int_type, #v : Str) *
	 Cell_o (l, prop, None) * ((l, "@primitiveValue") -> pv) *
     (desc == {{ "d", #v, false, true, false }}) *  (#v == s-nth(pv, #i)) *
	 (#i == num_to_int (string_to_num prop)) * IsStringIndex(pv, prop, #i);

pred Cell_s (l, prop, "NSI", desc, pv) :
	 types (l : Obj, prop : Str, desc : List, pv : Str, #i : $$int_type) *
	 Cell_o (l, prop, desc) * ((l, "@primitiveValue") -> pv) *
	 (#i == num_to_int (string_to_num prop)) * (! IsStringIndex(pv, prop, #i)) *
     (! (desc == None));

(*
 * Predicate: ErrorObject(l, pr)
 *
 * Resource:
 *      (l, "@proto")	(l, "@class")	(l, "@extensible")
 *
 *)

pred ErrorObject (l, pr) :
	types (l : Obj, pr : Obj) *
	((l, "@proto") -> pr) * ((l, "@class") -> "Error") * ((l, "@extensible") -> true) * empty_fields(l : "@proto", "@class", "@extensible");

pred isTypeError(l) :
    ErrorObject (l, $lterr_proto);

pred isSyntaxError(l) :
    ErrorObject (l, $lserr_proto);

pred isReferenceError(l) :
    ErrorObject (l, $lrferr_proto);

(*
 * Predicate: isClass(c, X)
 *
 * Resource:
 *      (l, "@class")
 *
 *)
pred isClass (c, "Array")      : types (c : Str) * (c == "Array");
pred isClass (c, "String")     : types (c : Str) * (c == "String");
pred isClass (c, "Non-String") : types (c : Str) * (! (c == "String"));
pred isClass (c, "Non-Array")  : types (c : Str) * (! (c == "Array"));

(*
 * The PI predicate
 *)

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")
 *)
pred Pi (l, prop, lcls, undefined, ls, ltf, lpv) :
    types(l : Obj, prop : Str, #cls : Str, lcls : List, ls : List, ltf : List, lpv : List) *
	((l, "@proto") -> null) * ((l, "@class") -> #cls) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, None) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ false }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : Obj, prop : Str, #cls : Str, lcls : List, d : List, ls : List, ltf : List, lpv : List) *
	((l, "@class") -> #cls) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, d) * (! (d == None)) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ false }}) * (lpv == {{ "" }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, undefined, ls, ltf, lpv) :
    types(l : Obj, prop : Str, #cls : Str, lcls : List, ls : List, ltf : List, lpv : List) *
	((l, "@proto") -> null) * ((l, "@class") -> #cls) *
    isClass (#cls, "String") * Cell_s (l, prop, "None", None, #pv) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ true }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : Obj, prop : Str, #cls : Str, lcls : List, d : List, ls : List, ltf : List, lpv : List) *
	((l, "@class") -> #cls) *
	isClass (#cls, "String") * Cell_s (l, prop, "SI", d, #pv) *
	(lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ true }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : Obj, prop : Str, #cls : Str, lcls : List, d : List, ls : List, ltf : List, lpv : List) *
	((l, "@class") -> #cls) *
	isClass (#cls, "String") * Cell_s (l, prop, "NSI", d, #pv) *
    (lcls == {{ #cls }}) * (ls == {{ l }}) * (ltf == {{ true }}) * (lpv == {{ #pv }});

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : Obj, prop : Str, lcls : List, ls : List, ltf : List, lpv : List) *
	types(#lp : Obj, #cls : Str, #pcls : List, #lsp : List, #ltfp : List, #lpvp : List) *
	((l, "@class") -> #cls) * ((l, "@proto") -> #lp) * (! (#lp == null)) *
	isClass (#cls, "Non-String") * Cell_o (l, prop, None) *
    Pi (#lp, prop, #pcls, d, #lsp, #ltfp, #lpvp) *
	(lcls == #cls :: #pcls) * (ls == l :: #lsp) * (ltf == false :: #ltfp) * (lpv == "" :: #lpvp) *
    (0 <# l-len #lsp) * (0 <# l-len #ltfp) * (0 <# l-len #lpvp);

(*
 * Resource:
 *		(l, "@class")   via isClass
 *		(l, "@proto")	(l, "prop")		(l, "@primitiveValue")
 *
 *		Those five fields captured throughout the chain
 *)
pred Pi (l, prop, lcls, d, ls, ltf, lpv) :
    types(l : Obj, prop : Str, lcls : List, ls : List, ltf : List, lpv : List) *
	types(#lp : Obj, #cls : Str, #pcls : List, #lsp : List, #ltfp : List, #lpvp : List) *
	((l, "@class") -> #cls) * ((l, "@proto") -> #lp) * (! (#lp == null)) *
	isClass (#cls, "String") * Cell_s (l, prop, "None", None, #pv) *
    Pi (#lp, prop, #pcls, d, #lsp, #ltfp, #lpvp) *
	(lcls == #cls :: #pcls) * (ls == l :: #lsp) * (ltf == true :: #ltfp) * (lpv == #pv :: #lpvp) *
    (0 <# l-len #lsp) * (0 <# l-len #ltfp) * (0 <# l-len #lpvp);



(* *************
 * COPY_OBJECT *
 ***************)

spec copy_object (l, fields)

	[[ (l == #l) * (fields == #fields) *
	   (#fields == {{ #f }}) * isNamedProperty(#f) *
	   ((#l, #f) -> #v) * isNamedProperty (#f) ]]
	[[ ((#l, #f) -> #v) * ((ret, #f) -> #v) * ((ret, "@proto") -> null) ]]
	normal;

	[[ (l == #l) * (fields == #fields) *
	   (#fields == {{ #f1, "main" }}) * isNamedProperty(#f1) *
	   ((#l, #f1) -> #v1) * ((#l, "main") -> #v2) ]]
	[[ ((#l, #f1) -> #v1) * ((#l, "main") -> #v2) *
	   ((ret, #f1) -> #v1) * ((ret, "main") -> #v2) * ((ret, "@proto") -> null) ]]
	normal

proc copy_object (l, fields) {
			xret := new ();

	rlab:	xret := "copy_object_rec" (l, fields, xret)
}
with
{
	ret:	xret, rlab;
};

spec copy_object_rec (lf, fields, lt)

	[[ fields == {{ }} ]]
	[[ true * (ret == #lt) ]]
	normal;

	[[ (lf == #lf) * (fields == #fields) * (lt == #lt) *
	   (#fields == {{ #f }}) *
	   ((#lf, #f) -> #v) * ((#lt, #f) -> None) ]]
	[[ ((#lf, #f) -> #v) * ((#lt, #f) -> #v) * (ret == #lt) ]]
	normal;

	[[ (lf == #lf) * (fields == #fields) * (lt == #lt) *
	   (#fields == {{ #f1, "main" }}) * isNamedProperty(#f1) *
	   ((#lf, #f1) -> #v1)  * ((#lf, "main") -> #v2) *
	   ((#lt, #f1) -> None) * ((#lt, "main") -> None) ]]
	[[ ((#lf, #f1) -> #v1)  * ((#lf, "main") -> #v2) *
	   ((#lt, #f1) -> #v1)  * ((#lt, "main") -> #v2) * (ret == #lt) ]]
	normal

proc copy_object_rec (lf, fields, lt) {
			goto [fields = {{ }}] rlab next;

	next:	head := l-nth (fields, 0);
			tail := cdr fields;

			val := [lf, head];
			[lt, head] := val;

			xret := "copy_object_rec" (lf, tail, lt);

	rlab:	xret := lt
}
with
{
	ret:	xret, rlab;
};


(* ***********************
 * CREATE_DEFAULT_OBJECT *
 *************************)

spec create_default_object (l, pr, cl, ext)

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : Obj) * (#cl == undefined) * (#ext == undefined) *
	   empty_fields(#l : ) ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> "Object") * ((#l, "@extensible") -> true) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : Obj, #cl : Str, #ext : Bool) *
        empty_fields(#l : ) ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> #cl) * ((#l, "@extensible") -> #ext) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : Obj) * (#cl == undefined) * (#ext == undefined) *
	   ((#l, "@proto") -> null) * empty_fields(#l : "@proto") ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> "Object") * ((#l, "@extensible") -> true) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal;

    [[ (l == #l) * (pr == #pr) * (cl == #cl) * (ext == #ext) *
	   types(#l : Obj, #cl : Str, #ext : Bool) *
       ((#l, "@proto") -> null) * empty_fields(#l : "@proto") ]]
    [[ ((#l, "@proto") -> #pr) * ((#l, "@class") -> #cl) * ((#l, "@extensible") -> #ext) * empty_fields(#l : "@proto", "@class", "@extensible") *
	   (ret == #l) ]]
    normal

proc create_default_object (l, pr, cl, ext) {

 			goto [cl = undefined] scl text;
 	scl:	cl := "Object";
 	text:	goto [ext = undefined] sext setall;
 	sext:	ext := true;

 	setall:	[l, "@proto"] := pr;
 			[l, "@class"] := cl;
 			[l, "@extensible"] := ext;

 	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

(* ****** *)
(* ERRORS *)
(* ****** *)

spec Error_construct (xsc, vthis, v)

    (* Error constructor without message *)
    [[ (v == undefined) * (vthis == #vthis) *
	   types (#vthis : Obj) *
       ((#vthis, "@class") -> #cls) * ((#vthis, "@extensible") -> #ext) ]]
    [[ (ret == #vthis) * ((#vthis, "@class") -> "Error") * ((#vthis, "@extensible") -> true) ]]
    normal

proc Error_construct (xsc, vthis, v) {
			xret := vthis;

			[vthis, "@class"] := "Error";
			[vthis, "@extensible"] := true;

			goto [v = undefined] rlab mess;

	mess:	xerr := "i__toString" (v) with elab;
			[xret, "message"] := {{ "d", xerr, true, false, true }};

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xerr, elab;
};

(* ********* *)
(* TYPEERROR *)
(* ********* *)

spec TypeError_call (xsc, vthis, v)

    [[ (v == undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lterr_proto, "Error", true);

			xret := "Error_construct" (undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec TypeError (v)

    [[ (v == undefined) ]]
    [[ isTypeError(ret) ]]
    normal

proc TypeError (v) {
			xret := "TypeError_call" (undefined, undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* ************** *)
(* REFERENCEERROR *)
(* ************** *)

spec ReferenceError_call (xsc, vthis, v)

    [[ (v == undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lrferr_proto, "Error", true);

			xret := "Error_construct" (undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec ReferenceError (v)

    [[ (v == undefined) ]]
    [[ isReferenceError(ret) ]]
    normal

proc ReferenceError (v) {
			xret := "ReferenceError_call" (undefined, undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* *********** *)
(* SYNTAXERROR *)
(* *********** *)

spec SyntaxError_call (xsc, vthis, v)

    [[ (v == undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError_call (xsc, vthis, v) {
			xret := new ();
			xret := "create_default_object" (xret, $lserr_proto, "Error", true);

			xret := "Error_construct" (undefined, xret, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec SyntaxError (v)

    [[ (v == undefined) ]]
    [[ isSyntaxError(ret) ]]
    normal

proc SyntaxError (v) {
			xret := "SyntaxError_call" (undefined, undefined, v) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err: 	xret, elab;
};

(* ****************************************
   *** *** ***   INITIAL HEAP   *** *** ***
   **************************************** *)

pred initialHeapPre () :
    empty_fields( $lg : ) * empty_fields ( $lobj_proto : );

pred initialHeapPost () :
    (($lg,         "@class") -> "Object") * (($lg,         "@proto") -> $lobj_proto) * (($lg,         "@extensible") -> true) * empty_fields ( $lg : "@class", "@proto", "@extensible" ) *
	(($lobj_proto, "@class") -> "Object") * (($lobj_proto, "@proto") -> null)      * (($lobj_proto, "@extensible") -> true) * empty_fields ( $lobj_proto : "@class", "@proto", "@extensible" );

spec setupInitialHeap ()

	[[ initialHeapPre() ]]
	[[ initialHeapPost() * (ret == empty) ]]
	normal

proc setupInitialHeap () {

			(* Global object *)

			xret := "create_default_object" ($lg, $lobj_proto, "Object", true);

			(* Object.prototype *)

			xret := "create_default_object" ($lobj_proto, null, "Object", true);

	rlab:	xret := empty
}
with
{
	ret:	xret, rlab;
};

(* *************************************
   *** *** ***   AUXILIARY   *** *** ***
   ************************************* *)

(* **********************
   *** i__isPrimitive ***
   ********************** *)

spec i__isPrimitive (v)

   [[ v == undefined ]]
   [[ ret == true ]]
   normal;

   [[ v == null ]]
   [[ ret == true ]]
   normal;

   [[ types (v : $$int_type) ]]
   [[ (ret == true) ]]
   normal;

   [[ types (v : Num) ]]
   [[ (ret == true) ]]
   normal;

   [[ types (v : Bool) ]]
   [[ (ret == true) ]]
   normal;

   [[ types (v : Str) ]]
   [[ (ret == true) ]]
   normal;

   [[ types (v : Obj) ]]
   [[ (ret == false) ]]
   normal

proc i__isPrimitive (v) {
			tv := typeOf(v);

	iu:		goto [(v = undefined) or (v = null) or
	              (typeOf(v) = Bool) or (typeOf(v) <: Num) or
	              (typeOf(v) = Str)] rt rf;

	rt:		xret := true;
			goto rlab;

	rf:		xret := false;
	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* *******************
   *** i__toNumber ***
   ******************* *)

spec i__toNumber (v)

	[[ v == true ]]
	[[ types(ret : $$int_type) * (ret == 1) ]]
	normal;

	[[ v == false ]]
	[[ types(ret : $$int_type) * (ret == 0) ]]
	normal;

	[[ (v == #v) * types(#v : $$int_type) ]]
	[[ ret == #v ]]
	normal;

	[[ (v == #v) * types(#v : Num) ]]
	[[ ret == #v ]]
	normal;

	[[ (v == #v) * types(#v : Str) ]]
	[[ types(ret : Num, #v: Str) *
	   (ret == (string_to_num #v)) ]]
	normal

proc i__toNumber (v) {
    iu:		goto [v = undefined] undef in;
	undef:	xret := nan;
    		goto rlab;

    in:		goto [v = null] null ib;
	null:	xret := 0;
    		goto rlab;

    ib:		goto [typeOf(v) = Bool] bool inum;
	bool:	goto [v = true] is_t is_f;
    is_t:	xret := 1;
    		goto rlab;
    is_f:	xret := 0;
    		goto rlab;

    inum:	goto [typeOf(v) <: Num] num is;
    num:	xret := v;
    		goto rlab;

    is:		goto [typeOf(v) = Str] str io;
    str:	xret := string_to_num v;
    		goto rlab;

    io:		goto [typeOf(v) = Obj] obj oops;
    obj:	xret := "i__toPrimitive" (v, "Number") with elab;
    		xret := "i__toNumber" (xret);
    		goto rlab;

    oops:	xret := "TypeError" ("ToNumber: This should not happen.");
            goto elab;

    rlab:	skip;
    elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};


(* **********************
   *** i__toPrimitive ***
   ********************** *)

spec i__toPrimitive (v, hint)

    [[ v == undefined ]]
    [[ ret == undefined ]]
    normal;

    [[ v == null ]]
    [[ ret == null ]]
    normal;

    [[ (v == #v) * types (#v : $$int_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Num) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Bool) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Str) ]]
	[[ (ret == #v) ]]
	normal

proc i__toPrimitive (v, hint) {
			xret := v;
			tv := typeOf(v);

	iu:		goto [(v = undefined) or (v = null) or
	              (typeOf(v) = Bool) or (typeOf(v) <: Num) or
	              (typeOf(v) = Str)] rlab is_obj;

	is_obj:	print := "object";
			goto [typeOf(v) = Obj] obj oops;
	obj:	xret := "defaultValue" (v, hint) with elab;
			goto rlab;

	oops:	xret := "ToPrimitive: This should not happen.";
			goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ********************
   *** i__toInteger ***
   ******************** *)

spec i__toInteger (v)

	[[ (v == #v) *
	   types(#v : Str) ]]
	[[ types(ret : $$int_type, #v: Str) *
	   (ret == num_to_int (string_to_num #v)) ]]
	normal

proc i__toInteger (v) {
			xret := "i__toNumber" (v) with elab;
			xret := num_to_int (xret);

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *******************
   *** i__toString ***
   ******************* *)

spec i__toString (v)

	[[ (v == #v) *
	   types(#v : $$int_type) ]]
	[[ types(ret : Str, #v : $$int_type) *
	   (ret == (num_to_string #v)) ]]
	normal

proc i__toString (v) {
	iu:		goto [v = undefined] undef in;
	undef:	xret := "undefined";
			goto rlab;

	in:		goto [v = null] null ib;
	null:	xret := "null";
			goto rlab;

	ib:		goto [typeOf(v) = Bool] bool inum;
	bool:	goto [v = true] is_t is_f;
	is_t:	xret := "true";
			goto rlab;
	is_f:	xret := "false";
			goto rlab;

	inum:	goto [typeOf(v) <: Num] num is;
	num:	xret := num_to_string v;
			goto rlab;

	is:		goto [typeOf(v) = Str] str io;
	str:	xret := v;
			goto rlab;

	io:		goto [typeOf(v) = Obj] obj oops;
	obj:	xret := "i__toPrimitive" (v, "String") with elab;
			xret := "i__toString" (xret) with elab;
			goto rlab;

	oops:	xret := "TypeError" ("ToString: This should not happen.");
            goto elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************* *)
(* I__ISDATADESCRIPTOR *)
(* ******************* *)

spec i__isDataDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == undefined ]]
    [[ ret == false ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == true ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 3) == empty) * (l-nth (desc, 4) == empty) ]]
    [[ ret == false ]]
    normal;

    (* Generic descriptor, with value *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 3) == empty) ]]
    [[ ret == true ]]
    normal;

    (* Generic descriptor, with writable *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 4) == empty) ]]
    [[ ret == true ]]
    normal

proc i__isDataDescriptor (desc) {
			goto [desc = undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "d"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	v := l-nth (desc, 3);
			w := l-nth (desc, 4);
			goto [(v = empty) and (w = empty)] rf rt;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* *********************** *)
(* I__ISACCESSORDESCRIPTOR *)
(* *********************** *)

spec i__isAccessorDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == undefined ]]
    [[ ret == false ]]
    normal;

    (* Data descriptor *)
    [[ DataDescriptor(desc) ]]
    [[ ret == false ]]
    normal;

    (* Generic descriptor, no data descriptor components *)
    [[ GenericDescriptor(desc) * (l-nth (desc, 5) == empty) * (l-nth (desc, 6) == empty) ]]
    [[ ret == false ]]
    normal;

    (* Generic descriptor, with get *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 5) == empty) ]]
    [[ ret == true ]]
    normal;

    (* Generic descriptor, with set *)
    [[ GenericDescriptor(desc) * (! l-nth (desc, 6) == empty) ]]
    [[ ret == true ]]
    normal

proc i__isAccessorDescriptor (desc) {
			goto [desc = undefined] rf cont;
	cont:	d := l-nth (desc, 0);
			goto [d = "a"] rt gen;
	gen:	goto [d = "g"] test rf;
	test:	g := l-nth (desc, 5);
			s := l-nth (desc, 6);
			goto [(g = empty) and (s = empty)] rf rt;
	rt:		xret := true;
			goto rlab;
	rf:		xret := false;
	rlab:	skip
}
with
{
	ret : xret, rlab;
};

(* ********************** *)
(* I__ISGENERICDESCRIPTOR *)
(* ********************** *)

spec i__isGenericDescriptor (desc)

    (* Property not defined at all *)
    [[ desc == undefined ]]
    [[ ret == false ]]
    normal;

	(* Data descriptor *)
	[[ DataDescriptor(desc) ]]
	[[ ret == false ]]
	normal;

	(* Generic descriptor, no data descriptor components *)
	[[ GenericDescriptor(desc) *
	   (l-nth (desc, 3) == empty) * (l-nth (desc, 4) == empty) *
	   (l-nth (desc, 5) == empty) * (l-nth (desc, 6) == empty) ]]
	[[ ret == true ]]
	normal;

	(* Generic descriptor, with value *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 3) == empty)) ]]
	[[ ret == false ]]
	normal;

	(* Generic descriptor, with writable *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 4) == empty)) ]]
	[[ ret == false ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 5) == empty)) ]]
	[[ ret == false ]]
	normal;

	(* Generic descriptor, with get *)
	[[ GenericDescriptor(desc) * (! (l-nth (desc, 6) == empty)) ]]
	[[ ret == false ]]
	normal

proc i__isGenericDescriptor (desc) {
			goto [desc = undefined] rf cont;

	cont:	dd := "i__isDataDescriptor" (desc);
			ad := "i__isAccessorDescriptor" (desc);
			xret := not (dd or ad);
			goto rlab;

	rf:		xret := false;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* ******************* *)
(* I__TODATADESCRIPTOR *)
(* ******************* *)

spec i__toDataDescriptor (desc)

    [[ DataDescriptor (#desc) * (desc == #desc) ]]
    [[ (ret == #desc) ]]
    normal

proc i__toDataDescriptor (desc) {
			d := l-nth (desc, 0);
			goto [d = "d"] rd cstr;

	cstr:	goto [d = "a"] ra gen;

	ra:		xret := {{ "d", undefined, false, l-nth (d, 3), l-nth (d, 4) }};
			goto rlab;

	gen:	e := l-nth (desc, 1);
			c := l-nth (desc, 2);
			v := l-nth (desc, 3);
			w := l-nth (desc, 4);

			goto [e = empty] fixe c;
	fixe:	e := false;
	c:		goto [c = empty] fixc v;
	fixc:	c := false;
	v:		goto [v = empty] fixv w;
	fixv:	v := undefined;
	w:		goto [w = empty] fixw fixed;
	fixw:	w := false;

	fixed:	xret := {{ "d", v, w, e, c }};
			goto rlab;

	rd:		xret := desc;
	rlab:	skip
}
with
{
	ret: xret, rlab;
};

(* ********* *)
(* SAMEVALUE *)
(* ********* *)

spec i__sameValue (v1, v2)

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : Undefined, #v2 : Undefined) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : Null, #v2 : Null) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : Bool, #v2 : Bool) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : Str, #v2 : Str) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * types (#v1 : Obj, #v2 : Obj) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (! (#v1 == #v2)) ]]
	[[ ret == false ]]
	normal;

	[[ (v1 == #v1) * (v2 == #v2) * (#v1 == #v2) * (! (#v1 == 0)) * types (#v1 : Num, #v2 : Num) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == 0) * (v2 == 0) * types (v1 : Num, v2 : Num) ]]
	[[ ret == true ]]
	normal;

	[[ (v1 == 0) * (v2 == -0) * types (v1 : Num, v2 : Num) ]]
	[[ ret == false ]]
	normal;

	[[ (v1 == -0) * (v2 == 0) * types (v1 : Num, v2 : Num) ]]
	[[ ret == false ]]
	normal;

	[[ (v1 == -0) * (v2 == -0) * types (v1 : Num, v2 : Num) ]]
	[[ ret == true ]]
	normal

proc i__sameValue (v1, v2) {
			xret := (v1 = v2);

			goto [(typeOf(v1) <: Num)] test2 rlab;
	test2:	goto [(typeOf(v2) <: Num)] inan1 rlab;

	inan1:	goto [(not (v1 = v1))] inan2 zero1;
	inan2:	goto [(not (v2 = v2))] rt    zero1;
	zero1:	goto [v1 = 0] zero2 rlab;
	zero2:	goto [v2 = 0] fix   rlab;

	fix:	sv1 := m_sgn (v1);
			sv2 := m_sgn (v2);

			xret := (sv1 = sv2);
			goto rlab;

	rt:		xret := true;

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

(* ********************* *)
(* CHECKASSIGNMENTERRORS *)
(* ********************* *)

spec i__checkAssignmentErrors (v)

    [[ v == undefined ]]
    [[ ret == true ]]
    normal;

    [[ v == null ]]
    [[ ret == true ]]
    normal;

    [[ types (v : $$int_type) ]]
	[[ ret == true ]]
	normal;

	[[ types (v : Num) ]]
	[[ (ret == true) ]]
	normal;

    [[ types (v : Bool) ]]
    [[ ret == true ]]
    normal;

    [[ types (v : Str) ]]
    [[ ret == true ]]
    normal;

    [[ types (v : Obj) ]]
    [[ ret == true ]]
    normal;

    [[ (v == {{ "o", #l, #prop }}) ]]
    [[ ret == true ]]
    normal;

    [[ (v == {{ "v", #l, #prop }}) * types(#l : Obj, #prop : Str) *
	   (! (#prop == "eval")) * (! (#prop == "arguments"))]]
    [[ ret == true ]]
    normal;

    [[ (v == {{ "v", #l, "eval" }}) ]]
    [[ isSyntaxError(ret) ]]
    error;

    [[ (v == {{ "v", #l, "arguments" }}) ]]
    [[ isSyntaxError(ret) ]]
    error

proc i__checkAssignmentErrors (v) {
			tv := typeOf (v);
			goto [(tv = List)] isref rlab;
	isref:	goto [((l-nth (v, 0) = "v") or (l-nth (v, 0) = "o"))] prep rlab;

	prep:	bv := l-nth (v, 1);
			fv := l-nth (v, 2);

	csyn:	goto [(l-nth (v, 0) = "v") and ((fv = "eval") or (fv = "arguments"))] se rlab;

	rlab:	xret := true;

	se:		xret := "SyntaxError" ();
			goto elab;

	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* ******************** *)
(* CHECKOBJECTCOERCIBLE *)
(* ******************** *)

spec i__checkObjectCoercible (v)

	[[ v == undefined ]]
	[[ isTypeError(ret) ]]
	normal;

	[[ v == null ]]
	[[ isTypeError(ret) ]]
	normal;

	[[ types (v : $$int_type) ]]
	[[ ret == empty ]]
	normal;

	[[ types (v : Num) ]]
	[[ ret == empty ]]
	normal;

	[[ types (v : Bool) ]]
	[[ ret == empty ]]
	normal;

	[[ types (v : Str) ]]
	[[ ret == empty ]]
	normal;

	[[ types (v : Obj) ]]
	[[ ret == empty ]]
	normal

proc i__checkObjectCoercible (v) {

			xret := empty;

	iu:		goto [v = undefined] throw in;

	in:		goto [v = null] throw other;

	other:	goto [(typeOf(v) = Bool) or (typeOf(v) <: Num) or
	              (typeOf(v) = Str) or (typeOf(v) = Obj)] rlab oops;

	oops:	xret := "CheckObjectCoercible: This should not happen.";

	rlab:	skip;

	throw:	xret := "TypeError" ();
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *************** *)
(* CHECKPARAMETERS *)
(* *************** *)

proc i__checkParameters (fid, params) {

			goto [(fid = "eval") or (fid = "arguments")] se pars;

	pars:	n := 0;
			l := l-len (params);

	loop:	goto [n < l] head rlab;
	head:	par := l-nth (params, n);
			goto [(par = "eval") or (par = "arguments")] se next;
	next:	n := n + 1;
			goto loop;

	rlab:	xret := true;

	se:		xret := "SyntaxError" ();
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* **********************************************
   *** *** ***   INTERNAL FUNCTIONS   *** *** ***
   ********************************************** *)

(* *************************
   *** O__GETOWNPROPERTY ***
   ************************* *)

spec o__getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str) *
	   Cell_o (#l, #prop, None) ]]
    [[ Cell_o (#l, #prop, None) *
	   (ret == undefined) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #dx : List) *
	   Cell_o (#l, #prop, #dx) ]]
    [[ Cell_o (#l, #prop, #dx) *
	   (ret == #dx) ]]
    normal

proc o__getOwnProperty (l, prop) {
            x := hasField(l, prop);
            goto [x] hp nhp; 			(* Does the field exist? *)

    nhp:    xret := undefined;		(* Field doesn't exist; return undefined *)
            goto rlab;

    hp:     xret := [l, prop];			(* Field exists; return the descriptor *)

    rlab:   skip
}
with
{
    ret: 	xret, rlab;
};

(* *************************
   *** S__GETOWNPROPERTY ***
   ************************* *)

spec s__getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "None", None, #pv) ]]
    [[ Cell_s (#l, #prop, "None", None, #pv) *
	   (ret == undefined) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "SI", #u, #pv) ]]
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) *
	   (ret == #u) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   Cell_s (#l, #prop, "NSI", #u, #pv) ]]
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) *
	   (ret == #u) ]]
   	normal

proc s__getOwnProperty (l, prop) {

    ch0:	goto [typeOf(l) = Obj] ch1 elab;
    ch1:	goto [typeOf(prop) = Str] ch2 elab;
    ch2:	goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

   	start:	xret := "o__getOwnProperty" (l, prop);
   			goto [xret = undefined] str rlab;

   	str:	idx := "i__toInteger" (prop) with elab;
   			goto [idx < 0] rlab next;

   	next:	sidx := "i__toString" (idx);

   			goto [sidx = prop] index rlab;

   	index:	str := [l, "@primitiveValue"];
   			len := s-len (str);
   			goto [len <= idx] rlab return;

   	return: rstr := s-nth (str, idx);
   			xret := {{ "d", rstr, false, true, false }};

   	rlab: 	skip;
   	elab:	skip
}
with
{
    ret: 	xret, rlab;
   	err: 	xret, elab;
};

(* **********************
   *** GETOWNPROPERTY ***
   ********************** *)

spec getOwnProperty (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   Cell_o (#l, #prop, None) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") ]]
    [[ Cell_o (#l, #prop, None) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") *
	   (ret == undefined) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : Str, #dx : List) *
	   Cell_o (#l, #prop, #dx) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") ]]
    [[ Cell_o (#l, #prop, #dx) * ((#l, "@class") -> #cls) * isClass(#cls, "Non-String") *
	   (ret == #dx) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
    [[ Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == undefined) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : Str, #u : List) *
	   Cell_s (#l, #prop, "SI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
   	[[ Cell_s (#l, #prop, "SI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == #u) ]]
   	normal;

   	[[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : Str, #u : List) *
	   Cell_s (#l, #prop, "NSI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") ]]
   	[[ Cell_s (#l, #prop, "NSI", #u, #pv) * ((#l, "@class") -> #cls) * isClass(#cls, "String") *
	   (ret == #u) ]]
   	normal

proc getOwnProperty (l, prop) {

			class := [l, "@class"];

			goto [class = "String"] sgop ogop;

	sgop:	xret := "s__getOwnProperty" (l, prop) with elab;
			goto rlab;

	ogop:	xret := "o__getOwnProperty" (l, prop) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *******************
   *** GETPROPERTY ***
   ******************* *)

spec getProperty (l, prop)

	[[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str) *
	   Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == #gp_aux_1) ]]
	normal

proc getProperty (l, prop) {

			[* unfold Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) *]
    ch0:	goto [typeOf(l) = Obj] ch1 elab;
    ch1:	goto [typeOf(prop) = Str] ch2 elab;
    ch2:	goto [0 < s-len prop] ch3 elab;
    ch3:	goto [not (s-nth(prop, 0) = "@")] start elab;

	start:	xret := "getOwnProperty" (l, prop) with elab;
			goto [xret = undefined] next rlab;

	next:	proto := [l, "@proto"];
			goto [proto = null] rlab call;

	call:	xret := "getProperty" (proto, prop) with elab;

			[* fold Pi (#l, #prop, #gp_aux_0, #gp_aux_1, #gp_aux_2, #gp_aux_3, #gp_aux_4) *]
    rlab:   skip;
    elab:	skip
}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* *** *)
(* GET *)
(* *** *)

spec get (l, prop)

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == undefined) ]]
    [[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == undefined) * (ret == undefined) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1) ]]
    [[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal

proc get (l, prop) {
			xret := "getProperty" (l, prop) with elab;
			goto [xret = undefined] rlab def;		(* Does the field exist?    *)

	def:	d := l-nth (xret, 0);					(* Get the descriptor type  *)
			xret := l-nth (xret, 1);				(* Get the value/getter     *)
			goto [d = "d"] rlab acc;				(* Is it a data descriptor? *)

	acc:	goto [xret = undefined] rlab get;		(* Is the getter defined?               *)
	get:	xsc := [xret, "@scope"];				(* Get the scope of the getter          *)
			fun := [xret, "@call"];					(* Get the name of the getter           *)
			xret := fun (xsc, l) with elab;			(* Call the getter, errors could happen *)
			goto [xret = empty] undef rlab;
	undef:	xret := undefined;

	rlab:	skip;
	elab:	skip
}
with
{
    ret: xret, rlab;
    err: xret, elab;
};

(* ******** *)
(* GETVALUE *)
(* ******** *)

spec i__getValue (v)

    [[ v == undefined ]]
    [[ ret == undefined ]]
    normal;

    [[ v == null ]]
    [[ ret == null ]]
    normal;

    [[ (v == #v) * types (#v : $$int_type) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Num) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Bool) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Str) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == #v) * types (#v : Obj) ]]
	[[ (ret == #v) ]]
	normal;

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : Obj, #field : Str) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == undefined) ]]
    [[ Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (ret == undefined) ]]
    normal;

    [[ (v == {{ "o", #obj, #field }}) * types (#obj : Obj, #field : Str) * isNamedProperty(#field) *
       Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1)  ]]
    [[ Pi (#obj, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : Str) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (#g_aux_1 == undefined) ]]
    [[ Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * (ret == undefined) ]]
    normal;

    [[ (v == {{ "v", $lg, #field }}) * types (#field : Str) * isNamedProperty(#field) *
       Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * DataDescriptor (#g_aux_1)  ]]
    [[ Pi ($lg, #field, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * desc_val (#g_aux_1, #desc_val) * (ret == #desc_val) ]]
    normal;

    [[ (v == {{ "v", #obj, #field }}) * (! (#obj == $lg)) * ((#obj, #field) -> #value) * isNamedProperty(#field) *
       types (#obj : Obj, #field : Str) ]]
    [[ ((#obj, #field) -> #value) * (ret == #value) ]]
    normal

proc i__getValue (v) {

			goto [(typeOf(v) = List)] rcand dflt;

    rcand:  rtype := l-nth (v, 0);
            goto [(rtype = "v") or (rtype = "o")] init dflt;

	init:	rbase := l-nth (v, 1);
			rfield := l-nth (v, 2);
			goto [rbase = undefined] throw prim;

	prim:	prim := "i__isPrimitive" (rbase);
            goto [prim] is_pr ref;

	is_pr:	xret := "i__toObject" (rbase) with elab;
			xret := "getProperty" (xret, rfield) with elab;
			goto [xret = undefined] rlab def;
	def:	d := l-nth (xret, 0);						(* Get the descriptor type *)
			xret := l-nth (xret, 1);					(* Get the value/getter *)
			goto [d = "d"] rlab acc;				(* Is it a data descriptor? *)

	acc:	goto [xret = undefined] rlab get;		(* Is the getter defined? *)
	get:	xsc := [xret, "@scope"];				(* Get the scope of the getter *)
			fun := [xret, "@call"];					(* Get the name of the getter *)
			xret := fun (xsc, rbase) with elab;		(* Call the getter, errors could happen *)
			goto [xret = empty] undef rlab;
	undef:	xret := undefined;

	ref:	goto [(typeOf(v) = List) and (l-nth (v, 0) = "o")] oref vref;

	oref:	xret := "get" (rbase, rfield) with elab;
			goto rlab;

	vref:	goto [rbase = $lg] lg er;

	lg:		xret := "get" (rbase, rfield) with elab;
			goto rlab;

	er:		xret := [rbase, rfield];
			goto rlab;

	dflt:	xret := v;
	rlab:	skip;

	throw:  xret := "ReferenceError" ();
    elab:   skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *********** *)
(* HASPROPERTY *)
(* *********** *)

spec hasProperty (l, prop)

	[[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, undefined, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #cls, undefined, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == false) ]]
	normal;

	[[ (l == #l) * (prop == #prop) *
	   types (#l : Obj, #prop : Str, #cls : List, #desc : List) *
	   Pi (#l, #prop, #cls, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) ]]
	[[ Pi (#l, #prop, #cls, #desc, #gp_aux_2, #gp_aux_3, #gp_aux_4) * (ret == true) ]]
	normal

proc hasProperty (l, prop) {
			xret := "getProperty" (l, prop) with elab;

	rlab:	xret := not (xret = undefined);
	elab:	skip
}
with
{
	ret: 	xret, rlab;
	err:	xret, elab;
};

(* ************** *)
(* DELETEPROPERTY *)
(* ************** *)

spec deleteProperty (l, prop, throw)

    [[ (l == #l) * (prop == #prop) * (throw == true) *
	   types(#l : Obj, #prop: Str, #cls: Str, #v : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #v) *
	   desc_conf (#v, false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #v) *
	   isTypeError(err) ]]
    error;

	[[ (l == #l) * (prop == #prop) * (throw == true) *
	   types(#l : Obj, #prop: Str, #cls: Str, #pv : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "SI", #desc, #pv) ]]
	[[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "SI", #desc, #pv) *
	   isTypeError(err) ]]
	error;

	[[ (l == #l) * (prop == #prop) * (throw == true) *
	   types(#l : Obj, #prop: Str, #cls: Str, #pv : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "NSI", #desc, #pv) *
	   desc_conf (#desc, false)]]
	[[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "NSI", #desc, #pv) *
	   isTypeError(err) ]]
	error;

    [[ (l == #l) * (prop == #prop) *
	   types(#l : Obj, #prop: Str, #cls: Str, #v : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #v) *
	   desc_conf (#v, true) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   (ret == true) ]]
    normal;

    [[ (l == #l) * (prop == #prop) *
	   types(#l : Obj, #prop: Str) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   (ret == true) ]]
    normal;

	[[ (l == #l) * (prop == #prop) *
	   types(#l : Obj, #prop: Str, #cls: Str, #pv : Str) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) ]]
	[[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   (ret == true)]]
	normal;

	[[ (l == #l) * (prop == #prop) *
	   types(#l : Obj, #prop: Str, #cls: Str, #pv : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "NSI", #desc, #pv) *
	   desc_conf (#desc, true) ]]
	[[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   (ret == true) ]]
	normal

proc deleteProperty (l, prop, throw) {

			xret := "getOwnProperty" (l, prop) with elab;
			goto [xret = undefined] dt cont;

	cont:	c := l-nth (xret, 4);
			goto [c] del reject;
	del:	delete (l, prop);

	dt:		xret := true;
			goto rlab;

	df:		xret := false;
	rlab:	skip;

    reject: goto [throw] tt df;

    tt:     xret := "TypeError" ();
    elab:   skip
}
with
{
	ret: xret, rlab;
	err: xret, elab;
};

spec canPut (l, prop)

    (* Property not defined at all, returning "@extensible" *)
    [[ (l == #l) * (prop == #prop) *
	   types(#ext : Bool) *
	   Pi (#l, #prop, #g_aux_0, undefined, #g_aux_2, #g_aux_3, #g_aux_4) *
       ((#l, "@extensible") -> #ext) ]]
    [[ Pi (#l, #prop, #g_aux_0, undefined, #g_aux_2, #g_aux_3, #g_aux_4) *
       ((#l, "@extensible") -> #ext) *
	   (ret == #ext) ]]
    normal;

	(* Property defined in the object itself, returning writable *)
	[[ (l == #l) * (prop == #prop) *
	   types(#writ : Bool) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, #writ) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) *
	   (ret == #writ) ]]
	normal;

	(* Property defined as a data descriptor outside, but object not extensible, return false *)
	[[ (l == #l) * (prop == #prop) *
	   types (#g_aux_2 : List) *
       Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * (1 <# l-len (#g_aux_2)) * ((#l, "@extensible") -> false) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> false) * (ret == false) ]]
	normal;

	(* Property defined as a data descriptor outside, object extensible, return writable *)
	[[ (l == #l) * (prop == #prop) *
	   types (#g_aux_2 : List, #writ : Bool) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, #writ) * (1 <# l-len (#g_aux_2)) *
	   ((#l, "@extensible") -> true) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> true) * (ret == #writ) ]]
	normal

proc canPut (l, prop) {

			[* unfold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
            xret := "getOwnProperty" (l, prop) with elab;
			[* fold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
	op:		goto [xret = undefined] nop odesc; 	(* Does the own property exist? *)

	odesc:	d := l-nth (xret, 0);						(* It does; get the descriptor type *)
			goto [d = "d"] odd nop;					    (* Is the descriptor a data descriptor? *)

	odd:	xret := l-nth (xret, 2);					(* It is; return the Writable attribute *)
			goto rlab;

	nop:	e := [l, "@extensible"];				   (* Get the extensible property *)
			xret := "getProperty" (l, prop) with elab; (* Does the property exist? *)
			goto [xret = undefined] ext desc;		   (* It doesn't; return extensible *)

	desc:	d := l-nth (xret, 0);					(* Get the descriptor type *)
			v := l-nth (xret, 2);					(* Get the writable/setter *)
			goto [d = "d"] dd ad;					(* Is it a data descriptor? *)

	dd:		goto [e] wr ext;						(* Yes; is the object extensible? *)
	wr:		xret := v;								(* Yes; return writable *)
			goto rlab;

	ad:		xret := not (v = undefined); 			(* Accessor descriptor *)
			goto rlab;

	ext:	xret := e;								(* Return extensible *)

    rlab:   skip;
    elab:	skip
}
with
{
    ret: 	xret, rlab;
    err:	xret, elab;
};

(* ******************** *)
(* O__DEFINEOWNPROPERTY *)
(* ******************** *)

spec o__defineOwnProperty (l, prop, desc, throw)

	(*
	 *  1. {{ "d", _,   _,   _, false }} - {{ "d", _,   _,   _, true }} => Reject
	 *  2. {{ "d", _,   _, true, false }} - {{ "d", _,   _, false, false }} => Reject
	 *  3. {{ "d", _,   _, false, false }} - {{ "d", _,   _, true, false }} => Reject
	 *  4. {{ "d",     _, false,   _, false }} - {{ "d",     _,    true,      _,    false }} => Reject
 	 *  5. {{ "d", #cval, false,   _, false }} - {{ "d", #nval,    false,      _,    false }} => if #cval !== nval then Reject
	 *
	 *  6. {{ "d",     _,   _,   _, true }} - {{ "d", #nval, #nwrit, #nenum, #nconf }} => {{ "d", #nval, #nwrit, #nenum, #nconf }}
	 *
	 *)

    (* Current is undefined, object is not extensible, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
    error;

    (* Current is undefined, object is not extensible, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> false) *
	   (ret == false) ]]
    normal;

    (* Current is undefined, object is not extensible, string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
    error;

    (* Current is undefined, object is not extensible, string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> false) *
	   (ret == false) ]]
    normal;

	(* Current is undefined, object is extensible, non-string, data descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #throw : Bool) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   DataDescriptor (#desc) *
	   ((#l, "@extensible") -> true) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) * ((#l, "@extensible") -> true) *
	   (ret == true) ]]
    normal;

	(* Current is undefined, object is extensible, string, data descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #throw : Bool) *
	   ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   DataDescriptor (#desc) *
	   ((#l, "@extensible") -> true) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@extensible") -> true) *
	   (ret == true) ]]
    normal;

    (* Current is defined, configurable is true, data descriptor, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#dcur, true) *
       ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   ((#l, "@extensible") -> #ext) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) * ((#l, "@extensible") -> #ext) *
	   (ret == true) ]]
    normal;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, true) * desc_conf(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, true) * desc_conf(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#ed : Bool, #ec : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#ed : Bool, #ec : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, true) * desc_writ(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, true) * desc_writ(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writable is true, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool, #throw : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#dcur, true) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) *
	   (ret == true) ]]
	normal;

	(* Current is defined, data descriptor, writable, sending only value, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool, #throw : Bool) *
       (#desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (! (#gval == empty)) *
	   desc_writ(#dcur, true) * desc_enum(#dcur, #dec) * desc_conf(#dcur, #dcc) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   	Cell_o (#l, #prop, {{ "d", #gval, true, #dec, #dcc }}) *
	   (ret == true) ]]
	normal

proc o__defineOwnProperty (l, prop, desc, throw) {

			xret := true;

			current := "getOwnProperty" (l, prop) with celab;
			extensible := [l, "@extensible"];

			goto [(current = undefined)] cuf getall;
	cuf:	goto [(extensible = false)] reject l4;

	l4:		gd := "i__isGenericDescriptor" (desc);
			dd := "i__isDataDescriptor" (desc);

			goto [gd or dd] l4a1 l4b;

	l4a1:	ndesc := "i__toDataDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	l4b:	ndesc := "i__toAccessorDescriptor" (desc);
			[l, prop] := ndesc;
			goto acc_t;

	getall:	goto [l-nth (desc, 0) = "d"] ddd odd;

			(* Data *)
	ddd:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := l-nth (desc, 1);
			dw := l-nth (desc, 2);
			dg := empty;
			ds := empty;
			goto l5;

	odd:	goto [l-nth (desc, 0) = "a"] add gdd;

			(* Accessor *)
	add:	de := l-nth (desc, 3);
			dc := l-nth (desc, 4);
			dv := empty;
			dw := empty;
			dg := l-nth (desc, 1);
			ds := l-nth (desc, 2);
			goto l5;

			(* Generic *)
	gdd:	de := l-nth (desc, 1);
			dc := l-nth (desc, 2);
			dv := l-nth (desc, 3);
			dw := l-nth (desc, 4);
			dg := l-nth (desc, 5);
			ds := l-nth (desc, 6);

	l5:		goto [(de = empty) and (dc = empty) and (dv = empty) and
			      (dw = empty) and (dg = empty) and (ds = empty)] acc_t l6;

	l6:		goto [l-nth (current, 0) = "d"] chd cha;

	chd:	goto [(dg = empty) and (ds = empty)] chd1 l7;
	chd1:	t1 := "i__sameValue" (dc, l-nth (current, 4));
			goto [t1] chd2 l7;
	chd2:	t2 := "i__sameValue" (de, l-nth (current, 3));
			goto [t2] chd3 l7;
	chd3:	t3 := "i__sameValue" (dw, l-nth (current, 2));
			goto [t3] chd4 l7;
	chd4:	t4 := "i__sameValue" (dv, l-nth (current, 1));
			goto [t4] acc_t l7;

	cha:	goto [(dv = empty) and (dw = empty)] cha1 l7;
	cha1:	t1 := "i__sameValue" (dc, l-nth (current, 4));
			goto [t1] cha2 l7;
	cha2:	t2 := "i__sameValue" (de, l-nth (current, 3));
			goto [t2] cha3 l7;
	cha3:	t3 := "i__sameValue" (ds, l-nth (current, 2));
			goto [t3] cha4 l7;
	cha4:	t4 := "i__sameValue" (dg, l-nth (current, 1));
			goto [t4] acc_t l7;

	l7:		cc := l-nth (current, 4);
			ce := l-nth (current, 3);
			goto [(cc = false)] l71 l8;
	l71:	goto [(dc = true)] reject l72;
	l72:	goto [de = empty] l8 l73;
	l73:	goto [not (ce = de)] reject l8;

	l8:		ct := l-nth (current, 0);
			cvg := l-nth (current, 1);
			cws := l-nth (current, 2);

			gd := "i__isGenericDescriptor" (desc);
			goto [gd] l12 l9;

	l9:		cdd := "i__isDataDescriptor" (current);
			ddd := "i__isDataDescriptor" (desc);

			goto [not (cdd = ddd)] l9a l10;

	l9a:	goto [cc = false] reject change;
	change:	goto [cdd = true] toa tod;
	toa:	goto [dg = empty] sg gs;
	sg:		dg := undefined;
	gs:		goto [ds = empty] ss ge1;
	ss:		ds := undefined;
	ge1:	goto [de = empty] se1 gc1;
	se1:	de := ce;
	gc1:	goto [dc = empty] sc1 spa;
	sc1:	dc := cc;
	spa:	[l, prop] := {{ "a", dg, ds, de, dc }};
			goto acc_t;

	tod:	goto [dv = empty] sv gw;
	sv:		dv := undefined;
	gw:		goto [dw = empty] sw ge2;
	sw:		dw := false;
	ge2:	goto [de = empty] se2 gc2;
	se2:	de := ce;
	gc2:	goto [dc = empty] sc2 spd;
	sc2:	dc := cc;
	spd:	[l, prop] := {{ "d", dv, dw, de, dc }};
			goto acc_t;

	l10:	goto [cdd = true] l10a l11;

	l10a:	goto [cc = false] l10ai l12;
	l10ai:	goto [(cws = false) and (dw = true)] reject l10aii;
	l10aii:	goto [(cws = false) and (not (dv = empty))] sv l12;
	sv:		t1 := "i__sameValue" (cvg, dv);
	 		goto [not t1] reject l12;

	l11: 	t1 := "i__sameValue" (dg, l-nth (current, 1));
			t2 := "i__sameValue" (ds, l-nth (current, 2));
			goto [(cc = false) and
	             (((not (dg = empty)) and (not t1)) or
	              ((not (ds = empty)) and (not t2)))] reject l12;

	l12:	re := de;
			rc := dc;
			goto [de = empty] rec red;
	rec:	re := l-nth (current, 3);
	red:	goto [dc = empty] rcd rd;
	rcd:	rc := l-nth (current, 4);

	rd: 	goto [ct = "d"] l12d l12a;

	l12d:	rv := dv;
			rw := dw;
			goto [dv = empty] rvc rvd;
	rvc:	rv := l-nth (current, 1);
	rvd:	goto [dw = empty] rwd setd;
	rwd:	rw := l-nth (current, 2);
	setd:	[l, prop] := {{ "d", rv, rw, re, rc }};
			goto acc_t;

	l12a:	rg := dg;
			rs := ds;
			goto [dg = empty] rgc rgd;
	rgc:	rg := l-nth (current, 1);
	rgd:	goto [ds = empty] rsd seta;
	rsd:	rs := l-nth (current, 2);
	seta:	[l, prop] := {{ "a", rg, rs, re, rc }};
			goto acc_t;

	acc_t:	xret := true;
			goto rlab;

	acc_f:	xret := false;
	rlab:	skip;

	celab:	xerr := current;
			goto elab;

    reject: goto [throw] tt acc_f;
    tt:     xerr := "TypeError" ();
    elab:   skip
}
with
{
	ret: xret, rlab;
	err: xerr, elab;
};

(* ***************** *)
(* DEFINEOWNPROPERTY *)
(* ***************** *)

(*
 * General defineOwnProperty
 * Branch on class: array or non-array
 *)
spec defineOwnProperty(l, prop, desc, throw)

    (* Current is undefined, object is not extensible, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
    error;

    (* Current is undefined, object is not extensible, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) * ((#l, "@extensible") -> false) *
	   (ret == false) ]]
    normal;

    (* Current is undefined, object is not extensible, string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
    error;

    (* Current is undefined, object is not extensible, string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   ((#l, "@extensible") -> false) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) * ((#l, "@extensible") -> false) *
	   (ret == false) ]]
    normal;

	(* Current is undefined, object is extensible, non-string, data descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #throw : Bool) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, None) *
	   DataDescriptor (#desc) *
	   ((#l, "@extensible") -> true) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) * ((#l, "@extensible") -> true) *
	   (ret == true) ]]
    normal;

	(* Current is undefined, object is extensible, string, data descriptor, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #throw : Bool) *
	   ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "None", None, #pv) *
	   DataDescriptor (#desc) *
	   ((#l, "@extensible") -> true) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "String") * Cell_s (#l, #prop, "NSI", #desc, #pv) * ((#l, "@extensible") -> true) *
	   (ret == true) ]]
    normal;

    (* Current is defined, configurable is true, data descriptor, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #cls : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#dcur, true) *
       ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   ((#l, "@extensible") -> #ext) ]]
    [[ ((#l, "@class") -> #cls) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) * ((#l, "@extensible") -> #ext) *
	   (ret == true) ]]
    normal;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, true) * desc_conf(#dcur, false) *
       ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is true, non-string, don't throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, true) * desc_conf(#dcur, false) *
       ((#l, "@class") -> #cls) * isClass(#cls, "Non-Array") * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#ed : Bool, #ec : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurable is false, data descriptor, configurable is false, enumerables are different, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#ed : Bool, #ec : Bool) *
       DataDescriptor(#desc) * desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #ed) * desc_enum(#dcur, #ec) * (! (#ed == #ec)) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == true) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, true) * desc_writ(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   isTypeError(err) ]]
	error;

	(* Current is defined, configurables are false, enumerables are same, writables false and true, non-string, throw *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#desc, true) * desc_writ(#dcur, false) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #dcur) *
	   (ret == false) ]]
	normal;

	(* Current is defined, configurables are false, enumerables are same, writable is true, non-string, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == false) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool) *
	   types (#enum : Bool) *
       DataDescriptor(#desc) *
	   desc_conf(#desc, false) * desc_conf(#dcur, false) *
	   desc_enum(#desc, #enum) * desc_enum(#dcur, #enum) *
	   desc_writ(#dcur, true) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * Cell_o (#l, #prop, #desc) *
	   (ret == true) ]]
	normal;

	(* Current is defined, data descriptor, writable, sending only value, success *)
    [[ (l == #l) * (prop == #prop) * (desc == #desc) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #desc : List, #dcur : List, #throw : Bool, #ext : Bool, #throw : Bool) *
       (#desc == {{ "g", empty, empty, #gval, empty, empty, empty }}) * (! (#gval == empty)) *
	   desc_writ(#dcur, true) * desc_enum(#dcur, #dec) * desc_conf(#dcur, #dcc) *
       ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * Cell_o (#l, #prop, #dcur) ]]
    [[ ((#l, "@class") -> #cls) * ((#l, "@extensible") -> #ext) *
	   Cell_o (#l, #prop, {{ "d", #gval, true, #dec, #dcc }}) *
	   (ret == true) ]]
	normal

proc defineOwnProperty (l, prop, desc, throw) {

			class := [l, "@class"];

			goto [class = "Array"] adop odop;

	adop:	xret := "a__defineOwnProperty" (l, prop, desc, throw) with elab;
			goto rlab;

	odop:	xret := "o__defineOwnProperty" (l, prop, desc, throw) with elab;

	rlab:	skip;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};

(* *** *)
(* PUT *)
(* *** *)

	(* ******* UNSUCCESSFUL PUT ******* *)

	(*
	 *	1. Property is not defined in the prototype chain at all, object is not extensible, throw
	 *  2. Property is defined in the object (DD), data descriptor is not writable, throw
	 *  3. Property is defined in the prototype chain, not in the object (DD), object is not extensible, throw
	 *  4. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is not writable, throw
	 *)

	 (* ******* SUCCESSFUL PUT ******* *)

	(*
	 *  5. Property is not defined in the prototype chain at all, prototype chain of length = 1, object is extensible
	 *  6. Property is not defined in the prototype chain at all, prototype chain of length > 1, object is extensible
	 *	7. Property is defined in the object (DD), data descriptor is writable
	 *  8. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is writable
	 *)

spec put (l, prop, value, throw)

	(* 1. Property is not defined within the prototype chain at all, object not extensible, throw *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == true) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   ((#l, "@extensible") -> false) *
	   Pi (#l, #prop, #g_aux_0, undefined, #g_aux_2, #g_aux_3, #g_aux_4) ]]
	[[ Pi (#l, #prop, #g_aux_0, undefined, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
    error;

	(* 2. Property is defined in the object, data descriptor that is not writable, throw *)
	[[ (l == #l) * (prop == #prop) * (value == #value) * (throw == true) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   ((#l, "@extensible") -> false) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* 3. Property is defined in the prototype chain, not in the object, object not extensible, throw *)
	[[ (l == #l) * (prop == #prop) * (value == #value) * (throw == true) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   ((#l, "@extensible") -> false) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* 4. Property is defined in the prototype chain, not in the object, object extensible, property not writable, throw *)
	[[ (l == #l) * (prop == #prop) * (value == #value) * (throw == true) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   ((#l, "@extensible") -> true) *
	   Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> true) *
	   isTypeError(err) ]]
	error;

	(* 5. Property is not defined within the prototype chain, only one element, non-string *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
       Pi (#l, #prop, {{ #cls }}, undefined, {{ #l }}, {{ false }}, {{ "" }}) *
	   ((#l, "@extensible") -> true) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #value, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> null) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* 6. Property is not defined within the prototype chain, more than one element, non-string
	       Must reform the prototype chain manually in the post-condition, extra tricky *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
       Pi (#l, #prop, (#cls :: #pcls), undefined, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #value, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, undefined, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* 7. Property is defined in the object, data descriptor that is writable, success *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #throw : Bool, #ext : Bool) *
	   types (#denum : Bool, #dconf : Bool) *
       Pi (#l, #prop, {{ #cls }}, {{ "d", #dval, true, #denum, #dconf }}, {{ #l }}, #g_aux_3, #g_aux_4) *
	   (! (#dval == empty)) * (! (#value == empty)) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") *
	   ((#l, "@extensible") -> #ext) ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #value, true, #denum, #dconf }}, {{ #l }}, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> #ext) *
	   (ret == empty) ]]
    normal;

	(* 8. Property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is writable *)
    [[ (l == #l) * (prop == #prop) * (value == #value) * (throw == #throw) *
	   types (#l : Obj, #prop : Str, #throw : Bool) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
	   types (#dcenum : Bool, #dcconf : Bool) *
       Pi (#l, #prop, (#cls :: #pcls), {{ "d", #dcval, true, #dcenum, #dcconf }}, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #value, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, {{ "d", #dcval, true, #dcenum, #dcconf }}, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal

proc put (l, prop, value, throw) {
            xret := "canPut" (l, prop) with elab;
            goto [xret] cp reject;

			[* unfold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
    cp:     xret := "getOwnProperty" (l, prop) with elab;
    		dd := "i__isDataDescriptor" (xret);
    		goto [dd] dd gp;

    dd:		desc := {{ "g", empty, empty, value, empty, empty, empty }};
    		xret := "defineOwnProperty" (l, prop, desc, throw) with elab;
			[* fold Pi (#l, #prop, #g_aux_new_1, {{ "d", #value, true, #denum, #dconf }}, {{ #l }}, #g_aux_new_3, #g_aux_new_4) *]
    		goto remp;

			[* fold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
    gp:		xret := "getProperty" (l, prop) with elab;
    		ad := "i__isAccessorDescriptor" (xret);
    		goto [ad] ad def;

    ad:		s := l-nth (xret, 2);
    		xsc := [s, "@scope"];
    		fun := [s, "@call"];
    		xret := fun (xsc, l, value) with elab;
    		goto remp;

    def:	desc := {{ "d", value, true, true, true }};
			[* unfold Pi (#l, #prop, #g_aux_0, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) *]
    		xret := "defineOwnProperty" (l, prop, desc, throw) with elab;
			[* fold Pi (#l, #prop, #g_aux_new_1, {{ "d", #value, true, true, true }}, {{ #l }}, #g_aux_new_3, #g_aux_new_4) *]
			skip;

    remp:   xret := empty;
    rlab:   skip;

    reject: xret := empty;
			goto [throw] tt rlab;

    tt:     xret := "TypeError" ();
    elab:   skip
}
with
{
    ret: xret, rlab;
    err: xret, elab;
};

(* ******** *)
(* PUTVALUE *)
(* ******** *)

(*
 * 1. All the cases in which put is not possible
 * 2. ("g", empty, empty, #value, empty, empty, empty)
 * 3. ("d", #value, #writ, #enum, #conf)
 *)

spec i__putValue (v, w)

    [[ v == undefined ]]
    [[ isReferenceError(err) ]]
    error;

    [[ v == null ]]
    [[ isReferenceError(err) ]]
    error;

    [[ types (v : $$int_type) ]]
	[[ isReferenceError(err) ]]
	error;

    [[ types (v : Num) ]]
	[[ isReferenceError(err) ]]
	error;

    [[ types (v : Bool) ]]
    [[ isReferenceError(err) ]]
    error;

    [[ types (v : Str) ]]
    [[ isReferenceError(err) ]]
    error;

    [[ types (v : Obj) ]]
    [[ isReferenceError(err) ]]
    error;

    (* Variable reference, environment record, directly put in heap *)
    [[ (v == {{ "v", #obj, #field }}) * (w == #w) * (! (#obj == $lg)) * ((#obj, #field) -> #oldvalue) * isNamedProperty(#field) *
       types (#obj : Obj, #field : Str) ]]
    [[ ((#obj, #field) -> #w) * (ret == empty) ]]
    normal;

	(* Object reference, property is not defined within the prototype chain at all, object not extensible, throw *)
    [[ (v == {{ "o", #l, #prop }}) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   ((#l, "@extensible") -> false) * Pi (#l, #prop, #cls, undefined, #g_aux_4, #g_aux_5, #g_aux_6) ]]
	[[ ((#l, "@extensible") -> false) * Pi (#l, #prop, #cls, undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   isTypeError(err) ]]
    error;

	(* Object reference, property is defined in the object, data descriptor that is not writable, throw *)
	[[ (v == {{ "o", #l, #prop }}) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* Object reference, property is defined in the prototype chain, not in the object, object not extensible, throw *)
	[[ (v == {{ "o", #l, #prop }}) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   DataDescriptor(#g_aux_1) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* Object reference, property is defined in the prototype chain, not in the object, object extensible, property not writable, throw *)
	[[ (v == {{ "o", #l, #prop }}) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> true) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> true) *
	   isTypeError(err) ]]
	error;

	(* Variable reference, $lg, property is not defined within the prototype chain at all, object not extensible, throw *)
    [[ (v == {{ "v", #l, #prop }}) * isNamedProperty(#prop) * (#l == $lg) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   ((#l, "@extensible") -> false) * Pi (#l, #prop, #cls, undefined, #g_aux_4, #g_aux_5, #g_aux_6) ]]
	[[ ((#l, "@extensible") -> false) * Pi (#l, #prop, #cls, undefined, #g_aux_4, #g_aux_5, #g_aux_6) *
	   isTypeError(err) ]]
    error;

	(* Variable reference, $lg, property is defined in the object, data descriptor that is not writable, throw *)
	[[ (v == {{ "v", #l, #prop }}) * isNamedProperty(#prop) * (#l == $lg) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, {{ #l }}, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* Variable reference, $lg, property is defined in the prototype chain, not in the object, object not extensible, throw *)
	[[ (v == {{ "v", #l, #prop }}) * isNamedProperty(#prop) * (#l == $lg) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   DataDescriptor(#g_aux_1) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> false) *
	   isTypeError(err) ]]
	error;

	(* Variable reference, $lg, property is defined in the prototype chain, not in the object, object extensible, property not writable, throw *)
	[[ (v == {{ "v", #l, #prop }}) * isNamedProperty(#prop) * (#l == $lg) *
	   types (#l : Obj, #prop : Str, #cls : List) *
	   Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> true) *
	   DataDescriptor(#g_aux_1) * desc_writ(#g_aux_1, false) * (1 <# l-len (#g_aux_2)) * types (#g_aux_2 : List) ]]
	[[ Pi (#l, #prop, #cls, #g_aux_1, #g_aux_2, #g_aux_3, #g_aux_4) * ((#l, "@extensible") -> true) *
	   isTypeError(err) ]]
	error;

    (* Object reference, non-string object, property not defined, prototype chain of length 1 *)
    [[ (v == {{ "o", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * ((#l, "@extensible") -> true) *
	   Pi (#l, #prop, {{ #cls }}, undefined, {{ #l }}, {{ false }}, {{ "" }}) ]]
    [[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> null) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

    (* Variable reference, $lg, property not defined, prototype chain of length 1 *)
    [[ (v == {{ "v", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   (#l == $lg) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") * ((#l, "@extensible") -> true) *
	   Pi (#l, #prop, {{ #cls }}, undefined, {{ #l }}, {{ false }}, {{ "" }}) ]]
    [[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> null) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* Object reference, non-string object, property not defined, prototype chain of length > 1 *)
    [[ (v == {{ "o", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
       Pi (#l, #prop, (#cls :: #pcls), undefined, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, undefined, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* Variable reference, $lg, property not defined, prototype chain of length > 1 *)
    [[ (v == {{ "v", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : Str) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
       Pi (#l, #prop, (#cls :: #pcls), undefined, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * (#l == $lg) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, undefined, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* Object reference, property is defined in the object, data descriptor that is writable, success *)
    [[ (v == {{ "o", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #cls : Str, #ext : Bool) *
	   types (#denum : Bool, #dconf : Bool) *
       Pi (#l, #prop, {{ #cls }}, {{ "d", #dval, true, #denum, #dconf }}, {{ #l }}, #g_aux_3, #g_aux_4) *
	   (! (#dval == empty)) * (! (#w == empty)) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") *
	   ((#l, "@extensible") -> #ext) ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, #denum, #dconf }}, {{ #l }}, #g_aux_3, #g_aux_4) *
	   ((#l, "@extensible") -> #ext) *
	   (ret == empty) ]]
    normal;

	(* Variable reference, $lg, property is defined in the object, data descriptor that is writable, success *)
    [[ (v == {{ "v", $lg, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#prop : Str, #cls : Str, #ext : Bool) *
	   types (#denum : Bool, #dconf : Bool) *
       Pi ($lg, #prop, {{ #cls }}, {{ "d", #dval, true, #denum, #dconf }}, {{ $lg }}, #g_aux_3, #g_aux_4) *
	   (! (#dval == empty)) * (! (#w == empty)) *
	   isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") *
	   (($lg, "@extensible") -> #ext) ]]
	[[ Pi ($lg, #prop, {{ #cls }}, {{ "d", #w, true, #denum, #dconf }}, {{ $lg }}, #g_aux_3, #g_aux_4) *
	   (($lg, "@extensible") -> #ext) *
	   (ret == empty) ]]
    normal;

	(* Object reference, property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is writable *)
    [[ (v == {{ "o", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #throw : Bool, #cls : Str) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
	   types (#dcenum : Bool, #dcconf : Bool) *
       Pi (#l, #prop, (#cls :: #pcls), {{ "d", #dcval, true, #dcenum, #dcconf }}, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, {{ "d", #dcval, true, #dcenum, #dcconf }}, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal;

	(* Variable reference, $lg, property is defined in the prototype chain, not in the object (DD), object is extensible, data descriptor is writable *)
    [[ (v == {{ "v", #l, #prop }}) * (w == #w) * isNamedProperty(#prop) *
	   types (#l : Obj, #prop : Str, #throw : Bool, #cls : Str) *
	   types (#pcls : List, #llp : List, #lp : Obj, #lsp : List, #ltf : List, #lpv : List) *
	   types (#dcenum : Bool, #dcconf : Bool) *
       Pi (#l, #prop, (#cls :: #pcls), {{ "d", #dcval, true, #dcenum, #dcconf }}, (#l :: #llp), (false :: #ltf), ("" :: #lpv)) * (#llp == #lp :: #lsp) *
	   ((#l, "@extensible") -> true) * (#l == $lg) * isClass(#cls, "Non-String") * isClass(#cls, "Non-Array") ]]
	[[ Pi (#l, #prop, {{ #cls }}, {{ "d", #w, true, true, true }}, {{ #l }}, {{ false }}, {{ "" }}) * ((#l, "@proto") -> #lp) *
	   Pi (#lp, #prop, #pcls, {{ "d", #dcval, true, #dcenum, #dcconf }}, #llp, #ltf, #lpv) *
       ((#l, "@extensible") -> true) *
	   (ret == empty) ]]
    normal

proc i__putValue (v, w) {

			goto [(typeOf(v) = List)] isref throw;
	isref:	goto [((l-nth (v, 0) = "v") or (l-nth (v, 0) = "o"))] init throw;

	init:	rbase := l-nth (v, 1);
			rfield := l-nth (v, 2);
			goto [rbase = undefined] throw prim;

	prim:	prim := "i__isPrimitive" (rbase);
            goto [prim] is_pr refr;

	refr:	goto [l-nth (v, 0) = "o"] oref vref;

	oref:	xret := "put" (rbase, rfield, w, true) with elab;
			goto dflt;

	vref:	goto [rbase = $lg] lg er;

	lg:		xret := "put" (rbase, rfield, w, true) with elab;
			goto dflt;

	er:		[rbase, rfield] := w;

	dflt:	xret := empty;
	rlab:	skip;

	throw:  xret := "ReferenceError" ();
    elab:   skip;

    		(* WHY GOD, WHY THIS? *)

	is_pr:	xret := "i__toObject" (rbase) with elab;
			l := xret;
    		xret := "canPut" (l, rfield) with elab;
            goto [xret] cp reject;

    cp:     xret := "getProperty" (l, rfield) with elab;
    		dd := "i__isDataDescriptor" (xret);
    		goto [dd] reject is_ad;

   	is_ad: 	ad := "i__isAccessorDescriptor" (xret);
    		goto [ad] ad reject;

    ad:		s := l-nth (xret, 2);
    		xsc := [s, "@scope"];
    		fun := [s, "@call"];
    		xret := fun (xsc, rbase, w) with elab;
    		goto dflt;

    reject: xret := "TypeError" ();
    		goto elab
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};
