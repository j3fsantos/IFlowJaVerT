proc make_linked_list (list) {
  fori:
    i := 0;
    prev := $$null;
  nexti:
    goto [i < l-len list] thisi endfori;
  thisi:
    (** each item in the literal list **)
    x := new ();
    [x, "next"] := $$null;
    [x, "value"] := l-nth(list, i);
    i := i + 1;
    (** assign prev[next] to x if prev is not null **)
    goto [prev = $$null] firstelement otherelements;
    firstelement:
      (** first element created so set pointer **)
      first := x;
      prev := x;
      goto nexti;
    otherelements:
      [prev, "next"] := x;
      prev := x;
      goto nexti;
  endfori:
    goto rlab;
  rlab:
    skip
} with { ret: first, rlab; };

proc list_count (list) {
  x := list;
  count := 0;
  nextitem:
    goto [x = $$null] rlab inccount;
  inccount:
    count := count + 1;
    y := [x, "next"];
    x := y;
    goto nextitem;
  rlab:
    skip
} with { ret: count, rlab; };

proc make_doubly_linked_list (list) {
  fori:
    i := 0;
    prev := $$null;
    otherelements := $$f;
    firstelement := $$f;
  nexti:
    goto [i < l-len list] thisi endfori;
  thisi:
    (** each item in the literal list **)
    x := new ();
    [x, "next"] := $$null;
    [x, "prev"] := prev;
    [x, "value"] := l-nth(list, i);
    i := i + 1;
    (** assign prev[next] to x if prev is not null **)
    goto [prev = $$null] firstelement otherelements;
    firstelement:
      (** first element created so set pointer **)
      first := x;
      prev := x;
      goto nexti;
    otherelements:
      [prev, "next"] := x;
      prev := x;
      goto nexti;
    endfori:
      goto rlab;
  rlab:
    skip
} with { ret: first, rlab; };

(** creates a doubly linked list with the same data **)
proc convert_singly_doubly_list (list) {
    x := list;
    prev := $$null;
  nextitem:
    goto [x = $$null] rlab item;
  item:
    (** create new element and assign data to it **)
    newnode := new ();
    currnodedata := [x, "value"];
    [newnode, "value"] := currnodedata;
    [newnode, "prev"] := prev;
    goto [ prev = $$null ] noupdateprev updateprev;
  updateprev:
    [prev, "next"] := newnode;
  noupdateprev:
    prev := newnode;
    x := [x, "next"];
    goto nextitem;
  rlab:
    skip
} with { ret: list, rlab; };

proc find_last_element_linked_list (list) {
  x := list;
  nextitem:
    next := [x, "next"];
    goto [next = $$null] rlab hasnextelement;
  hasnextelement:
    x := next;
    goto nextitem;
  rlab:
    skip
} with { ret: x, rlab; };

(** should output 3 **)
proc main () {
  x := "make_linked_list" ({{ 1, 2, 3}});
  y := "list_count" (x);
  z := "convert_singly_doubly_list" (x);
  a := "list_count" (z);
  z_last := "find_last_element_linked_list" (z);
  last_val := [z_last, "value"];
  a := "list_count" (z);
  rlab:
    skip
} with { ret: a, rlab; };
