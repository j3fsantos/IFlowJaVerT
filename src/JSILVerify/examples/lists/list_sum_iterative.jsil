pred my_lseg(+x, +y, alpha) : 
  (x == y) * (alpha == {{ }}),
  
  ((x, "value") -> #v) * 
  ((x, "next")  -> #z) * 
  my_lseg(#z, y, #beta) *
  (alpha == #v :: #beta);



pred my_list(+x, alpha : List) : 
  (x == null) * (alpha == {{ }}),
  
  ((x, "value") -> #v) *
  ((x, "next")  -> #z) * 
  my_list(#z, #beta) *
  (alpha == #v :: #beta);


pred my_alpha_sum(+alpha,sum) : 
  (alpha == {{ }}) * (sum == 0),
  (alpha == (#v :: #beta))  * my_alpha_sum(#beta,#sum_beta) * (sum == (#sum_beta + #v));

 
lemma lseg2list(x, alpha)
  [[ (x == #x)  * 
     my_lseg(#x, null, #alpha) ]]
  [[ my_list(#x, #alpha) ]]
  
  [*
    unfold(my_lseg(#x, null, #alpha));
    if (not (#x = (null))) then {
      assert(my_lseg(#next, null, #beta));
      apply lseg2list(#next, #beta); 
      fold(my_list(#x, #alpha))
    } else {
      fold(my_list(#x, #alpha))
    }
  *]



lemma lseg_append(x, y, alpha, yval, ynext)
    variant (l-len(alpha))
  [[ (x == #x) * (y == #y) * (alpha == #alpha) * (yval == #yval) * (ynext == #ynext) * 
     my_lseg(#x, #y, #alpha) * ((#y, "value") -> #yval) * ((#y, "next") -> #ynext) ]]
  [[ my_lseg(#x, #ynext, #alpha @ {{ #yval }}) ]]
  
  [*
    unfold(my_lseg(#x, #y, #alpha));
    if (not (#alpha = {{ }})) then {
      assert(my_lseg(#next, #y, #beta));
      apply lseg_append(#next, #y, #beta, yval, ynext); 
      fold(my_lseg(#x, #ynext, #alpha @ {{ #yval }}))
    } else {
      fold(my_lseg(#x, #ynext, #alpha @ {{ #yval }}))
    }
  *]



spec list_sum_iterative (x)
   [[ (x == #x) * my_list(#x, #alpha) * my_alpha_sum(#alpha, #alpha_sum) * types(#alpha_sum: Num) ]]
   [[ my_list(#x, #alpha) * my_alpha_sum(#alpha, #alpha_sum) * (ret == #alpha_sum) ]]
   normal
   
proc list_sum_iterative(x){
           
          [* fold my_lseg (#x, #x, {{ }}); fold my_alpha_sum({{ }}, 0) *]

          count := 0;  
          [[ my_lseg(#x, x, #done) * my_list(x, #rest) * (#alpha == (#done @ #rest)) * my_alpha_sum(#done, count) * 
          my_alpha_sum(#rest, #rest_sum) * (#alpha_sum == (count + #rest_sum))]]

          [* unfold my_list(x, #rest); unfold my_alpha_sum(#rest, #rest_sum) *]
  head:   goto [ x = null ] prlab else1;

  else1:  x_next := [x, "next"];
          x_val  := [x, "value"];

          [* apply lseg_append(#x, x, #done, x_val, x_next);
             fold my_alpha_sum(#done @ {{ x_val }}, count + x_val);
             fold my_alpha_sum((cdr #rest), (#rest_sum - x_val)) *]
          count := count + x_val;
          
          x := x_next;
          goto head;

          [* apply lseg2list(#x, #alpha) *]
  prlab:  skip; 

  rlab:   skip
} 
with 
{ 
  ret: count, rlab; 
};

