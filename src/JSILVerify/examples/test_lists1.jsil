(** Totals: 0 fails and 1 passes **)

pred my_list (x, alpha, size) :
	(x == null) * (alpha == {{ }}) *
		(size == 0) * types(alpha: List, size: Num),

	((x, "value") -> #y) * ((x, "next") -> #z) * ((x, "@proto") -> null) *
		(alpha == (#y :: #beta)) * my_list(#z, #beta, #size_beta) * (size == (#size_beta + 1)) *
		types(#y: Num, #alpha: List, #beta: List, size: Num, #size_beta: Num);



(** Expected result: YES                             **)
spec list_count (x)
   [[ (x == #x) * my_list(#x, #alpha, #size) * types(#size: Num, #alpha: List) ]]
   [[ my_list(#x, #alpha, #size) * types(#size: Num) * (ret == #size) ]]
   normal
proc list_count (x) {
       [* unfold(my_list(x, #alpha, #size)) *]
          goto [ x = null ] then1 else1;
   then1: count := 0;
          goto rlab;
   else1: z := [x, "next"];
           (* [x, "value"] := 3; *)
           count := "list_count"(z);
           count := count + 1;
           [* fold my_list(x, #alpha, #size) *]
   rlab:   skip
} with { ret: count, rlab; };

proc make_list (list) {
          goto [ list = nil] then1 else1;
  then1:  x := null;
          goto rlab;
  else1:  x := new ();
          [x, "value"] := l-nth(list, 0);
          y := "make_list"(cdr list);
          [x, "next"] := y;
          goto rlab;
  rlab:   skip
} with { ret: x, rlab; };

proc main () {
        x := "make_list" ({{ 1, 2, 3}});
        y := "list_count" (x);
  rlab: skip
} with { ret: y, rlab; };
