import "field_logic";
import "list_logic";
import "le_lt_logic";
import "pulp_footprint_logic";
import "proto_field_logic";
import "subtype_logic";
import "pulp_type_logic";
import "string_logic";

rule true_false_contr :
  | true() = false() |-
if

rule field_not_none :
   field(?x,?f,?y) | |- ?x!=none()
if
   | |-
   
rule field_not_undefined :
  field(?x,?f,?y) | |- ?x!=undefined() 
if
  | |-
  
rule field_not_null :
  field(?x,?f,?y) | |- ?x!=null()
if
  | |-
  
rule field_not_number_type :
  field(?x,?f,?y) | |- type_of(?x)!=NumberType()
if
  | |-
  
rule field_not_boolean_type :
  field(?x,?f,?y) | |- type_of(?x)!=BooleanType()
if
  | |-
  
rule field_not_string_type :
  field(?x,?f,?y) | |- type_of(?x)!=StringType()
if
  | |-
 
/* TODO : add location_const */
rule lg_not_none :
   | |- lg() != none()
without lg()!=none()
if
  | |-
  
rule leval_not_none :
   | |- leval() != none()
without leval()!=none()
if
  | |-
 
rule empty_not_none :
  | |- empty_value() !=none()
without empty_value() !=none()
if
 | |-
 
rule undefined_not_none :
  | |- undefined() !=none()
without undefined() !=none()
if
 | |-
 
rule type_of_string_not_none :
  | type_of (?x) = StringType() |- ?x !=none()
without ?x !=none()
if
 | |-
 
 rule string_const_not_none :
  | |- string_const(?x)!=none()
without string_const(?x)!=none()
if
 | |-
 
rule type_of_bobject_not_none :
  | type_of (?x) = BObjectType() |- ?x !=none()
without ?x !=none()
if
 | |-
 
rule type_of_nobject_not_none :
  | type_of (?x) = NObjectType() |- ?x !=none()
without ?x !=none()
if
 | |-
 
rule numeric_const_not_none :
  | |- numeric_const(?x) !=none()
without numeric_const(?x) !=none()
if
 | |-
 
 rule number_type_not_none :
  | type_of(?x) = NumberType() |- ?x != none()
without ?x != none()
if
 | |- 
 
rule false_not_true :
  | |- false() !=true()
without false() !=true()
if
 | |-
 
rule true_not_none :
  | |- true() !=none()
without true() !=none()
if
 | |-
 
rule false_not_none :
  | |- false() !=none()
without false() !=none()
if
 | |-
 
rule type_of_true :
  | |- type_of(true()) = BooleanType()
without type_of(true()) = BooleanType()
if
 | |- 

 /* TODO: Implement negation properly */
rewrite not_undefined_none : 
  bool_not(triple_eq(undefined(), none())) = true()
  
rewrite not_string_none : 
  bool_not(triple_eq(string_const(?x), none())) = true()
  
rewrite not_empty_eq_empty : 
  bool_not(triple_eq(none(), none())) = false()

rule lg_not_undefined :
  | |- lg() != undefined()
if
  | |-
  

/*
rule field_not_a_vref :
   field(?x,?f,?y) | |- type_of(?x) != VariableReferenceType()
if
   | |-
   

rule field_not_a_mref :
   field(?x,?f,?y) | |- type_of(?x) != MemberReferenceType()
if
   | |-
 */
   
rewrite base_ref:
  ref_base(ref(?x,string_const(?f),?t)) = ?x
  
rewrite field_base:
  ref_field(ref(?x,string_const(?f),?t)) = string_const(?f)
    
rule type_of_ref_vref :  
  | |- type_of(ref(?x, string_const(?f), Variableref()))=VariableReferenceType()
without type_of(ref(?x, string_const(?f), Variableref()))=VariableReferenceType()
if
  | |-
  
/*  
rule type_of_ref_mref_string_const :  
  | |- type_of(ref(?x, string_const(?f), Memberref()))=MemberReferenceType()
without type_of(ref(?x, string_const(?f), Memberref()))=MemberReferenceType()
if
  | |-
*/ 
  
rewrite type_of_ref_mref_string_const :
  type_of(ref(?x, string_const(?f), Memberref()))=MemberReferenceType()
  
rule type_of_ref_mref :  
  | |- type_of(ref(?x, ?f, Memberref()))=MemberReferenceType()
without type_of(ref(?x, ?f, Memberref()))=MemberReferenceType()
if
  | |- 

/* TODO  Make more general */
rule nobj_not_lg :
  | type_of (?x) = NObjectType() |- ?x != lg()  
without ?x != lg()
if | |-


/*  
rule field_loc:
  | field(?x,?f,?t) |-  field(?z,?f,?t) 
without
  ?x!=?z
if
  field(?x,?f,?t) | |- ?x=?z 
*/


/* Contadiction rule */
/*rule lg_not_undefined :
  | lg() = undefined() |-
if*/

/*
rule eq_nan :  
  | ?x = numeric_const(?y) * ?x = numeric_const("nan") * ?y != "nan"  |-
if
*/
