import Object;

proc create_default_object (l, pr, cl, ext) {

			goto [cl = $$undefined] scl text;
	scl:	cl := "Object";
	text:	goto [ext = $$undefined] sext setall;
	sext:	ext := $$t;

	setall:	[l, "@proto"] := pr;
			[l, "@class"] := cl;
			[l, "@extensible"] := ext;

	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

proc copy_object (l, fields) {
			xret := new ();
	rlab:	xret := "copy_object_rec" (l, fields, xret)
}
with
{
	ret:	xret, rlab;
};

proc copy_object_rec (lf, fields, lt) {
			goto [fields = $$nil] rlab next;

	next:	head := car fields;
			tail := cdr fields;

			val := [lf, head];
			[lt, head] := val;

			xret := "copy_object_rec" (lf, tail, lt);

	rlab:	xret := lt
}
with
{
	ret:	xret, rlab;
};

proc create_function_object (xsc, call, construct, params) {
			len := l-len (params);
			l := new ();
			l := "create_object_with_call_construct" (l, call, construct, len);

			[l, "@scope"] := xsc;

			prototype := "Object_construct" ();
			[prototype, "constructor"] := {{ "d", l, $$t, $$f, $$t }};
			[l, "prototype"] := {{ "d", prototype, $$t, $$f, $$f }};

			(* Strict mode only *)
			[l, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};
			[l, "arguments"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};

			xret := l;

	rlab:	skip
}
with
{
	ret:	xret, rlab;
};

proc create_object_with_call_construct (l, call, construct, len) {

			xret := "create_default_object" (l, $lfun_proto, "Function", $$t);

			[xret, "@scope"] := $$empty;

			[xret, "length"] := {{ "d", len, $$f, $$f, $$f }};

			[xret, "@call"] := call;

			goto [construct = $$empty] rlab cstr;

	cstr:	[xret, "@construct"] := construct;

	rlab:	xret := l
}
with
{
	ret:	xret, rlab;
};

proc setupInitialHeap () {


			(* Global object *)

			xret := "create_default_object" ($lg, $lobj_proto, "Object", $$t);

			(* Object.prototype *)

			xret := "create_default_object" ($lobj_proto, $$null, "Object", $$t);
			
			[$lobj_proto, "hasOwnProperty"] := {{ "d", $lop_hasOwnProperty, $$t, $$f, $$t }};
  			
  			xret := "create_object_with_call_construct" ($lop_hasOwnProperty, "OP_hasOwnProperty", $$empty, 1);

			(* Function.prototype *)
			
			xret := "create_object_with_call_construct" ($lfun_proto, "FP_default", $$empty, 0);
			[$lfun_proto, "@proto"] := $lobj_proto;
			
			(* Error object *)

			xret := "create_object_with_call_construct" ($lerr, "Error_call", "Error_construct", 1);
			[$lg, "Error"] := {{ "d", $lerr, $$t, $$f, $$t }};
			[$lerr, "prototype"] := {{ "d", $lerr_proto, $$f, $$f, $$f }};

			(* Error.prototype *)

			xret := "create_default_object" ($lerr_proto, $lobj_proto, "Error", $$t);
			[$lerr_proto, "message"]     := {{ "d", "", $$t, $$f, $$t }};

			[$lg, "String"]             := {{ "d", $lstr, $$t, $$f, $$t }};
  			
			(* String object *)

			xret := "create_object_with_call_construct" ($lstr, "String_call", "String_construct", 1);

			[$lstr, "prototype"]    := {{ "d", $lstr_proto, $$f, $$f, $$f }};
			[$lstr, "fromCharCode"] := {{ "d", $lstr_fromCharCode, $$t, $$f, $$t }};

			xret := "create_object_with_call_construct" ($lstr_fromCharCode, "String_fromCharCode", $$empty, 1);

			(* String.prototype *)

			xret := "create_default_object" ($lstr_proto, $lobj_proto, "String", $$t);

			[$lstr_proto, "@primitiveValue"]   := "";
			[$lstr_proto, "length"]            := {{ "d", 0, $$f, $$f, $$f }};
			[$lstr_proto, "constructor"]       := {{ "d", $lstr, $$t, $$f, $$t }};
			[$lstr_proto, "toString"]          := {{ "d", $lsp_toString, $$t, $$f, $$t }};
			[$lstr_proto, "valueOf"]           := {{ "d", $lsp_valueOf, $$t, $$f, $$t }};
			[$lstr_proto, "charAt"]            := {{ "d", $lsp_charAt, $$t, $$f, $$t }};
			[$lstr_proto, "charCodeAt"]        := {{ "d", $lsp_charCodeAt, $$t, $$f, $$t }};
			[$lstr_proto, "concat"]            := {{ "d", $lsp_concat, $$t, $$f, $$t }};
			[$lstr_proto, "indexOf"]           := {{ "d", $lsp_indexOf, $$t, $$f, $$t }};
			[$lstr_proto, "lastIndexOf"]       := {{ "d", $lsp_lastIndexOf, $$t, $$f, $$t }};
			[$lstr_proto, "localeCompare"]     := {{ "d", $lsp_localeCompare, $$t, $$f, $$t }};
			[$lstr_proto, "match"]             := {{ "d", $lsp_match, $$t, $$f, $$t }};
			[$lstr_proto, "replace"]           := {{ "d", $lsp_replace, $$t, $$f, $$t }};
			[$lstr_proto, "search"]            := {{ "d", $lsp_search, $$t, $$f, $$t }};
			[$lstr_proto, "slice"]             := {{ "d", $lsp_slice, $$t, $$f, $$t }};
			[$lstr_proto, "split"]             := {{ "d", $lsp_split, $$t, $$f, $$t }};
			[$lstr_proto, "substring"]         := {{ "d", $lsp_substring, $$t, $$f, $$t }};
			[$lstr_proto, "toLowerCase"]       := {{ "d", $lsp_toLowerCase, $$t, $$f, $$t }};
			[$lstr_proto, "toLocaleLowerCase"] := {{ "d", $lso_toLocaleLowerCase, $$t, $$f, $$t }};
			[$lstr_proto, "toUpperCase"]       := {{ "d", $lsp_toUpperCase, $$t, $$f, $$t }};
			[$lstr_proto, "toLocaleUpperCase"] := {{ "d", $lsp_toLocaleUpperCase, $$t, $$f, $$t }};
			[$lstr_proto, "trim"]              := {{ "d", $lsp_trim, $$t, $$f, $$t }};

			xret := "create_object_with_call_construct" ($lsp_toString, "SP_toString", $$empty, 0);
			xret := "create_object_with_call_construct" ($lsp_valueOf, "SP_valueOf", $$empty, 0);
			xret := "create_object_with_call_construct" ($lsp_charAt, "SP_charAt", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_charCodeAt, "SP_charCodeAt", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_concat, "SP_concat", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_indexOf, "SP_indexOf", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_lastIndexOf, "SP_lastIndexOf", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_localeCompare, "SP_localeCompare", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_match, "SP_match", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_replace, "SP_replace", $$empty, 2);
			xret := "create_object_with_call_construct" ($lsp_search, "SP_search", $$empty, 1);
			xret := "create_object_with_call_construct" ($lsp_slice, "SP_slice", $$empty, 2);
			xret := "create_object_with_call_construct" ($lsp_split, "SP_split", $$empty, 2);
			xret := "create_object_with_call_construct" ($lsp_substring, "SP_substring", $$empty, 2);
			xret := "create_object_with_call_construct" ($lsp_toLowerCase, "SP_toLowerCase", $$empty, 0);
			xret := "create_object_with_call_construct" ($lso_toLocaleLowerCase, "lso_toLocaleLowerCase", $$empty, 0);
			xret := "create_object_with_call_construct" ($lsp_toUpperCase, "SP_toUpperCase", $$empty, 0);
			xret := "create_object_with_call_construct" ($lsp_toLocaleUpperCase, "SP_toLocaleUpperCase", $$empty, 0);
			xret := "create_object_with_call_construct" ($lsp_trim, "SP_trim", $$empty, 0);


	rlab:	xret := $$empty
}
with
{
	ret:	xret, rlab;
};


(* **************** *)
(* ARGUMENTS OBJECT *)
(* **************** *)

proc create_arguments_object (argList) {

			len := l-len (argList);

			(* Create the arguments object *)
			xret := new ();
			xret := "create_default_object" (xret, $lobj_proto, "Arguments", $$t);
			obj  := xret;

			(* Define length *)
			xret := "defineOwnProperty" (obj, "length", {{ "d", len, $$t, $$f, $$t }}, $$f) with elab;

			(* Loop through values *)
			indx := len - 1;

	loop:	goto [0 <= indx] head call;
	head:	xret := "i__toString" (indx) with elab;
			xret := "defineOwnProperty" (obj, xret, {{ "d", l-nth (argList, indx), $$t, $$t, $$t }}, $$f) with elab;
			indx := indx - 1;
			goto loop;

			(* Set caller and callee *)
	call:	[obj, "caller"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};
			[obj, "callee"] := {{ "a", $lthrow_type_error, $lthrow_type_error, $$f, $$f }};

	rlab:	xret := obj;
	elab:	skip
}
with
{
	ret:	xret, rlab;
	err:	xret, elab;
};
