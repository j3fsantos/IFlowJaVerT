import javert_internal_functions, javert_logic_macros, javert_js_predicates;

pred Object (l, proto) :
	types (l : $$object_type) *
	((l, "@proto") -> proto) *
	((l, "@class") -> "Object") *
	((l, "@extensible") -> $$t);

pred DOMObject (l, proto) :
    types (l : $$object_type) *
	((l, "@proto") -> proto) *
	((l, "@class") -> "Object") *
	((l, "@extensible") -> $$f);

pred DOMField (l, prop, v) :
    types (l : $$object_type, prop : $$string_type) *
	((l, prop) -> {{ "d", v, $$f, $$f, $$f }});

pred DOMFunctionObject (l, call) :
	types(l : $$object_type, call : $$string_type) *
	((l, "@proto") -> $lfun_proto) * 
	((l, "@class") -> "Function") * 
	((l, "@extensible") -> $$f) *
	((l, "@scope") -> {{}}) *
	((l, "@call")  -> call) *
	empty_fields(l : "@proto", "@class", "@extensible", "@call");

pred DOMFunctionField(l, call) :
	DOMField(l, call, #lnn) *
	DOMFunctionObject(#lnn, call);


pred NodePrototype() :
	DOMObject($l_np, $$null) *
	DOMFunctionField($l_np, "nodeName") *
	DOMFunctionField($l_np, "nodeValue") *
	DOMFunctionField($l_np, "nodeType") *
	DOMFunctionField($l_np, "parentNode") *
	DOMFunctionField($l_np, "childNodes") *
	DOMFunctionField($l_np, "firstChild") *
	DOMFunctionField($l_np, "lastChild") *
	DOMFunctionField($l_np, "previousSibling") *
	DOMFunctionField($l_np, "nextSibling") *
	DOMFunctionField($l_np, "ownerDocument") *
	DOMFunctionField($l_np, "insertBefore") *
	DOMFunctionField($l_np, "replaceChild") *
	DOMFunctionField($l_np, "removeChild") *
	DOMFunctionField($l_np, "appendChild") *
	DOMFunctionField($l_np, "hasChildNodes") *
	empty_fields($l_np : "@proto", "@class", "@extensible", "nodeName", "nodeValue", "nodeType", "parentNode", "childNodes", "firstChild", 
		"lastChild", "previousSibling", "nextSibling", "ownerDocument", "insertBefore", "replaceChild", "removeChild", "appendChild", "hasChildNodes");

pred DocumentNodePrototype() :
	DOMObject($l_dnp, $l_np) *
	(($l_dnp, "@name") -> "#document") *
	DOMFunctionField($l_dnp, "documentElement") *
	DOMFunctionField($l_dnp, "createElement") *
	DOMFunctionField($l_dnp, "createTextNode") *
	DOMFunctionField($l_dnp, "createAttribute") *
	DOMFunctionField($l_dnp, "getElementsByTagName") *
	empty_fields($l_dnp : "@proto", "@class", "@extensible", "documentElement", "createElement", "createTextNode", "createAttribute", "getElementsByTagName");

pred DocumentNode(dn, element) :
	DOMObject(dn, $l_dnp) *
	((dn, "@element") -> element) *
	types(element: $$object_type) *
	empty_fields(dn : "@proto", "@class", "@extensible", "@element");

pred ElementNodePrototype() :
	DOMObject($l_enp, $l_np) *
	DOMFunctionField($l_enp, "tagName") *
	DOMFunctionField($l_enp, "getAttribute") *
	DOMFunctionField($l_enp, "setAttribute") *
	DOMFunctionField($l_enp, "removeAttribute") *
	DOMFunctionField($l_enp, "getAttributeNode") *
	DOMFunctionField($l_enp, "setAttributeNode") *
	DOMFunctionField($l_enp, "removeAttributeNode") *
	DOMFunctionField($l_enp, "getElementsByTagName") *
	empty_fields($l_enp : "@proto", "@class", "@extensible", "tagName", "getAttribute", "setAttribute", "removeAttribute", "getAttributeNode", 
		"setAttributeNode", "removeAttributeNode", "getElementsByTagName");

pred ElementNode(en, name, attr, children) :
	DOMObject(en, $l_enp) *
	((en, "@name") -> name) *
	((en, "@attributes") -> attr) *
	((en, "@children") -> children) *
	types(name: $$string_type, attr: $$list_type, children: $$list_type) *
	empty_fields(en : "@proto", "@class", "@extensible", "@name", "@attributes", "@children");

pred InitialDOMHeap() :
	NodePrototype() * DocumentNodePrototype() * ElementNodePrototype();

only spec createElement(xsc, xthis, x)
	[[ (xsc == #xsc) * (xthis == #dn) * (x == #name) * DocumentNode(#dn, #element) ]]
	[[ DocumentNode(#dn, #element) * ElementNode(ret, #name, {{}}, {{}}) ]]
	normal

spec test_func()
	[[ DocumentNode($ldoc, #element) ]]
	[[ DocumentNode($ldoc, #element) * ElementNode(ret, "tests", {{}}, {{}}) ]]
	normal

proc test_func() {

			xret := "createElement" ({{}}, $ldoc, "tests");

	rlab:	skip
}
with
{
	ret: 	xret, rlab;
};